Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.approx_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.symmetric_difference", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.approx_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.symmetric_difference", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.approx_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.approx_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.symmetric_difference.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.approx_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.symmetric_difference", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.approx_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.symmetric_difference", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 104, 134, 152, 205, 279, 293, 511, 706, 741, 841, 892, 1071, 1215], "refer": [0, 40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 161, 293, 394, 397, 509, 510, 554, 600, 629, 630, 631, 634, 741, 766, 805, 853, 956, 959, 1091, 1171, 1172, 1173, 1176, 1215], "input": [0, 78, 84, 106, 114, 115, 156, 182, 185, 205, 209, 218, 235, 236, 239, 243, 246, 258, 268, 269, 272, 293, 300, 338, 416, 439, 503, 510, 511, 520, 543, 589, 625, 626, 627, 628, 657, 659, 661, 662, 664, 667, 670, 671, 672, 679, 683, 692, 693, 700, 701, 702, 704, 705, 706, 708, 712, 720, 723, 725, 731, 741, 753, 758, 779, 782, 810, 811, 812, 814, 818, 823, 829, 830, 834, 853, 897, 997, 1067, 1068, 1070, 1071, 1120, 1215], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 57, 119, 153, 183, 184, 186, 187, 199, 205, 209, 212, 218, 220, 229, 231, 235, 246, 264, 268, 293, 303, 305, 307, 356, 499, 507, 508, 509, 511, 519, 531, 551, 562, 567, 569, 571, 573, 592, 606, 654, 658, 660, 662, 673, 685, 686, 704, 705, 706, 728, 741, 753, 780, 781, 783, 784, 793, 794, 798, 799, 808, 810, 812, 829, 833, 836, 841, 853, 860, 861, 863, 913, 1071, 1089, 1134, 1148, 1203, 1215], "seri": [0, 1, 2, 16, 30, 69, 70, 79, 80, 81, 82, 86, 87, 88, 103, 105, 108, 110, 137, 139, 140, 144, 164, 172, 175, 178, 180, 183, 188, 191, 192, 193, 195, 197, 206, 207, 208, 209, 213, 214, 225, 226, 227, 229, 233, 245, 246, 250, 253, 256, 257, 273, 293, 306, 307, 318, 326, 334, 335, 337, 390, 419, 425, 429, 430, 437, 441, 444, 445, 448, 450, 451, 452, 464, 472, 474, 497, 499, 505, 507, 509, 511, 548, 554, 555, 556, 557, 558, 560, 562, 563, 564, 570, 578, 581, 592, 618, 629, 630, 631, 634, 638, 644, 645, 653, 662, 663, 664, 668, 669, 674, 676, 677, 680, 681, 685, 686, 688, 689, 693, 694, 696, 698, 700, 701, 702, 703, 704, 705, 706, 709, 710, 713, 714, 716, 717, 720, 722, 723, 726, 728, 729, 730, 732, 741, 753, 775, 780, 808, 835, 853, 1207, 1209, 1211, 1214, 1216, 1219, 1220, 1221, 1223], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 84, 85, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 131, 132, 133, 137, 138, 141, 142, 150, 291, 292, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 737, 741, 753, 763, 764, 767, 771, 772, 776, 780, 788, 789, 790, 791, 793, 794, 798, 799, 803, 807, 817, 818, 824, 825, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 862, 877, 879, 890, 913, 914, 952, 993, 1024, 1025, 1035, 1071, 1089, 1146, 1162, 1163, 1184, 1192, 1193, 1203, 1215, 1222, 1223], "lazyfram": [0, 1, 63, 64, 66, 68, 78, 79, 80, 81, 82, 84, 85, 86, 128, 129, 130, 131, 132, 133, 134, 137, 138, 144, 203, 219, 220, 236, 269, 293, 332, 422, 499, 741, 753, 852, 856, 1222, 1223], "express": [0, 13, 57, 58, 59, 84, 85, 141, 144, 146, 156, 168, 170, 172, 182, 185, 205, 216, 220, 230, 235, 236, 239, 243, 258, 268, 269, 272, 279, 293, 300, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317, 318, 323, 326, 328, 329, 330, 332, 338, 341, 342, 343, 355, 356, 357, 359, 362, 363, 364, 365, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 416, 418, 419, 421, 422, 426, 428, 429, 431, 432, 433, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 454, 457, 462, 463, 465, 466, 467, 471, 472, 478, 480, 498, 499, 505, 506, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 522, 524, 526, 528, 530, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 547, 548, 549, 550, 551, 553, 557, 558, 560, 576, 577, 578, 580, 582, 584, 585, 587, 589, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 618, 619, 620, 621, 640, 641, 644, 646, 647, 650, 651, 653, 654, 656, 657, 658, 659, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 706, 708, 712, 714, 716, 717, 718, 719, 720, 721, 723, 725, 727, 728, 729, 731, 732, 737, 740, 753, 758, 763, 764, 770, 771, 772, 775, 779, 782, 803, 810, 811, 814, 815, 816, 818, 823, 829, 830, 831, 834, 841, 853, 856, 897, 912, 922, 981, 997, 1030, 1031, 1035, 1071, 1114, 1120, 1121, 1135, 1136, 1137, 1142, 1143, 1144, 1145, 1146, 1156, 1157, 1215], "selector": [0, 40, 157, 163, 165, 168, 211, 218, 220, 252, 260, 262, 293, 416, 741, 753, 760, 767, 768, 771, 798, 824, 853], "extend": [0, 106, 266, 293, 419, 741, 753, 862, 981, 1215], "function": [0, 40, 69, 78, 79, 80, 81, 82, 85, 87, 88, 104, 110, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 137, 138, 139, 140, 142, 152, 153, 161, 167, 175, 205, 211, 219, 220, 255, 259, 262, 263, 274, 279, 293, 303, 307, 355, 391, 413, 414, 415, 499, 507, 508, 509, 511, 531, 543, 547, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 586, 648, 658, 662, 676, 677, 680, 681, 682, 683, 693, 694, 696, 702, 704, 705, 706, 716, 737, 741, 753, 763, 764, 766, 772, 793, 794, 798, 802, 805, 836, 841, 853, 863, 912, 953, 974, 975, 976, 977, 993, 1063, 1071, 1089, 1099, 1100, 1113, 1116, 1123, 1128, 1197, 1215, 1223], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 46, 57, 58, 59, 63, 69, 78, 79, 81, 86, 88, 93, 94, 98, 100, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 137, 138, 139, 140, 142, 143, 144, 146, 152, 159, 169, 181, 182, 183, 184, 185, 186, 187, 199, 200, 201, 203, 205, 218, 219, 223, 229, 230, 231, 232, 241, 249, 254, 255, 259, 268, 271, 291, 293, 303, 304, 305, 309, 310, 311, 312, 313, 314, 317, 320, 321, 322, 323, 324, 326, 328, 329, 330, 333, 334, 338, 341, 342, 343, 356, 357, 362, 363, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 418, 429, 431, 432, 433, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 457, 462, 463, 465, 472, 478, 480, 486, 498, 501, 506, 511, 538, 539, 542, 543, 551, 553, 554, 557, 558, 560, 562, 574, 576, 584, 585, 586, 592, 594, 595, 597, 599, 600, 601, 602, 604, 605, 606, 618, 619, 620, 621, 629, 630, 631, 634, 637, 646, 647, 648, 650, 651, 654, 657, 662, 664, 684, 685, 686, 687, 688, 689, 690, 700, 701, 703, 704, 705, 706, 714, 717, 727, 728, 729, 732, 737, 741, 753, 761, 762, 763, 772, 779, 780, 781, 782, 783, 784, 802, 808, 829, 853, 860, 861, 862, 873, 877, 878, 879, 880, 882, 886, 888, 896, 897, 900, 913, 920, 921, 924, 925, 926, 928, 930, 932, 933, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 953, 954, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 979, 980, 993, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1026, 1027, 1029, 1036, 1042, 1044, 1050, 1062, 1065, 1071, 1083, 1089, 1091, 1095, 1097, 1110, 1112, 1123, 1128, 1134, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1160, 1161, 1162, 1163, 1171, 1172, 1173, 1176, 1179, 1195, 1196, 1197, 1198, 1200, 1205, 1214, 1215, 1222], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 93, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 123, 124, 125, 128, 129, 130, 132, 136, 137, 138, 139, 140, 143, 144, 153, 175, 181, 183, 184, 186, 187, 188, 200, 201, 205, 229, 249, 255, 257, 260, 293, 303, 305, 309, 310, 311, 312, 313, 314, 317, 323, 326, 328, 329, 330, 333, 334, 335, 338, 341, 342, 343, 356, 357, 362, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 416, 418, 429, 432, 434, 439, 440, 441, 442, 443, 444, 445, 446, 447, 462, 463, 465, 472, 478, 480, 498, 499, 510, 511, 551, 553, 557, 558, 560, 562, 584, 585, 592, 594, 595, 597, 599, 600, 601, 602, 604, 605, 606, 618, 619, 620, 621, 629, 646, 647, 648, 654, 662, 664, 684, 685, 686, 687, 688, 689, 690, 692, 693, 700, 701, 702, 703, 704, 705, 706, 714, 717, 727, 728, 729, 732, 737, 741, 753, 763, 764, 770, 772, 780, 781, 783, 784, 788, 803, 808, 816, 824, 853, 860, 861, 873, 878, 880, 882, 886, 888, 890, 897, 913, 920, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 979, 991, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1026, 1027, 1029, 1036, 1042, 1044, 1062, 1063, 1083, 1089, 1095, 1097, 1123, 1134, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1160, 1161, 1162, 1163, 1171, 1195, 1196, 1198, 1206, 1215, 1222], "config": [0, 78, 235, 268, 293, 690, 753, 763, 810, 829, 853], "except": [0, 137, 189, 202, 204, 247, 293, 692, 753, 789, 853, 856, 992, 1022, 1186, 1196, 1205, 1215], "test": [0, 6, 116, 117, 119, 125, 753, 785, 792, 853], "util": [0, 110, 696, 753, 772, 853], "sql": [0, 38, 63, 67, 116, 117, 201, 239, 293, 491, 579, 721, 741, 753, 814, 853, 1055, 1120, 1215], "These": [1, 40, 116, 150, 259, 293, 405, 740, 741, 953, 967], "allow": [1, 13, 39, 40, 57, 58, 59, 69, 88, 93, 104, 116, 128, 131, 132, 133, 134, 144, 146, 152, 199, 202, 203, 230, 231, 233, 254, 255, 260, 271, 293, 387, 394, 397, 486, 509, 511, 556, 576, 629, 630, 631, 741, 788, 789, 793, 794, 798, 824, 831, 853, 856, 949, 956, 959, 1050, 1071, 1093, 1112, 1115, 1171, 1172, 1173, 1197, 1215, 1223], "you": [1, 15, 19, 40, 45, 59, 68, 78, 85, 86, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 120, 123, 124, 126, 128, 132, 133, 134, 150, 169, 183, 184, 186, 187, 199, 205, 216, 220, 229, 230, 231, 232, 251, 254, 259, 279, 293, 383, 384, 387, 390, 394, 397, 405, 416, 422, 439, 471, 499, 509, 510, 511, 556, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 605, 676, 685, 690, 694, 706, 714, 717, 732, 741, 764, 768, 780, 781, 783, 784, 785, 792, 808, 816, 841, 853, 856, 862, 945, 946, 952, 953, 956, 959, 967, 980, 997, 1035, 1071, 1093, 1098, 1147, 1173, 1205, 1215, 1223], "regist": [1, 63, 65, 66, 67, 68, 79, 80, 81, 82, 145, 147, 741, 1222], "custom": [1, 32, 39, 40, 79, 80, 81, 82, 145, 146, 147, 153, 205, 274, 279, 293, 307, 394, 397, 499, 507, 509, 511, 563, 564, 662, 704, 705, 706, 741, 793, 794, 836, 841, 853, 863, 956, 959, 1063, 1071, 1099, 1100, 1215, 1223], "dedic": [1, 104, 199, 231, 293], "namespac": [1, 292, 740, 753, 852, 1223], "underli": [1, 69, 88, 96, 103, 105, 106, 107, 109, 116, 123, 124, 126, 132, 141, 144, 146, 168, 169, 199, 200, 231, 249, 293, 327, 363, 364, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 390, 392, 406, 407, 408, 409, 556, 574, 593, 596, 741, 771, 853, 856, 862, 881, 891, 921, 922, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 952, 954, 968, 969, 970, 971, 980, 1093, 1110, 1123, 1135, 1138, 1191, 1196, 1215], "polar": [1, 293, 740, 741, 747, 753, 853, 856, 1215, 1222], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 142, 232, 255, 293, 728, 737, 741, 747, 753, 805, 853, 1195, 1196, 1215, 1222], "without": [1, 85, 110, 118, 121, 127, 129, 130, 134, 262, 263, 293, 307, 355, 391, 565, 566, 567, 568, 569, 571, 572, 573, 720, 741, 764, 853, 889, 892, 912, 953, 993, 1089, 1196, 1215], "requir": [1, 39, 40, 45, 59, 78, 104, 108, 116, 137, 138, 139, 140, 156, 161, 230, 255, 258, 293, 324, 413, 414, 415, 501, 511, 581, 629, 630, 631, 651, 717, 741, 758, 818, 823, 853, 879, 975, 976, 977, 1065, 1122, 1171, 1172, 1173, 1196, 1197, 1200, 1215], "subclass": [1, 293], "mixin": 1, "expr": [1, 78, 79, 80, 81, 82, 168, 170, 201, 202, 216, 220, 230, 235, 236, 268, 269, 293, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 736, 737, 741, 742, 743, 746, 747, 748, 749, 750, 771, 773, 788, 789, 804, 810, 811, 812, 815, 829, 830, 853, 912, 922, 949, 967, 982, 987, 1024, 1025, 1030, 1031, 1035, 1040, 1056, 1060, 1121, 1135, 1140, 1164, 1187, 1215], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 57, 58, 59, 68, 69, 78, 85, 86, 87, 88, 95, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 142, 144, 150, 152, 156, 161, 165, 167, 170, 174, 175, 181, 182, 183, 184, 185, 186, 187, 199, 201, 202, 203, 205, 211, 212, 218, 220, 229, 230, 231, 232, 235, 236, 237, 239, 243, 250, 255, 258, 263, 264, 268, 269, 272, 293, 303, 305, 332, 338, 344, 346, 348, 349, 391, 405, 410, 412, 413, 414, 415, 439, 441, 444, 445, 448, 450, 451, 452, 455, 458, 460, 480, 491, 499, 509, 510, 539, 543, 551, 554, 557, 558, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 583, 586, 588, 589, 602, 603, 604, 611, 612, 613, 637, 642, 658, 659, 661, 667, 670, 671, 672, 673, 679, 683, 685, 686, 688, 689, 708, 712, 720, 723, 725, 728, 729, 731, 733, 734, 736, 740, 741, 742, 743, 746, 747, 748, 749, 750, 753, 758, 763, 764, 768, 772, 773, 779, 780, 781, 782, 783, 784, 785, 788, 789, 792, 794, 798, 799, 803, 806, 808, 810, 811, 813, 814, 818, 823, 826, 829, 830, 831, 834, 853, 856, 860, 861, 862, 889, 897, 906, 907, 953, 967, 973, 974, 975, 976, 977, 990, 997, 1001, 1005, 1006, 1010, 1011, 1012, 1013, 1020, 1021, 1024, 1044, 1055, 1063, 1089, 1091, 1095, 1106, 1120, 1125, 1128, 1144, 1145, 1153, 1154, 1155, 1173, 1179, 1185, 1197, 1205, 1207, 1209, 1211, 1215, 1216, 1219, 1220, 1221, 1223], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 40, 46, 57, 65, 78, 84, 103, 106, 108, 109, 114, 115, 118, 119, 120, 122, 125, 126, 128, 131, 132, 141, 142, 146, 150, 157, 162, 165, 171, 189, 195, 197, 199, 200, 203, 204, 209, 211, 215, 216, 223, 230, 231, 232, 236, 242, 246, 247, 252, 254, 260, 262, 263, 264, 269, 293, 304, 306, 325, 344, 355, 360, 361, 362, 416, 421, 427, 434, 436, 438, 441, 445, 451, 452, 454, 458, 470, 471, 478, 494, 499, 508, 509, 527, 530, 531, 532, 533, 534, 535, 541, 549, 554, 559, 564, 581, 587, 589, 594, 595, 601, 602, 603, 604, 609, 614, 615, 617, 623, 624, 625, 626, 641, 659, 676, 677, 678, 679, 682, 683, 685, 692, 694, 699, 716, 723, 724, 725, 731, 741, 747, 753, 760, 763, 764, 768, 770, 772, 774, 793, 794, 798, 803, 811, 816, 817, 824, 826, 830, 831, 853, 856, 912, 914, 917, 918, 920, 992, 999, 1017, 1022, 1034, 1035, 1042, 1058, 1063, 1091, 1100, 1129, 1136, 1137, 1143, 1144, 1145, 1146, 1151, 1156, 1157, 1159, 1165, 1166, 1167, 1168, 1186, 1215, 1222, 1223], "support": [1, 39, 40, 45, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 119, 123, 124, 125, 129, 130, 133, 141, 146, 150, 199, 200, 201, 202, 206, 208, 213, 231, 232, 242, 243, 245, 251, 255, 293, 492, 543, 587, 589, 618, 737, 741, 747, 788, 789, 817, 818, 853, 856, 1056, 1129, 1160, 1197, 1215, 1222], "target": [1, 38, 39, 40, 83, 119, 293, 600, 629, 630, 631, 856, 1142, 1171, 1172, 1173], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 39, 40, 43, 45, 49, 57, 58, 59, 63, 64, 68, 69, 78, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 159, 161, 165, 166, 167, 169, 173, 174, 175, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 195, 197, 198, 199, 201, 202, 203, 205, 206, 208, 210, 211, 212, 213, 215, 216, 218, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 235, 236, 239, 240, 242, 244, 245, 248, 249, 251, 254, 255, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 274, 275, 279, 292, 293, 303, 306, 307, 308, 317, 324, 331, 332, 334, 335, 338, 344, 350, 351, 352, 353, 354, 355, 356, 362, 363, 375, 383, 384, 387, 390, 391, 394, 397, 405, 408, 412, 418, 434, 437, 438, 439, 442, 444, 446, 449, 454, 458, 466, 469, 471, 472, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 493, 495, 499, 500, 501, 504, 505, 507, 508, 509, 511, 515, 516, 517, 518, 519, 520, 530, 532, 533, 534, 535, 536, 537, 539, 543, 549, 551, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 576, 578, 579, 580, 581, 582, 587, 588, 589, 594, 600, 607, 608, 609, 610, 611, 612, 613, 616, 617, 623, 624, 625, 626, 627, 628, 632, 637, 641, 644, 645, 649, 651, 652, 653, 654, 658, 662, 663, 671, 674, 676, 680, 682, 683, 685, 693, 694, 696, 702, 704, 706, 717, 720, 728, 731, 737, 741, 753, 754, 756, 757, 758, 759, 762, 763, 764, 768, 770, 772, 777, 779, 780, 781, 782, 783, 784, 786, 788, 789, 793, 794, 798, 799, 803, 805, 806, 808, 810, 811, 812, 814, 815, 816, 817, 818, 822, 823, 824, 826, 829, 830, 831, 832, 833, 836, 837, 841, 852, 853, 856, 862, 863, 872, 879, 885, 888, 890, 891, 892, 897, 900, 908, 909, 910, 911, 912, 913, 920, 921, 922, 933, 945, 946, 949, 952, 953, 956, 959, 967, 970, 974, 979, 980, 989, 991, 993, 998, 1002, 1004, 1005, 1007, 1008, 1014, 1016, 1018, 1019, 1021, 1030, 1033, 1035, 1036, 1041, 1042, 1044, 1045, 1050, 1051, 1052, 1053, 1054, 1055, 1057, 1059, 1061, 1064, 1065, 1069, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1081, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1101, 1102, 1104, 1107, 1108, 1109, 1112, 1113, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1129, 1130, 1132, 1136, 1142, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1158, 1159, 1165, 1166, 1167, 1168, 1173, 1174, 1179, 1180, 1184, 1185, 1187, 1188, 1191, 1193, 1195, 1196, 1197, 1199, 1200, 1202, 1203, 1204, 1205, 1215, 1222, 1223], "featur": [1, 45, 49, 83, 293], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 57, 58, 59, 63, 68, 69, 78, 83, 84, 85, 86, 88, 90, 92, 93, 95, 99, 101, 103, 104, 105, 106, 107, 108, 109, 112, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 154, 156, 159, 162, 165, 167, 169, 172, 176, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 208, 211, 212, 216, 218, 219, 220, 227, 229, 230, 231, 232, 233, 236, 239, 242, 243, 244, 245, 247, 249, 254, 255, 258, 259, 260, 262, 263, 264, 265, 269, 271, 275, 279, 292, 293, 300, 303, 305, 306, 307, 308, 318, 332, 355, 356, 360, 361, 362, 364, 374, 387, 391, 394, 405, 413, 414, 415, 418, 422, 434, 437, 439, 455, 461, 470, 471, 474, 475, 486, 491, 492, 497, 499, 504, 509, 510, 511, 515, 518, 519, 520, 543, 551, 554, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 579, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 600, 601, 602, 604, 605, 609, 611, 612, 613, 614, 617, 618, 621, 623, 624, 625, 626, 629, 630, 631, 634, 637, 654, 655, 658, 660, 663, 668, 671, 673, 674, 675, 676, 677, 680, 681, 685, 686, 688, 689, 694, 703, 706, 717, 718, 719, 720, 722, 728, 729, 730, 731, 737, 741, 756, 758, 762, 763, 764, 768, 770, 772, 775, 777, 779, 780, 781, 782, 783, 784, 787, 788, 789, 791, 793, 794, 798, 799, 803, 808, 811, 812, 814, 816, 817, 818, 819, 823, 824, 826, 827, 830, 833, 836, 837, 841, 853, 856, 860, 861, 862, 863, 889, 892, 897, 900, 912, 913, 914, 917, 918, 920, 922, 932, 949, 953, 956, 967, 974, 975, 976, 977, 979, 980, 984, 990, 991, 992, 993, 998, 1000, 1007, 1014, 1015, 1016, 1018, 1019, 1020, 1022, 1025, 1034, 1035, 1038, 1039, 1050, 1055, 1056, 1061, 1063, 1071, 1089, 1091, 1093, 1095, 1098, 1100, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1132, 1134, 1135, 1136, 1137, 1142, 1143, 1144, 1146, 1147, 1151, 1153, 1154, 1155, 1156, 1159, 1160, 1163, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1179, 1186, 1191, 1196, 1197, 1203, 1204, 1205, 1215, 1222, 1223], "primarili": 1, "intend": [1, 137, 138, 139, 140, 637, 1179], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 57, 59, 63, 64, 65, 66, 68, 69, 78, 85, 86, 87, 88, 104, 106, 107, 109, 111, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 153, 154, 157, 163, 165, 170, 171, 172, 175, 182, 183, 184, 185, 186, 187, 195, 197, 199, 200, 202, 205, 206, 208, 211, 213, 215, 216, 218, 219, 220, 229, 230, 231, 232, 233, 235, 236, 240, 243, 244, 245, 251, 252, 253, 254, 255, 259, 260, 262, 263, 264, 265, 268, 269, 272, 279, 293, 301, 303, 305, 307, 308, 318, 327, 328, 335, 339, 340, 355, 360, 361, 369, 373, 377, 379, 381, 386, 390, 391, 393, 394, 397, 405, 408, 410, 413, 414, 415, 416, 421, 422, 438, 439, 455, 471, 486, 499, 509, 510, 511, 514, 543, 551, 554, 556, 558, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 578, 580, 581, 586, 588, 589, 591, 593, 596, 597, 598, 600, 601, 603, 605, 606, 614, 618, 620, 622, 625, 626, 627, 628, 629, 630, 631, 634, 637, 655, 658, 659, 660, 661, 663, 669, 672, 673, 675, 676, 678, 679, 682, 683, 685, 686, 687, 688, 689, 690, 694, 696, 703, 706, 707, 708, 711, 712, 714, 717, 718, 719, 720, 722, 723, 724, 725, 728, 729, 730, 732, 737, 740, 741, 752, 753, 756, 760, 763, 764, 767, 768, 772, 773, 774, 775, 777, 779, 780, 781, 783, 784, 785, 789, 791, 792, 798, 808, 810, 811, 815, 818, 819, 824, 826, 827, 829, 830, 834, 841, 853, 856, 860, 861, 862, 863, 881, 882, 890, 892, 898, 899, 912, 913, 917, 918, 927, 931, 938, 940, 943, 948, 952, 953, 955, 956, 959, 967, 970, 973, 975, 976, 977, 982, 983, 987, 990, 993, 996, 997, 998, 1004, 1007, 1014, 1016, 1018, 1020, 1035, 1050, 1063, 1070, 1071, 1089, 1091, 1093, 1095, 1098, 1100, 1112, 1113, 1116, 1118, 1121, 1122, 1128, 1132, 1135, 1138, 1139, 1142, 1143, 1145, 1147, 1148, 1156, 1160, 1162, 1171, 1172, 1173, 1176, 1179, 1187, 1192, 1194, 1195, 1196, 1197, 1204, 1205, 1215, 1222, 1223], "librari": [1, 96, 116, 119, 509, 741, 1223], "author": 1, "domain": [1, 601, 1143], "specif": [1, 35, 39, 40, 103, 105, 107, 109, 114, 117, 118, 119, 123, 124, 125, 129, 143, 144, 157, 199, 293, 394, 397, 629, 630, 631, 634, 760, 853, 856, 956, 959, 1171, 1172, 1173, 1176, 1215, 1223], "capabl": [1, 40, 293], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 69, 78, 79, 80, 81, 82, 106, 114, 115, 116, 117, 118, 119, 128, 129, 130, 137, 138, 145, 147, 156, 157, 165, 169, 170, 182, 183, 184, 185, 186, 187, 193, 202, 229, 254, 258, 260, 264, 293, 303, 332, 387, 391, 394, 405, 419, 439, 441, 445, 448, 450, 451, 452, 499, 511, 520, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 613, 685, 686, 688, 689, 690, 728, 729, 731, 741, 758, 760, 768, 770, 780, 781, 783, 784, 789, 808, 812, 823, 824, 833, 853, 862, 949, 953, 956, 967, 980, 981, 997, 1001, 1006, 1010, 1011, 1012, 1013, 1063, 1098, 1116, 1155, 1196, 1215, 1223], "mai": [1, 39, 49, 59, 85, 86, 103, 105, 106, 107, 109, 114, 116, 118, 120, 123, 124, 129, 130, 131, 132, 134, 137, 139, 167, 169, 183, 202, 205, 229, 240, 255, 262, 263, 264, 293, 307, 355, 362, 363, 375, 387, 391, 405, 416, 474, 497, 499, 509, 511, 519, 562, 565, 566, 567, 568, 569, 571, 572, 573, 580, 605, 676, 677, 680, 681, 685, 686, 688, 689, 694, 716, 728, 729, 741, 763, 764, 772, 780, 789, 793, 794, 808, 815, 826, 832, 836, 841, 853, 862, 891, 892, 912, 920, 921, 933, 949, 953, 967, 974, 980, 993, 1038, 1071, 1089, 1121, 1147, 1173, 1196, 1215, 1223], "exist": [1, 38, 39, 40, 78, 118, 129, 144, 259, 263, 268, 269, 293, 302, 326, 329, 330, 364, 741, 806, 826, 829, 830, 853, 856, 922], "belong": [1, 183, 293, 780, 853], "core": [1, 255, 293, 1223], "cannot": [1, 114, 115, 119, 120, 125, 148, 205, 232, 233, 279, 293, 327, 416, 486, 510, 511, 576, 596, 620, 639, 706, 741, 816, 841, 853, 881, 1050, 1071, 1112, 1138, 1162, 1215], "overrid": [1, 40, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 123, 124, 125, 141, 142, 146, 148, 293, 510, 741, 853, 1070, 1215], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 57, 58, 59, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 103, 104, 105, 106, 107, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 141, 142, 144, 145, 146, 147, 150, 156, 157, 160, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 178, 179, 181, 182, 183, 184, 186, 187, 189, 191, 195, 197, 198, 199, 201, 202, 206, 208, 210, 211, 212, 213, 216, 218, 220, 222, 224, 225, 227, 228, 229, 230, 231, 233, 237, 240, 242, 243, 244, 245, 247, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 300, 301, 302, 326, 328, 329, 330, 334, 356, 359, 365, 387, 390, 391, 394, 397, 405, 416, 418, 422, 424, 428, 429, 432, 437, 439, 464, 465, 475, 476, 478, 492, 496, 499, 508, 510, 511, 519, 521, 522, 524, 531, 532, 533, 534, 535, 540, 543, 547, 549, 551, 557, 559, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 588, 589, 638, 639, 641, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 669, 672, 674, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 737, 741, 748, 758, 760, 763, 764, 765, 766, 767, 768, 770, 771, 772, 775, 777, 779, 780, 781, 783, 784, 786, 788, 789, 798, 799, 803, 805, 806, 807, 808, 812, 813, 815, 816, 817, 818, 823, 824, 825, 826, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 886, 888, 913, 914, 923, 949, 952, 953, 956, 959, 967, 979, 983, 1029, 1030, 1031, 1042, 1063, 1070, 1080, 1081, 1089, 1094, 1113, 1116, 1117, 1180, 1182, 1192, 1193, 1194, 1203, 1215, 1219, 1222, 1223], "dt": [1, 78, 119, 125, 229, 293, 562, 690, 741, 750, 808, 853, 856, 1221], "attempt": [1, 254, 293], "do": [1, 40, 57, 58, 59, 78, 84, 85, 86, 114, 128, 137, 138, 139, 140, 169, 183, 184, 186, 187, 202, 220, 229, 249, 259, 262, 293, 355, 471, 543, 562, 624, 625, 626, 714, 717, 732, 741, 763, 764, 770, 780, 781, 783, 784, 789, 793, 794, 803, 808, 816, 853, 856, 862, 912, 980, 1035, 1166, 1167, 1168, 1205, 1215], "so": [1, 116, 117, 128, 148, 181, 183, 184, 186, 187, 220, 229, 293, 318, 332, 439, 475, 499, 511, 562, 624, 625, 626, 741, 780, 781, 783, 784, 808, 853, 1039, 1166, 1167, 1168], "rais": [1, 20, 21, 25, 39, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 119, 125, 128, 137, 139, 152, 220, 230, 293, 327, 390, 391, 405, 474, 497, 519, 551, 593, 596, 613, 629, 630, 631, 634, 687, 703, 741, 881, 952, 953, 967, 1038, 1061, 1089, 1135, 1138, 1155, 1171, 1172, 1173, 1176, 1196, 1205, 1215], "an": [1, 35, 37, 38, 39, 40, 49, 57, 58, 79, 81, 82, 84, 85, 88, 93, 94, 96, 103, 114, 115, 116, 117, 118, 119, 121, 125, 126, 128, 130, 131, 142, 144, 146, 157, 158, 159, 167, 170, 175, 183, 184, 186, 187, 199, 200, 202, 205, 216, 220, 226, 227, 229, 230, 249, 254, 259, 262, 263, 268, 279, 293, 302, 323, 327, 333, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 364, 365, 387, 390, 394, 408, 419, 421, 422, 428, 429, 432, 454, 466, 467, 471, 474, 475, 497, 498, 499, 508, 509, 511, 520, 530, 531, 550, 551, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 593, 596, 601, 629, 630, 631, 634, 644, 650, 658, 664, 668, 685, 686, 688, 689, 691, 696, 700, 701, 703, 714, 716, 717, 720, 723, 728, 729, 731, 732, 737, 741, 753, 760, 761, 762, 763, 764, 770, 772, 775, 780, 781, 783, 784, 789, 794, 803, 808, 816, 826, 829, 831, 841, 853, 856, 878, 881, 886, 896, 898, 899, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 922, 956, 970, 974, 981, 1007, 1019, 1030, 1031, 1035, 1038, 1039, 1061, 1062, 1071, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1113, 1116, 1135, 1138, 1143, 1171, 1172, 1173, 1176, 1196, 1205, 1215, 1222], "attributeerror": 1, "howev": [1, 106, 116, 167, 205, 254, 293, 974, 1215], "can": [1, 19, 32, 39, 40, 45, 48, 68, 69, 78, 87, 88, 94, 104, 106, 114, 115, 116, 119, 120, 125, 126, 128, 131, 133, 134, 142, 143, 144, 146, 148, 150, 156, 158, 165, 166, 175, 182, 183, 184, 185, 186, 187, 195, 197, 205, 216, 220, 229, 232, 235, 243, 254, 258, 259, 262, 268, 279, 293, 303, 307, 346, 349, 355, 383, 384, 387, 390, 405, 419, 439, 454, 471, 499, 511, 519, 527, 530, 532, 533, 534, 535, 543, 549, 551, 556, 562, 565, 566, 567, 568, 569, 571, 572, 573, 578, 581, 583, 586, 589, 604, 624, 625, 626, 629, 641, 667, 694, 696, 706, 731, 737, 740, 741, 752, 758, 763, 768, 770, 772, 780, 781, 783, 784, 808, 810, 812, 818, 823, 829, 832, 853, 856, 863, 892, 912, 913, 945, 946, 949, 952, 953, 967, 981, 997, 1035, 1063, 1071, 1076, 1089, 1093, 1113, 1116, 1118, 1122, 1125, 1128, 1136, 1137, 1144, 1146, 1166, 1167, 1168, 1171, 1173, 1196, 1215, 1222], "other": [1, 25, 39, 40, 45, 68, 85, 114, 115, 116, 128, 137, 138, 139, 140, 165, 169, 176, 201, 202, 211, 212, 230, 232, 235, 236, 263, 266, 268, 269, 291, 293, 300, 304, 306, 318, 338, 359, 411, 412, 426, 431, 433, 439, 444, 457, 464, 469, 477, 487, 488, 489, 490, 495, 500, 506, 510, 515, 518, 526, 528, 538, 539, 542, 589, 640, 648, 650, 657, 659, 661, 670, 671, 672, 679, 683, 685, 708, 712, 720, 723, 725, 741, 753, 764, 768, 788, 789, 798, 799, 810, 811, 826, 829, 830, 831, 853, 856, 862, 897, 916, 980, 1005, 1028, 1033, 1041, 1051, 1052, 1053, 1054, 1059, 1064, 1115, 1198, 1206, 1214, 1215], "onli": [1, 15, 18, 25, 35, 37, 40, 57, 63, 65, 69, 78, 83, 86, 88, 114, 115, 118, 120, 122, 126, 128, 129, 131, 132, 133, 134, 144, 146, 150, 153, 165, 169, 183, 186, 188, 199, 201, 202, 205, 206, 208, 213, 220, 229, 231, 232, 245, 251, 253, 254, 263, 264, 279, 293, 301, 303, 305, 307, 318, 332, 337, 338, 387, 395, 416, 425, 434, 454, 511, 530, 532, 533, 534, 535, 543, 549, 556, 565, 566, 567, 568, 569, 571, 572, 573, 641, 652, 685, 686, 706, 741, 763, 768, 780, 781, 783, 784, 785, 788, 789, 792, 808, 826, 841, 853, 860, 861, 862, 894, 897, 913, 949, 980, 986, 991, 1007, 1071, 1089, 1093, 1191, 1194, 1215, 1222, 1223], "gener": [1, 116, 117, 135, 141, 142, 143, 144, 146, 152, 161, 220, 233, 252, 254, 259, 293, 486, 576, 582, 664, 685, 688, 700, 701, 717, 728, 729, 741, 853, 1050, 1112, 1124, 1192, 1215, 1223], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 754, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1024, 1025, 1032, 1034, 1035, 1036, 1040, 1042, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1160, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1215, 1222, 1223], "register_expr_namespac": [1, 79, 81, 82], "greet": 1, "def": [1, 69, 79, 80, 81, 82, 142, 143, 144, 146, 150, 219, 259, 293, 300, 547, 601, 626, 657, 705, 741, 764, 802, 853, 856, 1143, 1223], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 141, 1222], "self": [1, 64, 65, 66, 68, 79, 80, 81, 82, 84, 85, 158, 159, 162, 169, 189, 191, 192, 193, 204, 206, 208, 210, 211, 213, 217, 218, 220, 222, 223, 225, 226, 227, 233, 241, 242, 244, 245, 247, 252, 259, 261, 264, 265, 266, 270, 271, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 325, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 737, 741, 756, 757, 758, 759, 760, 762, 763, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 853, 862, 863, 886, 900, 980, 984, 994, 1069, 1070, 1071, 1082, 1086, 1087, 1092, 1113, 1116, 1118, 1130, 1202, 1206, 1215], "_expr": [1, 80], "hello": [1, 25, 64, 67, 624, 625, 626, 1042, 1166, 1167, 1168], "return": [1, 10, 11, 35, 37, 40, 41, 42, 43, 44, 57, 58, 59, 63, 67, 69, 78, 79, 80, 81, 82, 83, 84, 85, 95, 97, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 143, 153, 156, 158, 161, 164, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 181, 182, 183, 185, 186, 189, 191, 198, 199, 200, 201, 203, 204, 205, 207, 209, 214, 215, 216, 218, 219, 220, 229, 230, 231, 232, 233, 246, 247, 248, 254, 255, 258, 259, 260, 264, 268, 269, 277, 279, 282, 287, 293, 303, 305, 309, 310, 311, 312, 313, 314, 317, 318, 323, 326, 328, 329, 330, 331, 341, 342, 343, 344, 356, 357, 362, 366, 367, 368, 370, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 391, 392, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 418, 429, 430, 432, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 458, 459, 462, 463, 465, 472, 474, 475, 476, 478, 480, 481, 486, 496, 497, 498, 505, 510, 520, 522, 527, 547, 551, 553, 557, 558, 560, 576, 577, 583, 584, 585, 592, 594, 595, 597, 599, 600, 601, 602, 604, 605, 606, 607, 608, 610, 611, 612, 616, 618, 619, 620, 621, 637, 643, 645, 646, 647, 649, 650, 652, 653, 654, 657, 658, 662, 664, 665, 666, 667, 668, 684, 685, 686, 687, 688, 689, 690, 696, 698, 700, 701, 703, 704, 705, 706, 714, 717, 720, 723, 726, 727, 728, 729, 731, 732, 741, 758, 761, 763, 764, 769, 770, 772, 778, 780, 781, 783, 784, 785, 791, 792, 794, 802, 803, 808, 812, 816, 821, 822, 823, 824, 829, 830, 833, 839, 844, 849, 853, 860, 861, 862, 870, 871, 873, 874, 878, 880, 882, 885, 889, 892, 896, 913, 914, 920, 924, 925, 926, 928, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 953, 954, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 974, 979, 980, 988, 990, 992, 993, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1021, 1022, 1026, 1027, 1029, 1036, 1038, 1039, 1040, 1042, 1044, 1045, 1050, 1060, 1061, 1062, 1069, 1070, 1071, 1076, 1083, 1089, 1095, 1096, 1097, 1098, 1112, 1114, 1115, 1125, 1134, 1135, 1136, 1137, 1139, 1141, 1142, 1143, 1144, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1158, 1160, 1161, 1162, 1163, 1179, 1186, 1188, 1199, 1201, 1202, 1203, 1206, 1215, 1222, 1223], "lit": [1, 302, 326, 439, 454, 530, 676, 680, 694, 714, 717, 731, 732, 741, 983, 1215], "alia": [1, 17, 78, 80, 82, 183, 204, 220, 229, 261, 268, 293, 300, 304, 326, 328, 329, 330, 331, 345, 346, 347, 348, 349, 356, 358, 362, 363, 364, 365, 368, 370, 371, 372, 375, 376, 380, 382, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 411, 412, 424, 426, 431, 433, 437, 439, 443, 447, 454, 457, 458, 459, 506, 510, 511, 515, 516, 517, 518, 520, 523, 526, 528, 530, 538, 539, 542, 544, 548, 551, 554, 556, 575, 577, 593, 595, 598, 600, 601, 605, 606, 618, 619, 620, 621, 622, 627, 628, 638, 639, 640, 648, 649, 650, 656, 657, 664, 665, 666, 669, 670, 671, 672, 685, 690, 691, 694, 695, 705, 706, 716, 717, 723, 728, 731, 741, 780, 786, 792, 808, 825, 829, 853, 913, 921, 923, 929, 949, 952, 956, 958, 1022, 1035, 1070, 1089, 1094, 1142, 1143, 1162, 1163, 1215], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 64, 67, 624, 625, 626, 635, 1042, 1166, 1167, 1168, 1177], "select": [1, 13, 38, 63, 64, 65, 78, 79, 80, 81, 113, 114, 115, 116, 117, 118, 120, 122, 126, 128, 134, 143, 198, 202, 205, 216, 219, 230, 236, 242, 256, 261, 264, 293, 299, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 334, 336, 337, 341, 342, 343, 344, 355, 357, 358, 359, 360, 361, 363, 364, 365, 374, 375, 376, 383, 384, 387, 390, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 413, 414, 415, 416, 417, 418, 419, 423, 425, 427, 430, 434, 436, 437, 438, 440, 441, 445, 453, 454, 455, 456, 458, 471, 472, 499, 502, 503, 504, 505, 509, 511, 512, 513, 514, 525, 527, 529, 530, 536, 537, 540, 541, 542, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 564, 570, 574, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 599, 600, 601, 602, 629, 638, 639, 642, 646, 647, 649, 651, 652, 653, 654, 655, 658, 660, 663, 665, 666, 667, 668, 669, 671, 673, 674, 675, 678, 690, 692, 693, 694, 695, 696, 698, 702, 707, 709, 710, 711, 713, 716, 717, 721, 722, 723, 724, 726, 730, 737, 741, 765, 789, 802, 811, 812, 817, 825, 831, 853, 856, 877, 879, 952, 987, 1024, 1025, 1035, 1113, 1116, 1129, 1146, 1171, 1187, 1215, 1222], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 60, 63, 64, 65, 67, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 100, 103, 104, 105, 106, 107, 108, 109, 110, 128, 134, 144, 146, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 177, 178, 180, 182, 183, 188, 189, 191, 193, 194, 195, 197, 198, 201, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 233, 235, 239, 242, 243, 244, 245, 246, 247, 250, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 756, 758, 760, 761, 763, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 787, 788, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 810, 812, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 890, 891, 893, 894, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 999, 1001, 1003, 1005, 1006, 1009, 1010, 1011, 1012, 1013, 1017, 1019, 1024, 1025, 1032, 1034, 1035, 1036, 1040, 1042, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1069, 1070, 1071, 1076, 1083, 1085, 1086, 1087, 1089, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1134, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1160, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1184, 1186, 1189, 1190, 1192, 1193, 1194, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1215, 1222], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 117, 119, 125, 128, 134, 136, 137, 138, 139, 140, 143, 144, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 300, 301, 302, 303, 305, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 344, 345, 346, 347, 348, 349, 355, 356, 358, 359, 360, 361, 363, 364, 365, 371, 372, 374, 375, 380, 382, 387, 389, 390, 391, 392, 394, 396, 397, 398, 405, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 453, 454, 455, 457, 458, 459, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 502, 503, 504, 505, 506, 508, 510, 511, 526, 527, 528, 530, 531, 532, 533, 534, 535, 538, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586, 588, 589, 590, 593, 594, 597, 598, 600, 601, 602, 603, 605, 606, 609, 614, 617, 618, 619, 620, 621, 622, 623, 630, 634, 638, 639, 640, 641, 643, 649, 652, 653, 654, 656, 657, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 890, 891, 893, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 921, 922, 923, 926, 929, 930, 932, 934, 935, 936, 941, 942, 944, 950, 952, 953, 954, 956, 958, 959, 960, 962, 963, 965, 967, 969, 970, 974, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1020, 1021, 1030, 1032, 1034, 1035, 1036, 1040, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1136, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1148, 1151, 1156, 1159, 1160, 1164, 1165, 1172, 1176, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1215, 1222, 1223], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 59, 60, 63, 64, 65, 66, 67, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 118, 119, 120, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 144, 146, 152, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 462, 463, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 598, 599, 600, 601, 602, 603, 604, 605, 606, 614, 615, 620, 621, 622, 624, 625, 626, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 737, 741, 756, 758, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 786, 787, 788, 789, 790, 792, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 814, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 890, 891, 893, 894, 895, 897, 900, 901, 902, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1019, 1021, 1024, 1025, 1032, 1034, 1035, 1036, 1039, 1040, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1085, 1086, 1087, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1115, 1116, 1118, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1142, 1144, 1145, 1146, 1147, 1148, 1156, 1162, 1163, 1179, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1215, 1222, 1223], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 117, 128, 134, 135, 136, 137, 138, 139, 140, 143, 144, 146, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 304, 306, 308, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 333, 335, 336, 337, 338, 343, 344, 345, 346, 347, 348, 349, 355, 356, 358, 359, 362, 364, 365, 368, 370, 372, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 522, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586, 587, 588, 589, 590, 592, 595, 597, 598, 600, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 640, 641, 643, 646, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 709, 710, 711, 713, 716, 720, 721, 722, 723, 724, 726, 729, 730, 731, 737, 741, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 786, 788, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 865, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 890, 891, 893, 894, 895, 896, 900, 901, 903, 905, 906, 907, 912, 913, 914, 915, 916, 920, 922, 924, 925, 928, 930, 934, 935, 936, 941, 942, 944, 945, 946, 951, 952, 953, 957, 967, 969, 970, 971, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 999, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1021, 1032, 1034, 1035, 1036, 1040, 1042, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1066, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1085, 1086, 1087, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1134, 1137, 1142, 1144, 1145, 1146, 1148, 1156, 1157, 1162, 1163, 1166, 1167, 1168, 1171, 1173, 1174, 1175, 1177, 1178, 1184, 1185, 1186, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1215, 1222, 1223], "column_0": [1, 205, 259, 293], "register_dataframe_namespac": [1, 80, 81, 82], "split": [1, 40, 79, 200, 293, 620, 621, 1162, 1163], "splitfram": [1, 79], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 60, 63, 64, 79, 80, 103, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 128, 142, 144, 150, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 686, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 737, 741, 780, 808, 812, 825, 826, 839, 841, 849, 853, 856, 877, 879, 890, 952, 1024, 1025, 1035, 1146, 1157, 1162, 1163, 1193, 1215, 1223], "_df": [1, 79], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 63, 67, 78, 79, 81, 84, 85, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 142, 143, 144, 146, 160, 163, 166, 167, 168, 172, 180, 182, 183, 191, 199, 215, 218, 230, 231, 232, 235, 243, 250, 251, 259, 260, 261, 262, 268, 272, 273, 293, 301, 323, 324, 356, 418, 424, 429, 436, 444, 507, 509, 511, 520, 521, 543, 551, 557, 558, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 588, 589, 601, 619, 638, 639, 644, 648, 667, 671, 686, 689, 691, 699, 701, 703, 706, 721, 723, 729, 741, 765, 769, 771, 775, 779, 780, 810, 818, 824, 825, 829, 831, 834, 835, 853, 856, 878, 879, 895, 913, 974, 979, 984, 987, 989, 993, 994, 1005, 1089, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1114, 1143, 1161, 1187, 1195, 1198, 1215, 1223], "with_row_count": [1, 293, 510, 565, 566, 568, 571, 572, 573, 741, 853, 1113, 1215], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 57, 64, 65, 66, 67, 68, 79, 80, 81, 82, 86, 92, 103, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 156, 157, 160, 163, 164, 165, 168, 172, 173, 174, 178, 179, 181, 182, 185, 198, 199, 201, 202, 205, 207, 209, 211, 212, 214, 218, 220, 224, 230, 231, 232, 234, 235, 236, 243, 246, 250, 252, 254, 257, 258, 259, 260, 261, 262, 263, 268, 269, 270, 271, 272, 293, 302, 307, 326, 328, 329, 330, 356, 416, 439, 448, 450, 451, 452, 454, 499, 508, 511, 519, 521, 523, 543, 549, 551, 559, 589, 601, 602, 638, 639, 641, 658, 659, 660, 661, 663, 665, 666, 667, 670, 671, 672, 673, 675, 678, 679, 682, 683, 685, 692, 698, 699, 707, 708, 711, 712, 715, 717, 718, 719, 720, 723, 724, 725, 726, 728, 731, 737, 741, 758, 760, 765, 767, 768, 771, 775, 779, 782, 788, 789, 798, 799, 806, 809, 810, 811, 812, 818, 823, 824, 825, 826, 829, 830, 831, 832, 834, 853, 856, 859, 896, 913, 1063, 1089, 1094, 1142, 1143, 1144, 1156, 1180, 1182, 1192, 1193, 1197, 1215, 1222, 1223], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 57, 65, 66, 79, 80, 81, 82, 112, 114, 115, 128, 153, 158, 169, 177, 183, 189, 199, 200, 204, 205, 231, 232, 233, 239, 240, 244, 247, 248, 251, 253, 265, 277, 287, 293, 331, 355, 358, 363, 364, 371, 396, 408, 419, 430, 435, 459, 468, 476, 486, 487, 491, 496, 499, 544, 547, 557, 571, 573, 576, 579, 580, 586, 591, 605, 606, 614, 620, 621, 624, 625, 631, 643, 645, 649, 650, 655, 657, 673, 675, 685, 686, 687, 688, 689, 690, 696, 698, 714, 717, 718, 719, 722, 726, 730, 732, 741, 761, 763, 778, 780, 785, 792, 814, 815, 819, 821, 822, 827, 839, 849, 853, 856, 862, 885, 896, 912, 915, 921, 922, 929, 958, 970, 980, 981, 988, 992, 1022, 1032, 1040, 1050, 1051, 1055, 1060, 1063, 1085, 1107, 1109, 1112, 1120, 1121, 1128, 1132, 1147, 1148, 1156, 1162, 1163, 1173, 1186, 1188, 1194, 1199, 1204, 1215, 1222, 1223], "filter": [1, 79, 118, 128, 129, 134, 165, 195, 196, 197, 220, 279, 293, 519, 521, 598, 622, 656, 694, 731, 741, 768, 772, 786, 841, 853, 856, 1116, 1215], "col": [1, 17, 37, 40, 57, 78, 79, 80, 81, 107, 109, 128, 142, 144, 172, 182, 183, 196, 198, 203, 205, 216, 219, 220, 229, 230, 235, 243, 261, 262, 268, 272, 293, 299, 300, 301, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 437, 438, 439, 440, 443, 444, 447, 448, 450, 453, 454, 455, 456, 457, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 635, 636, 637, 638, 639, 640, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 668, 670, 671, 672, 678, 690, 693, 694, 695, 696, 697, 702, 707, 711, 715, 716, 724, 731, 741, 762, 775, 779, 780, 786, 791, 802, 808, 810, 818, 825, 829, 831, 834, 853, 856, 877, 879, 890, 949, 952, 1024, 1025, 1035, 1095, 1113, 1116, 1146, 1171, 1215, 1223], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 59, 60, 63, 68, 78, 79, 80, 82, 86, 88, 104, 114, 115, 116, 117, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 136, 141, 142, 143, 144, 146, 152, 153, 155, 157, 158, 159, 161, 162, 163, 166, 170, 171, 173, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 220, 221, 222, 226, 227, 231, 232, 233, 234, 235, 240, 242, 243, 244, 245, 246, 248, 252, 253, 254, 255, 256, 259, 262, 264, 265, 268, 270, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 293, 299, 301, 302, 304, 307, 309, 310, 311, 312, 313, 314, 317, 318, 319, 332, 333, 336, 337, 339, 340, 341, 342, 343, 345, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 369, 372, 373, 376, 377, 379, 380, 381, 386, 390, 392, 393, 400, 401, 403, 404, 405, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 425, 426, 431, 433, 434, 438, 441, 442, 445, 446, 448, 449, 450, 451, 452, 454, 455, 457, 462, 463, 466, 467, 469, 471, 474, 475, 477, 481, 483, 495, 499, 500, 502, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 520, 525, 526, 528, 530, 536, 537, 538, 539, 541, 542, 544, 547, 548, 549, 551, 552, 553, 554, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 583, 584, 585, 586, 590, 591, 594, 595, 600, 601, 607, 608, 609, 610, 613, 616, 617, 623, 629, 631, 640, 641, 642, 644, 645, 646, 647, 648, 650, 655, 656, 658, 662, 664, 665, 666, 667, 668, 669, 670, 671, 673, 675, 676, 680, 682, 683, 685, 687, 691, 694, 700, 701, 704, 706, 709, 710, 714, 715, 716, 717, 721, 727, 728, 729, 730, 731, 732, 737, 741, 757, 760, 761, 762, 767, 769, 773, 774, 777, 779, 780, 781, 782, 783, 784, 787, 788, 791, 793, 794, 797, 801, 803, 804, 805, 809, 810, 815, 816, 818, 819, 822, 827, 829, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 874, 886, 891, 893, 894, 896, 898, 899, 901, 902, 903, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 927, 930, 931, 935, 936, 937, 938, 939, 940, 942, 943, 947, 948, 952, 953, 954, 955, 962, 963, 965, 966, 967, 973, 975, 976, 977, 982, 986, 991, 993, 996, 998, 1001, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1019, 1020, 1030, 1033, 1035, 1039, 1041, 1045, 1059, 1061, 1063, 1064, 1069, 1073, 1074, 1085, 1089, 1090, 1091, 1098, 1099, 1100, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1117, 1121, 1125, 1126, 1127, 1131, 1132, 1136, 1137, 1142, 1143, 1146, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1171, 1173, 1187, 1188, 1189, 1190, 1192, 1197, 1198, 1202, 1204, 1205, 1215, 1223], "drop": [1, 106, 164, 165, 205, 260, 268, 293, 358, 360, 361, 468, 470, 551, 741, 768, 824, 829, 853, 915, 917, 918, 1032, 1034, 1089, 1215], "aaa": [1, 40, 293, 593, 638, 639, 1135], "bbb": [1, 40, 293, 638, 639, 856], "ccc": [1, 40, 293, 638, 639], "ddd": [1, 40, 293, 638, 639], "eee": [1, 40, 293, 856], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 69, 78, 79, 86, 88, 90, 92, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 144, 156, 157, 161, 163, 164, 165, 166, 168, 172, 173, 174, 178, 179, 181, 182, 183, 184, 185, 186, 187, 191, 192, 193, 198, 199, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 243, 244, 245, 246, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 272, 293, 302, 303, 305, 317, 323, 338, 344, 356, 364, 366, 367, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 392, 394, 395, 397, 406, 407, 409, 416, 418, 422, 424, 439, 454, 458, 464, 472, 474, 493, 497, 498, 499, 510, 511, 517, 519, 521, 530, 532, 533, 534, 535, 543, 549, 551, 555, 557, 558, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 588, 589, 592, 599, 620, 621, 629, 630, 631, 632, 634, 641, 656, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 758, 760, 767, 768, 769, 771, 775, 779, 780, 781, 782, 783, 784, 788, 789, 794, 795, 796, 797, 798, 800, 801, 802, 804, 806, 808, 809, 810, 811, 812, 813, 818, 819, 820, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 841, 853, 856, 860, 861, 878, 889, 891, 897, 913, 924, 925, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 956, 957, 959, 968, 969, 971, 979, 990, 1028, 1036, 1038, 1057, 1062, 1089, 1095, 1122, 1134, 1141, 1162, 1163, 1171, 1172, 1173, 1174, 1176, 1184, 1192, 1193, 1215, 1223], "txt": [1, 17, 128], "utf8": [1, 25, 39, 106, 114, 115, 128, 141, 143, 146, 157, 166, 167, 168, 175, 234, 254, 293, 328, 394, 397, 478, 510, 592, 597, 599, 600, 601, 602, 604, 618, 619, 620, 621, 629, 630, 631, 632, 634, 637, 672, 741, 760, 769, 771, 809, 853, 856, 956, 959, 1018, 1042, 1134, 1139, 1141, 1142, 1143, 1144, 1146, 1160, 1161, 1162, 1163, 1171, 1172, 1173, 1174, 1176, 1179, 1215], "register_lazyframe_namespac": [1, 79, 80, 82], "dtypeoper": [1, 81], "ldf": [1, 81, 834, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848], "_ldf": [1, 81], "upcast_integer_typ": [1, 81], "with_column": [1, 17, 81, 183, 219, 229, 262, 269, 293, 300, 302, 318, 328, 333, 335, 338, 345, 346, 347, 348, 349, 356, 358, 362, 368, 370, 371, 372, 380, 382, 387, 388, 389, 390, 391, 392, 394, 396, 397, 406, 407, 411, 412, 420, 421, 426, 431, 433, 434, 438, 439, 443, 444, 447, 448, 450, 451, 452, 454, 457, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 506, 508, 510, 511, 526, 528, 530, 531, 532, 533, 534, 535, 538, 539, 543, 544, 547, 548, 549, 551, 554, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 575, 579, 593, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 632, 633, 635, 636, 637, 640, 641, 648, 650, 657, 659, 661, 670, 672, 676, 677, 679, 686, 691, 701, 705, 708, 712, 721, 725, 729, 731, 737, 741, 780, 786, 802, 808, 830, 853, 856, 890, 913, 952, 1035, 1089, 1215], "tp": [1, 81], "cast": [1, 39, 80, 81, 103, 137, 138, 139, 140, 175, 183, 184, 186, 187, 219, 229, 255, 268, 293, 306, 335, 348, 349, 363, 394, 397, 510, 542, 547, 556, 562, 603, 604, 637, 642, 648, 672, 721, 741, 780, 781, 783, 784, 802, 808, 829, 853, 856, 890, 892, 906, 907, 921, 956, 959, 1093, 1145, 1146, 1179, 1185, 1193, 1198, 1215], "int64": [1, 2, 39, 40, 43, 80, 81, 86, 114, 166, 175, 183, 184, 186, 187, 203, 219, 229, 234, 249, 255, 293, 320, 321, 322, 324, 348, 349, 398, 399, 400, 401, 402, 403, 404, 416, 547, 556, 562, 603, 642, 648, 664, 692, 700, 701, 703, 717, 723, 741, 762, 769, 780, 781, 783, 784, 786, 791, 802, 808, 809, 812, 853, 875, 876, 877, 879, 906, 907, 960, 961, 962, 963, 964, 965, 966, 1093, 1115, 1185, 1196, 1197, 1198, 1215], "int8": [1, 81, 175, 293, 323, 348, 349, 498, 642, 714, 717, 732, 741, 878, 906, 907, 915, 1062, 1070, 1096, 1185, 1202, 1215], "int16": [1, 81, 348, 349, 642, 741, 856, 906, 907, 1070, 1185, 1194, 1215], "int32": [1, 81, 86, 103, 106, 119, 143, 144, 183, 184, 186, 187, 200, 229, 293, 333, 375, 409, 562, 648, 717, 741, 780, 781, 783, 784, 808, 853, 856, 933, 971, 1069, 1198, 1215], "b": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 81, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 152, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181, 182, 183, 188, 189, 191, 193, 195, 197, 198, 199, 200, 201, 203, 206, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 235, 239, 242, 243, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 293, 300, 302, 303, 305, 306, 319, 325, 326, 328, 329, 330, 333, 335, 344, 356, 359, 416, 418, 420, 421, 422, 424, 427, 434, 436, 438, 439, 441, 445, 448, 450, 451, 452, 454, 458, 464, 471, 478, 487, 488, 489, 490, 508, 511, 516, 527, 530, 531, 532, 533, 540, 541, 543, 547, 549, 551, 554, 559, 561, 581, 587, 589, 599, 603, 614, 641, 652, 656, 658, 659, 660, 661, 663, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 691, 692, 693, 694, 695, 698, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 718, 719, 722, 723, 724, 725, 726, 730, 741, 756, 758, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 788, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 831, 832, 834, 835, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 859, 862, 889, 890, 891, 892, 913, 914, 916, 973, 974, 980, 983, 997, 1005, 1018, 1035, 1051, 1052, 1054, 1089, 1094, 1115, 1141, 1145, 1156, 1184, 1197, 1201, 1215, 1222], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 60, 63, 65, 66, 68, 70, 78, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 119, 128, 136, 146, 152, 154, 156, 157, 158, 159, 162, 165, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 220, 221, 225, 229, 231, 232, 238, 239, 243, 246, 247, 249, 250, 251, 252, 257, 258, 259, 261, 262, 263, 264, 266, 267, 268, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 304, 306, 319, 320, 321, 322, 323, 325, 331, 333, 336, 337, 338, 344, 345, 346, 347, 348, 349, 355, 357, 359, 364, 368, 388, 389, 390, 391, 394, 397, 399, 402, 404, 405, 407, 411, 412, 417, 418, 420, 421, 424, 425, 426, 427, 429, 430, 431, 432, 433, 435, 436, 437, 438, 439, 451, 452, 454, 457, 458, 459, 467, 468, 470, 471, 472, 474, 476, 486, 487, 488, 489, 490, 491, 492, 496, 498, 503, 506, 508, 510, 511, 526, 528, 530, 531, 532, 533, 534, 535, 538, 539, 542, 543, 545, 546, 547, 548, 549, 552, 554, 558, 559, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 583, 587, 588, 589, 590, 593, 595, 601, 605, 606, 611, 612, 614, 618, 619, 620, 621, 627, 628, 629, 637, 638, 639, 640, 641, 643, 648, 649, 650, 657, 659, 661, 663, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 689, 691, 693, 694, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 737, 741, 756, 758, 760, 761, 762, 763, 764, 768, 770, 771, 772, 773, 774, 776, 778, 779, 780, 785, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 808, 814, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 862, 865, 872, 875, 876, 877, 878, 885, 894, 895, 897, 912, 914, 916, 930, 937, 939, 942, 944, 945, 946, 947, 951, 952, 953, 956, 959, 961, 964, 966, 967, 968, 969, 980, 982, 983, 987, 988, 992, 993, 996, 997, 999, 1005, 1010, 1011, 1012, 1013, 1017, 1032, 1034, 1035, 1036, 1040, 1050, 1051, 1052, 1054, 1055, 1056, 1060, 1062, 1070, 1077, 1085, 1086, 1087, 1091, 1095, 1098, 1103, 1105, 1106, 1107, 1108, 1109, 1112, 1115, 1120, 1125, 1129, 1130, 1135, 1137, 1143, 1147, 1148, 1153, 1154, 1160, 1162, 1163, 1169, 1170, 1171, 1179, 1184, 1186, 1194, 1197, 1198, 1199, 1206, 1215, 1223], "c": [1, 15, 36, 37, 39, 41, 42, 45, 65, 66, 68, 70, 79, 81, 86, 104, 106, 108, 110, 119, 128, 142, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 172, 175, 176, 179, 180, 181, 182, 183, 189, 191, 193, 200, 201, 203, 206, 208, 210, 211, 213, 215, 216, 217, 218, 220, 221, 222, 224, 227, 228, 230, 233, 234, 235, 242, 243, 244, 245, 247, 249, 252, 253, 254, 255, 256, 258, 259, 262, 263, 265, 266, 268, 272, 275, 276, 277, 278, 280, 281, 283, 286, 287, 293, 300, 302, 303, 305, 307, 325, 356, 439, 454, 464, 478, 508, 511, 530, 531, 543, 547, 551, 581, 620, 629, 652, 659, 661, 663, 669, 670, 672, 673, 674, 675, 676, 677, 679, 693, 694, 695, 698, 702, 705, 707, 708, 709, 710, 711, 712, 713, 722, 724, 725, 726, 730, 737, 741, 758, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 775, 779, 780, 788, 791, 798, 801, 803, 806, 807, 809, 810, 816, 817, 818, 823, 826, 829, 831, 834, 837, 838, 839, 840, 842, 843, 845, 848, 849, 853, 856, 891, 913, 914, 997, 1018, 1089, 1162, 1171, 1201, 1215], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 66, 68, 70, 78, 79, 81, 82, 86, 103, 106, 107, 108, 109, 110, 112, 115, 136, 137, 139, 144, 157, 158, 159, 162, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 189, 190, 193, 194, 196, 198, 199, 202, 203, 204, 205, 207, 208, 209, 211, 214, 215, 216, 218, 220, 221, 222, 225, 229, 232, 238, 239, 243, 246, 247, 249, 250, 251, 252, 254, 257, 262, 263, 264, 267, 268, 270, 272, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 293, 300, 301, 304, 331, 333, 335, 337, 338, 355, 356, 357, 358, 359, 364, 365, 390, 392, 394, 397, 398, 404, 412, 415, 416, 419, 421, 425, 426, 430, 431, 433, 435, 436, 439, 443, 447, 448, 450, 451, 452, 454, 457, 459, 467, 471, 472, 474, 476, 480, 483, 486, 487, 488, 489, 490, 491, 494, 496, 526, 528, 530, 539, 542, 543, 544, 545, 546, 547, 551, 552, 554, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 577, 583, 589, 595, 604, 605, 606, 640, 643, 649, 650, 663, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 685, 690, 691, 692, 693, 694, 698, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 722, 724, 725, 726, 730, 737, 741, 760, 761, 762, 763, 764, 770, 771, 772, 773, 774, 776, 778, 779, 780, 785, 787, 789, 790, 791, 792, 796, 797, 798, 803, 808, 814, 816, 817, 818, 819, 820, 821, 826, 828, 829, 832, 834, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 862, 865, 869, 872, 885, 890, 895, 897, 904, 912, 913, 914, 915, 916, 922, 923, 924, 925, 926, 952, 954, 956, 957, 959, 960, 966, 968, 969, 977, 980, 981, 992, 993, 996, 997, 1003, 1009, 1035, 1036, 1040, 1044, 1050, 1051, 1052, 1054, 1055, 1060, 1069, 1070, 1077, 1085, 1086, 1087, 1089, 1090, 1091, 1095, 1098, 1100, 1101, 1102, 1104, 1105, 1108, 1112, 1115, 1125, 1131, 1137, 1146, 1147, 1186, 1199, 1202, 1206, 1215, 1223], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 66, 68, 69, 70, 79, 81, 86, 87, 88, 103, 106, 107, 108, 109, 136, 157, 160, 163, 164, 165, 166, 168, 169, 172, 176, 177, 178, 179, 180, 181, 183, 189, 191, 193, 194, 196, 198, 199, 201, 205, 206, 207, 208, 209, 210, 211, 213, 214, 217, 220, 221, 222, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 239, 242, 243, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 259, 261, 262, 264, 265, 266, 268, 270, 277, 286, 287, 293, 300, 304, 325, 333, 348, 349, 359, 364, 368, 382, 387, 388, 389, 406, 407, 410, 412, 420, 421, 427, 430, 435, 436, 438, 459, 460, 461, 472, 487, 488, 489, 490, 511, 539, 542, 550, 553, 554, 555, 558, 560, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 589, 595, 599, 605, 606, 640, 643, 657, 676, 677, 678, 691, 694, 705, 706, 724, 737, 741, 760, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 778, 780, 785, 787, 788, 790, 792, 794, 798, 801, 803, 806, 808, 809, 810, 812, 814, 816, 817, 818, 821, 825, 828, 829, 832, 839, 848, 849, 853, 856, 895, 901, 903, 906, 907, 916, 949, 969, 993, 1024, 1025, 1036, 1051, 1052, 1054, 1077, 1091, 1095, 1097, 1103, 1105, 1107, 1109, 1115, 1137, 1141, 1147, 1185, 1215, 1222, 1223], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 79, 81, 86, 157, 160, 161, 162, 163, 164, 166, 168, 172, 176, 177, 179, 183, 189, 191, 194, 201, 206, 208, 210, 212, 213, 217, 220, 222, 224, 227, 229, 230, 232, 233, 234, 235, 239, 242, 244, 245, 246, 247, 253, 254, 255, 256, 262, 264, 265, 266, 293, 300, 304, 322, 349, 364, 368, 388, 390, 391, 405, 407, 417, 430, 435, 438, 459, 487, 488, 489, 490, 510, 542, 554, 558, 562, 572, 589, 632, 643, 676, 677, 688, 694, 705, 706, 724, 741, 760, 765, 767, 769, 771, 775, 778, 780, 785, 787, 788, 792, 799, 801, 804, 806, 808, 809, 810, 814, 821, 853, 856, 869, 877, 922, 926, 933, 952, 953, 967, 969, 1019, 1051, 1052, 1054, 1070, 1095, 1108, 1174, 1215, 1223], "float32": [1, 15, 37, 57, 81, 157, 175, 253, 254, 293, 703, 760, 853, 856, 1000, 1069, 1215], "lazi": [1, 63, 64, 65, 66, 68, 81, 86, 128, 144, 202, 219, 220, 293, 511, 696, 714, 717, 732, 741, 788, 789, 831, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 1222, 1223], "i16": [1, 81, 581, 741, 856, 1070, 1194, 1215, 1223], "i32": [1, 81, 103, 106, 110, 143, 144, 235, 293, 333, 375, 409, 560, 581, 731, 741, 810, 853, 933, 971, 1069, 1097, 1215, 1223], "f32": [1, 81, 157, 165, 253, 293, 581, 741, 760, 768, 853, 856, 1069, 1215], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 60, 63, 65, 79, 80, 81, 82, 86, 103, 104, 105, 106, 107, 108, 109, 110, 116, 128, 156, 158, 159, 160, 163, 165, 166, 168, 169, 171, 172, 177, 178, 180, 181, 182, 183, 189, 191, 193, 195, 197, 201, 202, 205, 206, 211, 212, 213, 218, 219, 220, 221, 224, 225, 227, 228, 229, 233, 235, 239, 242, 243, 245, 247, 250, 256, 258, 259, 260, 261, 262, 263, 264, 266, 268, 270, 271, 272, 273, 276, 277, 278, 279, 280, 283, 286, 287, 293, 300, 302, 306, 320, 321, 322, 324, 325, 331, 335, 338, 345, 346, 347, 348, 349, 356, 358, 359, 371, 396, 398, 399, 400, 401, 402, 403, 404, 416, 418, 419, 421, 422, 423, 424, 426, 427, 429, 430, 432, 435, 436, 437, 438, 439, 443, 444, 447, 448, 450, 451, 452, 454, 456, 459, 462, 463, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 499, 501, 505, 508, 509, 511, 526, 527, 528, 530, 531, 532, 533, 534, 535, 543, 544, 547, 548, 549, 550, 551, 554, 555, 556, 558, 559, 560, 561, 562, 576, 578, 579, 581, 582, 583, 587, 588, 589, 614, 615, 637, 638, 639, 640, 641, 642, 643, 649, 650, 651, 653, 656, 664, 670, 672, 676, 677, 678, 679, 690, 691, 692, 693, 694, 698, 700, 701, 702, 703, 705, 706, 707, 708, 711, 712, 716, 720, 721, 724, 725, 726, 731, 737, 741, 758, 761, 763, 764, 766, 767, 768, 771, 772, 774, 775, 776, 778, 779, 780, 785, 788, 789, 790, 792, 794, 795, 798, 799, 800, 802, 803, 806, 807, 808, 810, 812, 814, 817, 818, 820, 821, 823, 824, 825, 826, 829, 832, 834, 835, 838, 839, 840, 841, 842, 845, 848, 849, 853, 856, 859, 862, 875, 876, 877, 879, 885, 890, 897, 900, 904, 905, 906, 907, 913, 914, 929, 958, 960, 961, 962, 963, 964, 965, 966, 980, 981, 983, 984, 987, 988, 992, 1005, 1032, 1034, 1035, 1036, 1040, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1063, 1071, 1076, 1089, 1094, 1095, 1097, 1101, 1104, 1108, 1112, 1113, 1116, 1120, 1124, 1125, 1129, 1130, 1184, 1186, 1193, 1199, 1200, 1206, 1215, 1222, 1223], "register_series_namespac": [1, 79, 80, 81], "math": [1, 15, 82, 357, 665, 666, 741, 901, 903, 1126, 1189, 1215], "mathshortcut": [1, 82], "": [1, 2, 16, 37, 40, 45, 57, 63, 66, 70, 82, 103, 104, 110, 114, 115, 116, 117, 119, 125, 129, 130, 133, 134, 146, 156, 157, 165, 167, 177, 182, 183, 185, 186, 193, 201, 202, 211, 218, 220, 225, 227, 232, 235, 236, 243, 252, 258, 260, 261, 262, 263, 268, 269, 293, 371, 394, 397, 416, 455, 478, 509, 511, 520, 527, 536, 537, 543, 544, 556, 560, 589, 593, 600, 601, 602, 614, 618, 619, 621, 629, 630, 631, 634, 635, 638, 639, 658, 659, 660, 661, 667, 673, 678, 679, 682, 683, 692, 695, 696, 705, 706, 707, 708, 711, 712, 720, 721, 723, 724, 725, 737, 741, 758, 760, 767, 768, 779, 780, 782, 783, 789, 798, 810, 811, 818, 823, 824, 825, 826, 829, 830, 836, 841, 853, 856, 859, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 885, 886, 888, 889, 891, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 915, 916, 917, 918, 920, 922, 926, 928, 929, 932, 934, 935, 939, 941, 945, 946, 950, 953, 954, 956, 959, 967, 969, 970, 971, 974, 975, 976, 977, 981, 982, 983, 984, 986, 987, 988, 991, 992, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1032, 1034, 1036, 1040, 1042, 1044, 1050, 1055, 1056, 1057, 1060, 1062, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1153, 1154, 1156, 1160, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1182, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1215], "_": [1, 78, 82, 220, 252, 293, 478, 601, 605, 606, 619, 620, 891, 1143, 1147, 1148, 1162, 1192, 1215], "squar": [1, 82, 279, 455, 590, 741, 841, 1020, 1131, 1215], "cube": [1, 82, 336, 548, 741, 893, 1215], "s2": [1, 69, 87, 88, 139, 140, 175, 293, 895, 916, 1005, 1019, 1063, 1077, 1115, 1197, 1206, 1215], "renam": [1, 106, 114, 115, 153, 155, 173, 184, 185, 186, 187, 192, 226, 235, 236, 248, 268, 269, 272, 274, 293, 302, 307, 350, 351, 352, 353, 354, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 523, 531, 532, 533, 549, 563, 594, 607, 608, 609, 610, 613, 616, 617, 623, 639, 641, 644, 645, 662, 682, 683, 704, 720, 723, 741, 757, 781, 782, 783, 784, 793, 805, 810, 811, 822, 829, 830, 833, 834, 836, 853, 859, 863, 908, 909, 910, 911, 913, 1002, 1008, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1089, 1099, 1117, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1182, 1187, 1188, 1193, 1215], "n2": 1, "in_plac": [1, 191, 241, 266, 293, 1092, 1123, 1130, 1215], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 65, 67, 84, 85, 86, 103, 104, 108, 110, 112, 114, 115, 116, 118, 119, 120, 122, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 150, 152, 156, 157, 158, 159, 162, 171, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 193, 195, 196, 197, 199, 202, 203, 208, 209, 215, 216, 218, 220, 221, 229, 230, 231, 232, 233, 235, 243, 246, 250, 252, 254, 255, 258, 259, 260, 261, 262, 263, 264, 268, 273, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 301, 302, 303, 304, 305, 306, 307, 318, 326, 327, 329, 330, 333, 345, 346, 347, 348, 349, 356, 363, 365, 368, 371, 374, 376, 383, 384, 387, 388, 390, 391, 392, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 410, 411, 412, 413, 414, 415, 429, 431, 432, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 474, 493, 497, 499, 506, 511, 515, 516, 517, 518, 519, 520, 522, 523, 538, 539, 540, 542, 545, 546, 551, 556, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 581, 586, 588, 589, 592, 593, 595, 596, 598, 603, 604, 613, 619, 620, 622, 629, 630, 631, 634, 638, 639, 651, 654, 657, 658, 659, 660, 661, 662, 664, 667, 668, 673, 674, 685, 686, 687, 688, 689, 694, 700, 701, 706, 714, 717, 723, 728, 729, 731, 732, 741, 758, 760, 761, 762, 763, 764, 770, 772, 774, 779, 780, 781, 782, 783, 784, 788, 789, 791, 793, 794, 798, 803, 808, 810, 812, 816, 818, 823, 824, 825, 826, 829, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 856, 860, 861, 862, 863, 873, 881, 886, 889, 892, 895, 896, 913, 920, 921, 923, 926, 928, 929, 930, 932, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 973, 975, 976, 977, 984, 990, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1020, 1024, 1025, 1038, 1057, 1061, 1071, 1077, 1083, 1086, 1087, 1089, 1093, 1106, 1115, 1128, 1130, 1134, 1135, 1137, 1138, 1140, 1145, 1146, 1155, 1161, 1162, 1164, 1171, 1172, 1173, 1176, 1196, 1197, 1205, 1206, 1215, 1222, 1223], "s3": [1, 39, 118, 129, 130, 133, 134, 293, 1063, 1215], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 56, 57, 63, 68, 75, 77, 78, 79, 81, 82, 86, 136, 142, 157, 160, 161, 162, 163, 164, 165, 166, 168, 172, 176, 177, 179, 181, 189, 191, 201, 205, 206, 208, 210, 213, 222, 224, 227, 230, 232, 233, 234, 235, 239, 242, 244, 245, 247, 253, 254, 255, 256, 262, 265, 266, 268, 293, 304, 306, 319, 344, 346, 349, 355, 364, 430, 438, 458, 468, 471, 481, 487, 488, 489, 490, 528, 542, 548, 558, 559, 564, 581, 587, 589, 607, 610, 611, 612, 629, 657, 663, 669, 673, 674, 675, 677, 679, 691, 693, 698, 702, 705, 706, 707, 708, 709, 710, 711, 712, 713, 722, 725, 726, 730, 741, 760, 765, 767, 768, 769, 771, 775, 778, 785, 788, 792, 794, 803, 806, 809, 810, 814, 821, 829, 853, 856, 862, 903, 912, 933, 993, 1019, 1032, 1035, 1045, 1051, 1052, 1054, 1085, 1095, 1098, 1100, 1103, 1105, 1107, 1109, 1149, 1152, 1153, 1154, 1171, 1215, 1223], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 63, 68, 78, 86, 136, 161, 162, 175, 184, 189, 194, 205, 229, 231, 232, 235, 246, 247, 262, 266, 268, 286, 293, 300, 304, 306, 319, 332, 344, 346, 349, 357, 364, 430, 438, 444, 454, 458, 468, 485, 493, 530, 542, 553, 558, 562, 564, 570, 572, 583, 587, 601, 632, 671, 676, 677, 729, 741, 781, 785, 787, 792, 808, 810, 821, 829, 848, 853, 856, 914, 926, 937, 939, 947, 953, 967, 968, 1005, 1019, 1032, 1057, 1095, 1100, 1106, 1108, 1110, 1125, 1143, 1174, 1215], "27": [1, 82, 286, 349, 382, 389, 406, 741, 848, 1215, 1223], "16": [1, 40, 53, 72, 80, 183, 229, 268, 293, 346, 349, 438, 528, 548, 562, 676, 690, 691, 694, 741, 780, 808, 816, 829, 853, 856, 953, 967, 1085, 1126, 1189, 1215], "64": [1, 52, 55, 74, 80, 82, 135, 152, 343, 528, 548, 741, 1085, 1215], "25": [1, 32, 40, 82, 110, 144, 162, 183, 202, 229, 264, 268, 293, 358, 368, 370, 388, 391, 405, 407, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 650, 685, 686, 688, 689, 690, 696, 706, 728, 729, 741, 780, 789, 796, 808, 827, 829, 853, 856, 914, 915, 928, 953, 967, 973, 993, 1085, 1089, 1215], "125": [1, 40, 82, 293, 300, 741, 1085, 1215], "arg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 172, 219, 255, 293, 547, 667, 695, 741, 775, 802, 853, 1071, 1196, 1197, 1215], "ani": [2, 3, 4, 5, 9, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 83, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 126, 128, 129, 130, 131, 133, 141, 143, 144, 146, 150, 153, 161, 165, 169, 171, 172, 175, 198, 199, 200, 205, 209, 218, 219, 230, 231, 232, 246, 250, 251, 254, 255, 260, 262, 263, 293, 300, 303, 304, 307, 333, 392, 411, 412, 421, 426, 429, 431, 433, 444, 457, 464, 471, 506, 507, 509, 510, 511, 523, 526, 528, 532, 533, 538, 539, 542, 543, 547, 549, 558, 563, 564, 577, 592, 613, 625, 626, 627, 628, 629, 630, 631, 634, 640, 641, 644, 650, 657, 658, 661, 662, 673, 693, 702, 703, 706, 731, 741, 768, 774, 775, 802, 824, 826, 853, 856, 860, 862, 863, 916, 954, 980, 983, 987, 1005, 1019, 1028, 1035, 1070, 1071, 1095, 1099, 1100, 1113, 1114, 1117, 1134, 1155, 1171, 1172, 1173, 1176, 1187, 1195, 1196, 1197, 1215, 1222, 1223], "kwarg": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 116, 161, 172, 219, 255, 293, 547, 741, 775, 802, 853, 1197, 1215, 1222], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1215, 1222], "fix": [2, 15, 119, 142, 144, 408, 565, 566, 567, 568, 569, 571, 572, 573, 690, 741, 970], "length": [2, 60, 86, 128, 142, 181, 183, 184, 186, 187, 229, 242, 293, 355, 391, 405, 492, 499, 520, 560, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 587, 605, 606, 608, 610, 611, 612, 616, 618, 637, 714, 717, 718, 719, 732, 741, 780, 781, 783, 784, 803, 808, 817, 853, 895, 912, 922, 953, 967, 1056, 1063, 1082, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1129, 1147, 1148, 1150, 1152, 1153, 1154, 1158, 1160, 1179, 1215], "inner": [2, 60, 143, 201, 263, 293, 320, 321, 322, 323, 324, 359, 478, 498, 557, 648, 741, 788, 812, 826, 853, 875, 876, 877, 878, 879, 916, 1042, 1062, 1198, 1215], "polarsdatatyp": [2, 60, 114, 115, 121, 127, 128, 141, 142, 143, 144, 146, 153, 157, 166, 205, 293, 307, 333, 416, 507, 509, 510, 511, 603, 662, 692, 703, 704, 705, 706, 714, 717, 732, 737, 741, 760, 769, 853, 856, 863, 886, 1070, 1071, 1145, 1215], "pythondatatyp": [2, 60], "none": [2, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 57, 58, 59, 61, 63, 65, 66, 68, 78, 85, 88, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 158, 162, 165, 170, 171, 181, 183, 184, 186, 187, 188, 194, 198, 201, 202, 203, 205, 206, 208, 211, 213, 216, 217, 220, 229, 230, 233, 239, 240, 242, 243, 245, 250, 252, 255, 259, 260, 261, 262, 263, 264, 293, 303, 305, 306, 307, 319, 325, 338, 344, 346, 349, 356, 360, 361, 387, 390, 391, 405, 412, 413, 414, 415, 416, 419, 420, 421, 427, 434, 438, 439, 448, 450, 451, 452, 458, 460, 461, 470, 475, 480, 486, 487, 488, 489, 490, 492, 499, 507, 509, 510, 511, 519, 522, 524, 539, 540, 541, 544, 548, 551, 554, 555, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 579, 580, 581, 582, 583, 587, 588, 592, 593, 595, 597, 598, 601, 603, 604, 605, 606, 609, 611, 612, 613, 617, 618, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 634, 637, 638, 639, 648, 658, 659, 660, 661, 662, 670, 672, 674, 679, 685, 686, 687, 688, 689, 690, 692, 693, 702, 703, 704, 705, 706, 708, 712, 717, 718, 719, 722, 723, 725, 727, 728, 729, 730, 731, 741, 761, 762, 764, 768, 773, 774, 780, 781, 783, 784, 787, 788, 789, 791, 793, 794, 798, 801, 808, 812, 814, 815, 816, 817, 818, 824, 825, 826, 831, 833, 836, 841, 853, 856, 860, 861, 862, 863, 870, 871, 896, 897, 913, 914, 916, 917, 918, 934, 935, 936, 941, 952, 953, 967, 972, 973, 975, 976, 977, 981, 982, 983, 985, 991, 993, 995, 996, 997, 1007, 1012, 1013, 1016, 1019, 1020, 1021, 1024, 1025, 1034, 1039, 1044, 1050, 1051, 1052, 1054, 1056, 1063, 1070, 1071, 1072, 1073, 1074, 1075, 1079, 1089, 1090, 1091, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1112, 1113, 1116, 1117, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1134, 1135, 1137, 1139, 1140, 1143, 1145, 1146, 1147, 1148, 1151, 1153, 1154, 1155, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1179, 1193, 1194, 1195, 1197, 1198, 1204, 1215, 1222], "width": [2, 31, 40, 114, 115, 128, 293, 320, 321, 322, 323, 324, 498, 853, 875, 876, 877, 878, 879, 1062], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 40, 45, 49, 57, 59, 65, 68, 80, 106, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 128, 129, 131, 132, 133, 134, 135, 142, 143, 144, 145, 146, 147, 148, 153, 156, 158, 167, 170, 171, 173, 177, 179, 181, 188, 189, 190, 192, 193, 198, 199, 200, 202, 204, 205, 206, 208, 213, 215, 216, 226, 227, 230, 233, 238, 239, 240, 242, 244, 245, 247, 248, 253, 256, 258, 262, 265, 267, 270, 277, 287, 293, 300, 325, 331, 355, 358, 413, 414, 415, 419, 420, 421, 427, 429, 430, 432, 434, 435, 459, 465, 468, 474, 475, 476, 486, 491, 492, 496, 497, 498, 499, 542, 544, 547, 548, 551, 554, 557, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 582, 587, 591, 600, 603, 608, 611, 612, 613, 614, 616, 618, 620, 621, 632, 637, 643, 644, 645, 649, 655, 657, 664, 673, 674, 675, 684, 687, 690, 696, 698, 700, 701, 710, 713, 714, 717, 718, 719, 722, 723, 726, 727, 730, 732, 741, 758, 761, 772, 773, 774, 778, 785, 789, 792, 803, 814, 815, 817, 819, 821, 822, 823, 827, 828, 832, 839, 849, 853, 870, 871, 885, 886, 895, 896, 912, 915, 974, 975, 976, 977, 981, 982, 983, 987, 988, 991, 992, 993, 1019, 1021, 1022, 1029, 1030, 1031, 1032, 1038, 1039, 1040, 1050, 1055, 1056, 1060, 1061, 1062, 1063, 1073, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1088, 1089, 1091, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1120, 1121, 1124, 1129, 1132, 1142, 1145, 1150, 1153, 1154, 1155, 1156, 1158, 1160, 1162, 1163, 1174, 1179, 1185, 1186, 1187, 1188, 1194, 1199, 1204, 1215, 1222, 1223], "paramet": [2, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 57, 58, 59, 60, 63, 64, 65, 66, 68, 70, 78, 79, 80, 81, 82, 84, 85, 86, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 153, 156, 157, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 211, 212, 213, 215, 216, 218, 219, 220, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 274, 277, 279, 285, 287, 293, 300, 302, 303, 304, 305, 306, 307, 317, 324, 325, 326, 327, 328, 329, 330, 331, 333, 335, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 363, 364, 365, 371, 387, 390, 391, 392, 394, 396, 397, 405, 408, 410, 411, 412, 413, 414, 415, 416, 419, 421, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 444, 455, 457, 459, 464, 465, 466, 467, 468, 471, 474, 475, 476, 478, 486, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 501, 502, 506, 507, 508, 509, 510, 511, 522, 526, 528, 531, 532, 533, 538, 539, 542, 543, 544, 547, 548, 549, 551, 552, 554, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 637, 638, 639, 640, 641, 643, 644, 645, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 741, 758, 760, 761, 763, 764, 766, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 788, 789, 792, 793, 794, 798, 799, 802, 803, 804, 805, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 836, 839, 841, 847, 849, 853, 856, 859, 860, 861, 862, 863, 872, 879, 880, 881, 882, 883, 884, 885, 886, 890, 896, 897, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 921, 922, 923, 929, 949, 952, 953, 954, 956, 958, 959, 967, 970, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 987, 988, 991, 992, 993, 996, 997, 1007, 1015, 1016, 1020, 1022, 1028, 1029, 1030, 1031, 1032, 1035, 1038, 1039, 1040, 1042, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1062, 1063, 1065, 1070, 1071, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1124, 1128, 1129, 1130, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1150, 1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1176, 1179, 1180, 1182, 1186, 1187, 1188, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1203, 1204, 1205, 1206, 1215, 1222], "The": [2, 25, 38, 39, 40, 45, 59, 60, 63, 67, 69, 70, 78, 83, 84, 88, 103, 105, 106, 107, 109, 112, 114, 115, 116, 117, 119, 123, 124, 126, 128, 132, 134, 137, 138, 139, 140, 148, 162, 164, 165, 166, 168, 169, 172, 181, 182, 183, 186, 188, 194, 199, 202, 205, 212, 218, 229, 230, 231, 232, 235, 236, 254, 261, 264, 268, 269, 272, 279, 293, 302, 325, 326, 327, 328, 356, 360, 361, 368, 382, 387, 388, 391, 394, 405, 406, 416, 419, 422, 427, 434, 470, 474, 497, 509, 511, 543, 551, 554, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 583, 586, 592, 596, 597, 600, 603, 609, 611, 612, 617, 623, 624, 625, 626, 627, 628, 629, 692, 696, 706, 718, 719, 720, 723, 731, 733, 734, 736, 737, 741, 742, 743, 746, 748, 749, 750, 768, 771, 775, 780, 783, 785, 787, 789, 792, 794, 799, 803, 808, 810, 811, 812, 825, 829, 830, 834, 841, 853, 859, 862, 880, 881, 882, 896, 913, 914, 917, 918, 926, 944, 949, 950, 953, 956, 967, 968, 980, 981, 984, 991, 1034, 1038, 1071, 1089, 1091, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1125, 1128, 1134, 1138, 1139, 1145, 1151, 1153, 1154, 1159, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1207, 1209, 1211, 1215, 1216, 1219, 1220, 1221, 1223], "datatyp": [2, 37, 43, 57, 60, 76, 103, 105, 106, 107, 109, 111, 119, 121, 123, 124, 127, 132, 146, 166, 168, 175, 234, 293, 333, 416, 581, 648, 692, 703, 741, 753, 771, 809, 812, 853, 863, 886, 914, 1007, 1014, 1016, 1018, 1071, 1122, 1198, 1215], "valu": [2, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 57, 60, 61, 63, 67, 69, 76, 78, 86, 88, 106, 108, 114, 115, 116, 117, 119, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 155, 156, 162, 165, 169, 170, 171, 172, 176, 181, 183, 186, 188, 189, 194, 198, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 220, 221, 222, 224, 229, 230, 231, 232, 233, 239, 240, 243, 244, 245, 246, 247, 250, 251, 255, 258, 259, 262, 263, 264, 265, 275, 276, 278, 280, 281, 283, 284, 293, 299, 300, 301, 303, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 327, 328, 329, 330, 331, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 349, 355, 356, 358, 360, 361, 364, 368, 382, 388, 406, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 453, 456, 457, 458, 460, 461, 462, 463, 466, 467, 468, 470, 473, 475, 476, 479, 480, 482, 483, 484, 486, 491, 494, 496, 499, 501, 503, 505, 506, 509, 510, 511, 512, 513, 514, 525, 526, 527, 528, 529, 536, 537, 538, 539, 541, 543, 544, 547, 548, 551, 552, 554, 557, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 603, 604, 611, 612, 614, 615, 618, 620, 621, 622, 637, 640, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 657, 658, 660, 663, 670, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 693, 694, 699, 702, 703, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 719, 724, 725, 731, 741, 756, 757, 758, 768, 773, 774, 775, 780, 783, 786, 787, 789, 795, 796, 797, 798, 800, 801, 804, 806, 808, 812, 814, 815, 818, 819, 820, 823, 826, 827, 837, 838, 840, 842, 843, 845, 846, 853, 856, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 879, 881, 882, 883, 884, 890, 894, 897, 898, 899, 901, 902, 903, 912, 913, 914, 915, 917, 918, 922, 926, 944, 950, 968, 974, 975, 976, 977, 980, 981, 982, 983, 986, 987, 988, 990, 991, 992, 993, 994, 996, 997, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1021, 1022, 1024, 1025, 1026, 1027, 1030, 1031, 1032, 1034, 1037, 1039, 1040, 1043, 1044, 1046, 1047, 1048, 1050, 1055, 1060, 1065, 1070, 1072, 1073, 1075, 1076, 1078, 1080, 1081, 1082, 1084, 1085, 1088, 1089, 1090, 1091, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1125, 1126, 1127, 1128, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1153, 1154, 1156, 1157, 1160, 1162, 1163, 1164, 1179, 1185, 1186, 1187, 1188, 1189, 1190, 1196, 1197, 1198, 1201, 1203, 1205, 1206, 1215, 1223], "within": [2, 60, 137, 138, 139, 140, 182, 183, 184, 185, 186, 187, 188, 202, 229, 264, 293, 434, 554, 562, 589, 741, 780, 781, 783, 784, 789, 808, 853, 991, 1215, 1222], "each": [2, 37, 40, 57, 60, 78, 115, 116, 132, 137, 138, 139, 140, 142, 181, 182, 183, 184, 185, 186, 187, 200, 202, 205, 218, 229, 233, 255, 261, 263, 264, 271, 272, 275, 277, 279, 287, 293, 356, 391, 405, 442, 443, 446, 447, 476, 480, 481, 486, 496, 504, 511, 551, 554, 561, 567, 569, 571, 573, 576, 582, 589, 601, 605, 606, 607, 610, 620, 621, 664, 667, 672, 700, 701, 723, 731, 741, 763, 780, 781, 783, 784, 789, 803, 808, 825, 826, 834, 836, 837, 839, 841, 849, 853, 895, 913, 953, 967, 1002, 1003, 1008, 1009, 1040, 1044, 1045, 1050, 1060, 1089, 1091, 1098, 1112, 1124, 1143, 1147, 1148, 1149, 1152, 1162, 1163, 1184, 1215, 1223], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 78, 79, 80, 81, 82, 86, 87, 88, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 125, 128, 129, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 611, 612, 614, 615, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 737, 741, 753, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 980, 981, 982, 983, 984, 986, 987, 988, 991, 992, 993, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1021, 1024, 1025, 1032, 1034, 1035, 1036, 1040, 1042, 1044, 1050, 1051, 1052, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1083, 1085, 1086, 1087, 1089, 1090, 1091, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1134, 1135, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1156, 1157, 1160, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1184, 1185, 1186, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1215, 1222], "dtype": [2, 15, 40, 48, 69, 81, 87, 88, 103, 105, 107, 109, 110, 114, 115, 116, 117, 123, 124, 125, 128, 141, 142, 143, 144, 146, 152, 157, 183, 184, 186, 187, 202, 229, 253, 254, 255, 262, 293, 307, 333, 334, 348, 349, 408, 416, 429, 464, 474, 497, 505, 507, 509, 510, 511, 556, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 603, 629, 642, 644, 648, 653, 662, 664, 674, 692, 696, 700, 701, 703, 704, 705, 706, 714, 717, 723, 732, 741, 760, 780, 781, 783, 784, 789, 808, 853, 856, 875, 876, 878, 886, 888, 889, 891, 896, 906, 907, 914, 915, 970, 974, 998, 1000, 1004, 1007, 1014, 1016, 1018, 1028, 1038, 1062, 1069, 1070, 1096, 1115, 1122, 1145, 1171, 1185, 1194, 1196, 1197, 1198, 1202, 1215, 1223], "method": [2, 3, 4, 5, 9, 36, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 85, 86, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 133, 134, 141, 150, 153, 155, 165, 169, 173, 182, 184, 185, 186, 187, 192, 194, 199, 205, 206, 208, 213, 216, 222, 226, 230, 231, 232, 239, 245, 248, 260, 268, 274, 279, 285, 293, 300, 303, 304, 307, 332, 338, 350, 351, 352, 353, 354, 394, 397, 411, 412, 419, 426, 431, 433, 438, 442, 446, 449, 454, 457, 466, 469, 477, 481, 491, 495, 500, 506, 507, 508, 511, 526, 528, 530, 532, 533, 534, 535, 538, 539, 542, 548, 549, 552, 554, 563, 565, 566, 567, 568, 569, 571, 572, 573, 579, 594, 607, 608, 609, 610, 613, 616, 617, 623, 625, 626, 627, 628, 632, 637, 640, 641, 644, 645, 650, 652, 657, 673, 685, 706, 715, 717, 728, 733, 734, 736, 737, 741, 742, 743, 746, 747, 748, 749, 750, 753, 757, 764, 766, 768, 777, 781, 782, 783, 784, 787, 793, 804, 805, 814, 822, 824, 829, 833, 836, 841, 847, 853, 862, 863, 897, 908, 909, 910, 911, 956, 959, 980, 981, 996, 1002, 1008, 1030, 1033, 1041, 1045, 1055, 1059, 1061, 1064, 1071, 1090, 1091, 1099, 1105, 1117, 1120, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1174, 1179, 1187, 1188, 1198, 1205, 1207, 1209, 1211, 1215, 1216, 1219, 1220, 1221], "attribut": [2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 70, 71, 72, 73, 74, 75, 76, 77, 141, 293, 733, 734, 736, 737, 742, 743, 746, 748, 749, 750, 853, 1207, 1209, 1211, 1216, 1219, 1220, 1221], "A": [5, 18, 37, 40, 57, 63, 66, 84, 85, 110, 114, 115, 116, 117, 128, 130, 135, 148, 175, 183, 201, 202, 207, 209, 214, 220, 246, 250, 262, 263, 264, 268, 269, 293, 299, 360, 361, 364, 411, 412, 419, 431, 433, 441, 445, 448, 450, 457, 499, 506, 509, 520, 538, 539, 559, 564, 565, 566, 567, 568, 569, 571, 572, 573, 593, 594, 595, 600, 601, 602, 604, 614, 615, 637, 671, 690, 691, 695, 741, 780, 788, 789, 806, 826, 829, 830, 853, 856, 917, 918, 922, 981, 1100, 1101, 1102, 1104, 1107, 1108, 1109, 1135, 1136, 1137, 1142, 1143, 1144, 1146, 1156, 1157, 1179, 1215, 1222], "encod": [5, 77, 114, 115, 128, 252, 293, 327, 428, 596, 741, 881, 1138], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 57, 58, 59, 78, 79, 104, 106, 109, 114, 115, 116, 119, 120, 122, 125, 126, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 152, 160, 165, 174, 182, 183, 184, 185, 186, 187, 188, 199, 202, 206, 208, 209, 211, 213, 229, 233, 235, 242, 245, 246, 252, 254, 259, 260, 262, 268, 293, 303, 305, 307, 332, 338, 356, 408, 434, 444, 469, 474, 477, 486, 487, 488, 489, 490, 492, 495, 497, 499, 500, 510, 511, 547, 551, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 582, 586, 587, 592, 609, 617, 618, 623, 624, 625, 626, 627, 628, 629, 630, 631, 634, 654, 658, 660, 664, 668, 685, 686, 688, 689, 700, 701, 714, 717, 718, 719, 723, 728, 729, 731, 732, 741, 753, 763, 768, 770, 779, 780, 781, 782, 783, 784, 788, 789, 793, 794, 798, 808, 810, 812, 817, 824, 829, 833, 836, 841, 853, 860, 861, 862, 892, 897, 913, 970, 991, 1005, 1033, 1038, 1041, 1050, 1051, 1052, 1053, 1054, 1056, 1059, 1061, 1063, 1064, 1070, 1071, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1112, 1113, 1117, 1124, 1128, 1129, 1134, 1151, 1159, 1160, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1196, 1203, 1215, 1223], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 57, 63, 69, 77, 87, 88, 110, 114, 115, 116, 117, 128, 137, 138, 139, 140, 141, 142, 143, 146, 149, 156, 175, 181, 182, 183, 185, 202, 218, 220, 229, 232, 235, 236, 243, 253, 258, 259, 262, 264, 268, 269, 272, 293, 300, 329, 335, 387, 391, 394, 397, 405, 416, 418, 424, 428, 439, 478, 510, 522, 543, 547, 562, 565, 566, 567, 568, 569, 571, 572, 573, 589, 592, 593, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 637, 659, 661, 667, 670, 671, 672, 679, 683, 685, 686, 688, 689, 695, 708, 712, 720, 723, 725, 728, 729, 731, 741, 758, 770, 777, 779, 780, 782, 789, 808, 810, 811, 812, 818, 823, 829, 830, 833, 834, 853, 856, 883, 889, 890, 949, 953, 956, 959, 967, 979, 997, 1042, 1133, 1134, 1135, 1137, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1175, 1177, 1178, 1179, 1194, 1215, 1223], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 428, 741, 766, 777, 805, 853], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 471, 601, 1035, 1143], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 57, 58, 59, 78, 84, 85, 86, 87, 88, 103, 104, 108, 110, 114, 115, 119, 120, 122, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 152, 156, 157, 158, 159, 171, 172, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 191, 193, 195, 196, 197, 202, 209, 218, 220, 229, 232, 233, 237, 241, 243, 246, 250, 252, 254, 255, 258, 259, 260, 261, 263, 264, 266, 268, 276, 278, 280, 283, 293, 302, 303, 304, 305, 306, 307, 317, 324, 326, 327, 329, 330, 333, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 374, 390, 392, 405, 410, 411, 412, 413, 414, 415, 431, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 471, 474, 486, 493, 497, 501, 506, 507, 509, 511, 515, 516, 517, 518, 519, 522, 538, 539, 540, 542, 545, 546, 551, 554, 556, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 581, 586, 588, 589, 592, 593, 595, 596, 598, 613, 614, 615, 619, 620, 622, 629, 630, 631, 634, 639, 651, 654, 657, 658, 659, 660, 661, 662, 664, 667, 668, 673, 676, 680, 685, 686, 687, 688, 689, 700, 701, 703, 706, 714, 717, 723, 728, 729, 732, 741, 758, 760, 761, 763, 764, 770, 772, 774, 775, 779, 780, 781, 782, 783, 784, 788, 789, 793, 794, 798, 803, 808, 813, 816, 818, 823, 824, 825, 826, 829, 838, 840, 842, 845, 853, 856, 860, 861, 862, 863, 872, 879, 881, 886, 889, 892, 896, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 932, 952, 954, 967, 973, 975, 976, 977, 984, 990, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1024, 1025, 1029, 1030, 1031, 1035, 1038, 1050, 1057, 1061, 1065, 1071, 1083, 1086, 1087, 1089, 1091, 1092, 1093, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1115, 1116, 1117, 1118, 1123, 1128, 1130, 1134, 1135, 1137, 1138, 1140, 1155, 1156, 1157, 1161, 1162, 1164, 1171, 1172, 1173, 1176, 1195, 1196, 1197, 1200, 1203, 1205, 1215, 1222], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 57, 293, 574, 632, 741, 853, 1110, 1174, 1215], "temporari": 6, "remov": [6, 9, 89, 114, 115, 128, 152, 163, 206, 208, 213, 245, 252, 293, 307, 405, 416, 508, 511, 531, 609, 617, 623, 624, 625, 626, 627, 628, 692, 741, 767, 853, 862, 913, 953, 967, 1089, 1151, 1159, 1165, 1166, 1167, 1168, 1169, 1170, 1173, 1205, 1215], "onc": [6, 66, 114, 115, 119, 148, 205, 231, 233, 272, 293, 332, 486, 511, 576, 627, 628, 741, 759, 834, 853, 1050, 1071, 1112, 1169, 1170, 1215], "stabil": [6, 188, 293, 434, 741, 991, 1215], "current": [6, 7, 8, 10, 11, 35, 65, 104, 110, 116, 117, 133, 158, 159, 201, 202, 293, 370, 391, 499, 544, 741, 753, 761, 762, 763, 788, 789, 853, 856, 896, 900, 920, 928, 953, 1085, 1215, 1222], "consid": [6, 85, 87, 88, 114, 115, 128, 134, 137, 138, 139, 140, 165, 176, 205, 211, 231, 260, 262, 263, 293, 307, 338, 355, 391, 509, 511, 565, 566, 567, 568, 569, 571, 572, 573, 676, 694, 737, 741, 764, 768, 785, 792, 798, 824, 841, 853, 889, 892, 897, 912, 953, 993, 1007, 1071, 1089, 1113, 1115, 1116, 1215], "beta": 6, "cfg": [7, 9, 22, 150], "previous": [7, 8], "save": [7, 8, 11, 183, 202, 229, 264, 293, 362, 370, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 737, 741, 753, 780, 789, 808, 853, 928, 949, 953, 967], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 78, 114, 116, 118, 119, 120, 122, 126, 129, 130, 131, 133, 134, 136, 141, 142, 143, 144, 145, 146, 147, 183, 198, 202, 211, 250, 254, 259, 263, 293, 455, 563, 565, 566, 567, 568, 569, 571, 572, 573, 586, 618, 654, 703, 723, 731, 741, 753, 780, 788, 789, 798, 812, 826, 853, 856, 1016, 1020, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1128, 1160, 1193, 1203, 1215], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 40, 57, 63, 64, 65, 78, 86, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 162, 163, 167, 169, 174, 181, 183, 186, 199, 200, 202, 203, 211, 220, 224, 229, 230, 232, 233, 235, 236, 252, 259, 260, 262, 263, 264, 293, 345, 356, 357, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 416, 428, 438, 455, 486, 499, 511, 536, 537, 539, 544, 547, 551, 553, 562, 564, 565, 566, 568, 571, 572, 573, 576, 589, 600, 601, 603, 613, 625, 626, 627, 628, 629, 630, 631, 634, 652, 665, 666, 670, 684, 685, 686, 687, 688, 690, 717, 722, 727, 728, 729, 737, 740, 741, 760, 766, 767, 772, 777, 780, 783, 789, 798, 805, 806, 808, 810, 811, 824, 826, 831, 853, 856, 862, 913, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 974, 980, 1016, 1020, 1050, 1063, 1080, 1081, 1082, 1085, 1089, 1100, 1112, 1142, 1143, 1145, 1155, 1169, 1170, 1171, 1172, 1173, 1176, 1206, 1215, 1222, 1223], "json": [7, 8, 10, 11, 43, 44, 123, 124, 130, 132, 293, 428, 524, 603, 604, 741, 753, 766, 777, 805, 812, 833, 853, 1145, 1146], "produc": [7, 8, 143, 144, 146, 466, 467, 519, 705, 793, 794, 853, 1030, 1031], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 293, 524, 766, 805, 812, 833, 853, 862, 980, 1215], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 58, 59, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 293, 524, 578, 604, 741, 766, 805, 812, 816, 833, 853, 1118, 1146, 1215, 1223], "load": [8, 10, 11, 106, 108, 116, 118, 119, 125, 129, 130, 145, 147, 293, 741, 753, 785, 792, 853, 1223], "reset": [9, 150], "default": [9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 59, 78, 85, 86, 103, 105, 106, 107, 108, 109, 110, 114, 115, 117, 119, 123, 124, 125, 126, 128, 137, 139, 141, 142, 143, 144, 145, 146, 150, 162, 165, 167, 182, 183, 184, 185, 186, 187, 188, 199, 201, 202, 209, 211, 218, 220, 229, 230, 231, 232, 233, 239, 244, 246, 252, 260, 262, 263, 265, 270, 293, 302, 303, 305, 335, 356, 390, 391, 405, 410, 412, 413, 414, 415, 434, 474, 486, 491, 492, 497, 499, 502, 510, 519, 536, 537, 539, 544, 551, 554, 562, 565, 566, 567, 568, 569, 571, 572, 573, 576, 579, 582, 591, 592, 600, 609, 613, 617, 618, 623, 624, 625, 626, 629, 630, 631, 634, 654, 655, 658, 660, 664, 668, 673, 675, 685, 686, 687, 688, 689, 696, 700, 701, 703, 714, 717, 722, 723, 728, 729, 730, 732, 741, 763, 764, 768, 770, 779, 780, 781, 782, 783, 784, 788, 789, 798, 808, 812, 814, 819, 824, 827, 833, 853, 860, 861, 862, 890, 897, 913, 914, 952, 953, 967, 973, 974, 975, 976, 977, 991, 1038, 1050, 1055, 1056, 1061, 1063, 1070, 1080, 1081, 1085, 1089, 1091, 1112, 1120, 1124, 1132, 1134, 1135, 1142, 1151, 1155, 1159, 1160, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1203, 1204, 1215, 1223], "state": [9, 84, 85, 96, 676, 680, 753, 763, 764, 770, 772, 803, 816, 853], "note": [9, 15, 25, 39, 40, 63, 67, 68, 69, 78, 85, 87, 88, 103, 104, 105, 107, 109, 110, 114, 116, 117, 118, 119, 123, 124, 126, 129, 130, 133, 134, 137, 139, 142, 144, 146, 148, 150, 152, 156, 161, 162, 170, 183, 184, 186, 187, 188, 198, 199, 201, 202, 205, 216, 219, 220, 229, 230, 231, 232, 239, 251, 254, 258, 259, 263, 264, 268, 293, 338, 348, 349, 360, 361, 383, 384, 387, 391, 405, 434, 439, 448, 450, 454, 471, 474, 491, 497, 499, 509, 511, 530, 532, 533, 534, 535, 549, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 586, 593, 600, 601, 602, 605, 606, 614, 624, 625, 626, 629, 637, 641, 642, 650, 676, 685, 686, 688, 689, 690, 694, 703, 714, 716, 717, 728, 729, 731, 732, 737, 741, 752, 758, 764, 772, 773, 780, 781, 783, 784, 785, 789, 792, 806, 808, 814, 816, 818, 823, 826, 829, 853, 897, 906, 907, 914, 917, 918, 945, 946, 949, 967, 990, 991, 1035, 1038, 1055, 1061, 1071, 1106, 1113, 1116, 1120, 1123, 1128, 1135, 1142, 1143, 1144, 1147, 1148, 1156, 1166, 1167, 1168, 1171, 1179, 1185, 1196, 1215, 1222], "oper": [9, 40, 69, 86, 88, 93, 94, 103, 105, 106, 107, 108, 109, 114, 116, 126, 153, 159, 169, 172, 175, 182, 185, 192, 193, 203, 205, 212, 216, 218, 219, 223, 227, 229, 232, 233, 239, 249, 254, 255, 259, 262, 271, 272, 293, 300, 301, 304, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 411, 412, 426, 431, 433, 454, 457, 486, 487, 488, 489, 490, 491, 499, 506, 523, 526, 528, 530, 532, 533, 538, 539, 542, 548, 549, 556, 562, 576, 579, 640, 641, 650, 657, 658, 660, 671, 672, 691, 741, 753, 762, 772, 779, 782, 785, 788, 792, 798, 799, 808, 814, 834, 853, 862, 900, 904, 905, 906, 907, 908, 909, 910, 911, 912, 980, 1050, 1051, 1052, 1053, 1054, 1055, 1093, 1112, 1120, 1191, 1195, 1196, 1197, 1205, 1215], "environ": [9, 35, 133, 145, 148], "local": [9, 39, 116, 118, 129, 130, 133, 146, 293, 405, 545, 546, 741, 889, 891, 924, 925, 957, 967, 1086, 1087, 1215], "non": [9, 37, 39, 40, 49, 57, 78, 108, 135, 184, 187, 200, 211, 229, 235, 236, 239, 259, 263, 268, 269, 293, 338, 439, 499, 510, 544, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 594, 595, 601, 605, 637, 659, 661, 670, 671, 672, 679, 683, 690, 708, 712, 718, 719, 720, 723, 725, 741, 781, 784, 798, 808, 810, 811, 814, 826, 829, 830, 853, 897, 997, 1063, 1085, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1120, 1136, 1137, 1143, 1147, 1179, 1196, 1215], "env": [9, 147], "back": [9, 78, 169, 255, 293, 543, 635, 741, 812, 853, 862, 980, 1177, 1197, 1215], "contain": [10, 37, 38, 39, 40, 57, 78, 83, 104, 105, 108, 110, 116, 118, 129, 130, 137, 138, 143, 156, 165, 183, 186, 200, 216, 220, 258, 263, 293, 303, 305, 307, 329, 330, 444, 510, 511, 592, 598, 600, 602, 604, 621, 622, 637, 658, 660, 706, 741, 758, 768, 780, 783, 803, 823, 826, 853, 856, 860, 861, 913, 1070, 1077, 1089, 1134, 1140, 1142, 1144, 1146, 1163, 1164, 1179, 1191, 1215], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 57, 58, 59, 293, 812, 833, 853], "leav": [11, 211, 293, 499, 798, 853], "directli": [11, 35, 65, 85, 116, 144, 146, 150, 232, 293, 413, 414, 415, 717, 741, 764, 853, 975, 976, 977, 1215, 1223], "json_fil": 11, "ascii": [12, 25, 605, 606, 608, 616, 637, 1147, 1148, 1150, 1158, 1179], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 57, 114, 115, 128, 293, 387, 599, 601, 605, 606, 608, 609, 610, 611, 612, 616, 617, 619, 620, 623, 624, 625, 626, 627, 628, 637, 803, 853, 856, 949, 1141, 1143, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1158, 1159, 1161, 1162, 1165, 1166, 1167, 1168, 1179], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 181, 293], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 64, 65, 66, 68, 103, 110, 114, 115, 118, 119, 128, 129, 130, 220, 249, 255, 262, 263, 293, 826, 853, 1197, 1215, 1222], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 57, 58, 59, 63, 78, 84, 85, 104, 108, 110, 114, 115, 116, 119, 120, 122, 124, 125, 126, 128, 132, 133, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 156, 157, 158, 159, 162, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 191, 193, 195, 196, 197, 199, 202, 203, 208, 209, 215, 216, 218, 220, 221, 229, 230, 231, 232, 233, 237, 241, 243, 246, 250, 252, 254, 255, 258, 259, 260, 263, 264, 266, 268, 275, 276, 278, 280, 281, 283, 286, 293, 303, 304, 305, 307, 317, 324, 326, 329, 330, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 374, 390, 392, 405, 410, 411, 412, 413, 414, 415, 431, 433, 439, 440, 441, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 457, 460, 461, 465, 471, 474, 486, 493, 497, 501, 506, 507, 509, 511, 515, 518, 520, 522, 538, 539, 540, 542, 545, 546, 551, 554, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 581, 586, 588, 589, 592, 593, 595, 598, 603, 613, 614, 615, 619, 620, 622, 629, 630, 631, 651, 654, 657, 658, 659, 660, 661, 664, 667, 668, 673, 676, 680, 685, 686, 687, 688, 689, 700, 701, 703, 714, 717, 723, 728, 729, 731, 732, 741, 758, 760, 761, 762, 763, 764, 770, 772, 779, 780, 781, 782, 783, 784, 788, 789, 791, 793, 794, 803, 808, 813, 816, 818, 823, 824, 826, 829, 837, 838, 840, 842, 843, 845, 848, 853, 856, 860, 861, 862, 872, 879, 886, 889, 892, 895, 896, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 932, 952, 954, 967, 973, 975, 976, 977, 984, 990, 997, 998, 999, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1020, 1024, 1025, 1035, 1038, 1050, 1057, 1061, 1065, 1077, 1083, 1086, 1087, 1089, 1091, 1092, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1115, 1118, 1123, 1128, 1130, 1134, 1135, 1137, 1140, 1145, 1155, 1156, 1157, 1161, 1162, 1164, 1171, 1172, 1173, 1196, 1197, 1200, 1203, 1205, 1206, 1215, 1222], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 110], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 57, 113, 114, 115, 116, 128, 134, 168, 181, 199, 211, 231, 232, 251, 291, 293, 391, 394, 397, 522, 629, 630, 631, 634, 690, 771, 777, 798, 812, 833, 853, 956, 959, 1171, 1172, 1173, 1176, 1214], "style": [12, 25, 40, 116, 126, 133, 220, 293], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 300, 601, 614, 625, 741, 856, 1143, 1156], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 300, 595, 601, 741, 1137, 1143, 1193, 1215], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 60, 63, 78, 80, 82, 86, 104, 106, 134, 144, 158, 159, 161, 162, 163, 166, 170, 171, 175, 180, 181, 182, 183, 193, 194, 201, 202, 207, 208, 209, 210, 214, 220, 221, 222, 242, 243, 244, 246, 265, 268, 272, 276, 278, 280, 281, 282, 283, 285, 286, 293, 299, 302, 309, 310, 311, 312, 313, 314, 333, 336, 337, 341, 342, 343, 355, 356, 357, 360, 361, 392, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 425, 426, 431, 433, 438, 448, 450, 451, 452, 454, 455, 457, 471, 483, 502, 503, 504, 506, 512, 513, 514, 525, 528, 530, 536, 537, 538, 539, 544, 548, 551, 552, 553, 554, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 590, 591, 646, 647, 650, 655, 665, 666, 669, 670, 671, 673, 675, 691, 692, 706, 709, 710, 721, 722, 730, 737, 741, 761, 767, 773, 774, 779, 780, 787, 788, 789, 796, 797, 804, 818, 819, 827, 829, 831, 834, 838, 840, 842, 843, 844, 845, 847, 848, 853, 856, 864, 865, 866, 867, 868, 869, 893, 894, 901, 902, 903, 912, 913, 914, 917, 918, 954, 975, 976, 977, 982, 986, 993, 996, 1035, 1085, 1089, 1091, 1100, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1126, 1127, 1131, 1189, 1190, 1202, 1215, 1223], "multi": [13, 40, 114, 115, 293, 416, 600, 741, 1142], "automat": [13, 65, 68, 103, 105, 106, 107, 109, 110, 114, 115, 116, 117, 119, 123, 124, 128, 132, 144, 146, 148, 235, 268, 293, 332, 510, 624, 625, 626, 741, 810, 829, 853, 1070, 1166, 1167, 1168, 1215, 1222], "turn": [13, 57, 58, 59, 84, 85, 114, 115, 128, 635, 763, 764, 770, 772, 793, 794, 803, 853, 1177], "struct": [13, 110, 216, 235, 257, 261, 268, 293, 356, 499, 510, 551, 560, 561, 602, 603, 620, 621, 654, 676, 677, 679, 680, 681, 705, 741, 810, 825, 829, 841, 853, 913, 1063, 1089, 1097, 1144, 1145, 1160, 1162, 1163, 1215], "v": [13, 14, 45, 65, 66, 167, 293, 577, 741, 1114, 1215], "v2": [13, 120, 131], "out": [13, 19, 57, 58, 59, 110, 136, 229, 232, 293, 327, 474, 475, 497, 593, 596, 731, 808, 853, 881, 1038, 1039, 1061, 1135, 1138], "separ": [14, 15, 29, 32, 37, 57, 112, 114, 115, 128, 218, 220, 252, 259, 261, 293, 307, 472, 478, 511, 599, 672, 676, 677, 680, 681, 741, 825, 853, 1036, 1042, 1141, 1184, 1192, 1215], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 59, 63, 115, 182, 183, 184, 185, 186, 187, 200, 216, 218, 220, 229, 232, 262, 264, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 301, 355, 418, 424, 429, 432, 471, 511, 519, 521, 543, 554, 561, 562, 588, 589, 593, 600, 601, 602, 614, 654, 706, 741, 779, 780, 781, 782, 783, 784, 808, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853, 856, 912, 1035, 1098, 1135, 1142, 1143, 1144, 1156, 1203, 1215], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 856], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 114, 115, 137, 138, 139, 140, 183, 184, 186, 187, 201, 202, 229, 263, 293, 356, 413, 414, 415, 439, 487, 488, 489, 490, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 586, 616, 670, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 788, 789, 808, 826, 853, 913, 975, 976, 977, 997, 1051, 1052, 1053, 1054, 1089, 1114, 1128, 1158, 1215], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 57, 293, 853], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 115, 136, 137, 139, 166, 181, 182, 200, 203, 253, 271, 293, 437, 522, 741, 763, 786, 853, 1005, 1194, 1215, 1223], "876": 14, "543": 14, "010": 14, "101": [14, 32, 364, 1223], "000": [14, 15, 32, 40, 293, 1223], "123": [14, 595, 601, 615, 637, 856, 1137, 1143, 1157, 1179, 1193, 1215], "456": [14, 15, 364, 856, 922, 1193, 1215], "780": 14, "precis": [15, 16, 37, 39, 40, 48, 49, 57, 116, 199, 231, 232, 251, 293, 363, 632, 853, 856, 921, 1174], "control": [15, 16, 40, 68, 85, 86, 142, 293, 764, 770, 853], "number": [15, 16, 17, 18, 19, 22, 30, 37, 40, 45, 57, 59, 69, 78, 88, 97, 103, 105, 107, 109, 112, 114, 115, 117, 119, 123, 124, 125, 128, 132, 133, 135, 142, 144, 145, 147, 148, 156, 158, 167, 168, 170, 171, 181, 189, 199, 200, 203, 204, 215, 216, 233, 239, 240, 244, 247, 258, 262, 265, 275, 277, 287, 293, 318, 325, 331, 344, 355, 356, 358, 372, 375, 380, 382, 392, 406, 407, 409, 413, 414, 415, 419, 421, 427, 435, 448, 450, 458, 459, 468, 476, 480, 481, 486, 491, 496, 499, 547, 551, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 579, 580, 582, 591, 605, 606, 607, 610, 614, 620, 621, 632, 643, 649, 655, 673, 674, 675, 690, 698, 718, 719, 722, 726, 730, 741, 758, 761, 771, 772, 773, 774, 785, 792, 803, 814, 815, 819, 821, 823, 827, 837, 839, 849, 853, 885, 896, 912, 913, 915, 930, 933, 942, 944, 954, 968, 969, 971, 974, 975, 976, 977, 981, 983, 992, 1004, 1021, 1022, 1032, 1040, 1044, 1045, 1050, 1055, 1060, 1063, 1077, 1078, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1120, 1121, 1124, 1132, 1147, 1148, 1149, 1152, 1156, 1162, 1163, 1174, 1186, 1199, 1204, 1215, 1223], "place": [15, 16, 37, 57, 156, 164, 169, 191, 192, 193, 220, 225, 227, 232, 240, 243, 258, 266, 293, 317, 478, 580, 588, 741, 758, 815, 818, 823, 853, 862, 872, 980, 1042, 1092, 1121, 1130, 1215], "float": [15, 16, 37, 40, 51, 52, 57, 119, 134, 137, 138, 139, 140, 141, 144, 146, 152, 162, 167, 170, 202, 222, 233, 240, 285, 293, 337, 356, 360, 361, 392, 410, 411, 412, 413, 414, 415, 420, 425, 431, 433, 438, 441, 445, 448, 450, 451, 452, 457, 465, 486, 502, 506, 512, 525, 536, 537, 538, 539, 548, 551, 552, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 650, 669, 709, 710, 715, 717, 722, 730, 741, 773, 789, 804, 815, 816, 847, 853, 856, 886, 894, 913, 914, 916, 917, 918, 954, 973, 974, 975, 976, 977, 982, 986, 993, 1004, 1020, 1029, 1030, 1031, 1050, 1066, 1073, 1074, 1080, 1081, 1088, 1089, 1090, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1116, 1117, 1128, 1132, 1185, 1196, 1204, 1215, 1223], "point": [15, 16, 40, 51, 52, 144, 146, 170, 183, 186, 203, 293, 337, 356, 360, 392, 420, 425, 448, 450, 486, 511, 574, 576, 741, 773, 780, 783, 793, 794, 806, 853, 894, 913, 917, 954, 982, 986, 1004, 1050, 1089, 1110, 1112, 1196, 1215], "standard": [15, 40, 244, 254, 293, 375, 414, 571, 586, 591, 604, 722, 737, 741, 819, 853, 933, 976, 1128, 1132, 1146, 1215, 1223], "behaviour": [15, 78, 86, 165, 293, 593, 600, 601, 614, 650, 741, 768, 853, 1135, 1142, 1143, 1156], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 57, 59, 68, 69, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 119, 120, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 144, 146, 153, 156, 166, 167, 169, 171, 175, 183, 184, 186, 187, 201, 205, 219, 229, 230, 232, 235, 236, 239, 243, 252, 254, 258, 260, 263, 269, 293, 338, 413, 414, 415, 421, 491, 499, 510, 520, 547, 561, 562, 579, 588, 589, 605, 606, 624, 625, 626, 629, 667, 676, 680, 694, 741, 758, 774, 780, 781, 783, 784, 788, 793, 794, 808, 810, 811, 814, 818, 823, 824, 826, 830, 853, 862, 897, 974, 975, 976, 977, 980, 983, 1055, 1070, 1098, 1113, 1116, 1120, 1147, 1148, 1166, 1167, 1168, 1171, 1192, 1215], "larger": [15, 57, 58, 59, 673, 763, 853], "should": [15, 38, 40, 57, 58, 59, 86, 103, 105, 107, 109, 118, 123, 124, 126, 128, 132, 133, 134, 141, 142, 146, 156, 163, 199, 202, 205, 230, 231, 232, 251, 252, 258, 261, 279, 293, 301, 335, 355, 408, 416, 448, 450, 471, 511, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 577, 586, 654, 690, 692, 699, 703, 706, 718, 719, 731, 741, 758, 767, 772, 788, 789, 794, 812, 816, 818, 823, 825, 833, 853, 856, 890, 912, 970, 1035, 1071, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1114, 1128, 1203, 1215], "ensur": [15, 40, 117, 143, 144, 146, 182, 185, 218, 230, 293, 439, 741, 779, 782, 793, 794, 853, 856, 1196, 1215], "awar": [15, 199, 231, 232, 251, 293, 772, 853, 1173], "both": [15, 30, 37, 57, 69, 87, 88, 183, 184, 186, 187, 201, 202, 212, 229, 230, 263, 293, 306, 338, 356, 416, 439, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 737, 741, 752, 780, 781, 783, 784, 788, 789, 799, 808, 826, 853, 897, 997, 1007, 1215], "limit": [15, 16, 59, 116, 117, 128, 171, 293, 325, 339, 340, 421, 427, 741, 774, 785, 853, 898, 899, 983, 1215], "represent": [15, 43, 44, 253, 293, 335, 368, 372, 375, 376, 378, 380, 382, 385, 388, 389, 392, 406, 407, 409, 648, 741, 770, 791, 853, 890, 891, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 968, 969, 971, 1194, 1198, 1215], "look": [15, 183, 293, 326, 499, 509, 741, 780, 853, 880], "appli": [15, 25, 37, 40, 57, 63, 86, 128, 141, 144, 146, 175, 205, 219, 279, 293, 366, 367, 368, 372, 374, 375, 376, 378, 380, 382, 385, 388, 389, 392, 395, 406, 407, 409, 414, 415, 507, 509, 511, 547, 563, 565, 566, 568, 572, 614, 629, 630, 631, 634, 676, 677, 680, 681, 694, 704, 705, 706, 716, 731, 741, 785, 792, 793, 794, 802, 841, 853, 897, 924, 925, 926, 930, 932, 933, 937, 939, 942, 944, 947, 950, 951, 954, 957, 968, 969, 971, 976, 977, 1071, 1099, 1101, 1102, 1104, 1108, 1156, 1171, 1172, 1173, 1176, 1215], "float64": [15, 37, 40, 57, 106, 114, 144, 166, 167, 175, 234, 255, 268, 293, 309, 310, 311, 312, 313, 314, 333, 341, 342, 343, 357, 392, 416, 448, 450, 553, 584, 585, 646, 647, 692, 714, 717, 732, 741, 769, 809, 829, 853, 856, 954, 1197, 1202, 1215], "doe": [15, 37, 39, 57, 78, 86, 97, 103, 105, 106, 107, 109, 110, 114, 115, 116, 118, 119, 123, 124, 128, 129, 132, 134, 159, 169, 188, 200, 201, 230, 231, 232, 260, 268, 293, 332, 408, 434, 499, 510, 625, 626, 652, 693, 702, 737, 741, 762, 772, 788, 794, 824, 829, 853, 862, 900, 970, 980, 990, 991, 1070, 1123, 1205, 1215], "cover": 15, "nativ": [15, 114, 116, 119, 120, 122, 126, 142, 199, 205, 231, 232, 251, 279, 293, 511, 706, 741, 747, 841, 1071, 1215, 1223], "level": [15, 40, 45, 59, 128, 131, 132, 133, 144, 175, 205, 216, 293, 422, 741, 785, 792, 853], "larg": [15, 16, 19, 39, 78, 116, 293], "maximum": [15, 31, 37, 57, 114, 115, 128, 134, 142, 143, 144, 146, 181, 183, 206, 207, 293, 462, 512, 536, 545, 554, 707, 708, 741, 780, 795, 853, 934, 1026, 1072, 1080, 1086, 1091, 1215], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 78, 103, 104, 107, 108, 128, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 162, 163, 165, 181, 183, 200, 202, 211, 218, 220, 252, 254, 255, 262, 264, 293, 357, 362, 363, 364, 365, 368, 370, 371, 372, 374, 375, 376, 380, 382, 383, 384, 387, 388, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 564, 565, 566, 568, 571, 572, 573, 665, 666, 685, 686, 688, 690, 728, 729, 737, 741, 753, 760, 764, 766, 767, 768, 780, 789, 794, 798, 812, 853, 901, 903, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1001, 1006, 1010, 1011, 1016, 1100, 1126, 1189, 1215, 1223], "pi": [15, 357, 741, 901, 903, 1126, 1189, 1215], "e": [15, 36, 37, 39, 41, 42, 45, 57, 104, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 134, 162, 181, 189, 247, 249, 254, 262, 293, 300, 307, 410, 416, 439, 502, 510, 511, 516, 517, 519, 520, 521, 522, 523, 581, 586, 625, 626, 692, 706, 731, 741, 766, 791, 805, 806, 853, 856, 973, 997, 1115, 1128, 1196, 1215, 1223], "const": 15, "15": [15, 40, 136, 143, 183, 193, 205, 229, 293, 355, 358, 372, 380, 384, 391, 405, 547, 562, 572, 677, 717, 728, 741, 780, 808, 853, 912, 915, 953, 967, 1215], "141592653589793": 15, "718281828459045": [15, 410, 502, 741, 973, 1066, 1215], "align": [15, 20, 21, 40, 78, 86, 293], "numer": [15, 21, 37, 40, 57, 157, 163, 202, 211, 220, 262, 293, 300, 338, 426, 439, 504, 526, 528, 548, 557, 581, 602, 637, 640, 650, 741, 753, 760, 767, 789, 798, 853, 856, 897, 914, 997, 1014, 1115, 1122, 1144, 1179, 1196, 1215, 1223], "order": [15, 40, 57, 58, 59, 63, 65, 78, 84, 106, 116, 135, 137, 138, 156, 165, 172, 182, 183, 184, 185, 186, 187, 201, 218, 219, 220, 229, 233, 237, 243, 254, 258, 260, 264, 293, 317, 324, 335, 360, 361, 422, 470, 486, 493, 501, 554, 562, 566, 567, 568, 569, 571, 573, 576, 577, 578, 588, 589, 625, 626, 627, 628, 639, 651, 652, 654, 667, 741, 752, 758, 768, 775, 779, 780, 781, 782, 783, 784, 788, 798, 808, 813, 818, 823, 824, 853, 872, 879, 890, 892, 917, 918, 984, 1015, 1034, 1050, 1057, 1065, 1091, 1096, 1112, 1114, 1118, 1130, 1182, 1200, 1201, 1203, 1215, 1223], "cleanli": [15, 181, 293], "line": [15, 25, 40, 114, 115, 119, 128, 181, 195, 197, 293, 600, 1142], "up": [15, 40, 70, 117, 199, 202, 231, 232, 251, 293, 307, 337, 511, 741, 788, 789, 794, 853, 856, 894, 1215], "xx": [15, 79, 81, 143, 146, 856], "yy": [15, 79, 81, 143, 146, 856], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 59, 104, 136, 144, 229, 293, 302, 383, 384, 387, 391, 405, 438, 544, 554, 562, 564, 572, 587, 657, 724, 729, 741, 763, 764, 785, 792, 803, 808, 821, 853, 856, 949, 953, 967, 1071, 1100, 1215], "111": 15, "100": [15, 22, 32, 40, 106, 109, 114, 115, 123, 128, 132, 239, 293, 579, 603, 632, 741, 814, 853, 1101, 1102, 1104, 1120, 1145, 1174, 1215, 1223], "988": 15, "44": [15, 212, 293, 359, 741, 799, 853], "444": 15, "23": [15, 136, 183, 229, 293, 364, 368, 372, 380, 388, 391, 407, 562, 565, 566, 568, 571, 572, 573, 687, 690, 727, 728, 729, 741, 780, 808, 853, 856, 922, 930, 1223], "789": [15, 856], "fmt": [16, 437, 695, 741, 786, 853], "floatfmt": 16, "mix": [16, 914, 1173, 1215], "how": [16, 39, 40, 78, 86, 106, 109, 117, 133, 165, 201, 220, 262, 263, 293, 335, 358, 390, 391, 405, 438, 466, 467, 468, 543, 557, 570, 603, 629, 631, 687, 731, 741, 768, 788, 826, 853, 890, 915, 952, 953, 967, 1030, 1031, 1032, 1106, 1145, 1171, 1173, 1215], "full": [16, 48, 78, 83, 86, 114, 115, 118, 128, 129, 130, 134, 183, 184, 186, 187, 229, 293, 562, 629, 630, 631, 634, 741, 780, 781, 783, 784, 793, 794, 808, 853, 856, 1171, 1172, 1173, 1176, 1223], "scientif": 16, "notat": [16, 40, 293], "small": [16, 117, 143, 203, 293, 391, 772, 853, 1223], "2304980958725870923": 16, "1e6": 16, "1e": [16, 137, 138, 139, 140], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 403, 965], "00000001": [16, 657, 741], "plai": [17, 672], "sam": 17, "As": [17, 69, 87, 88, 103, 105, 106, 107, 109, 119, 123, 124, 132, 293, 499, 853], "time": [17, 39, 48, 50, 63, 68, 83, 84, 85, 126, 128, 169, 183, 184, 186, 187, 202, 229, 264, 293, 331, 362, 363, 364, 365, 366, 370, 371, 387, 390, 391, 394, 396, 397, 405, 408, 464, 465, 499, 562, 565, 566, 567, 568, 569, 571, 572, 573, 582, 629, 631, 634, 648, 649, 671, 672, 685, 686, 687, 688, 689, 690, 696, 728, 729, 741, 763, 764, 780, 781, 783, 784, 789, 803, 808, 853, 856, 862, 885, 920, 921, 922, 923, 928, 929, 949, 952, 953, 956, 958, 959, 967, 970, 980, 1028, 1030, 1031, 1124, 1171, 1173, 1176, 1198, 1199, 1215, 1223], "goe": 17, "By": [17, 19, 35, 78, 114, 115, 128, 183, 202, 229, 239, 244, 263, 264, 265, 293, 387, 391, 405, 491, 562, 565, 566, 567, 568, 569, 571, 572, 573, 579, 591, 655, 673, 675, 685, 686, 688, 689, 690, 703, 722, 728, 729, 730, 741, 763, 780, 789, 808, 814, 819, 827, 853, 949, 953, 967, 1055, 1120, 1132, 1196, 1204, 1215], "begin": [17, 40, 293, 413, 414, 415, 600, 741, 975, 976, 977, 1142, 1215], "beauti": 17, "friendship": 17, "len_byt": [17, 606, 607, 1148, 1149], "len": [17, 40, 142, 144, 200, 293, 345, 481, 511, 741, 1045, 1061, 1215], "u32": [17, 63, 116, 154, 157, 217, 270, 275, 284, 286, 293, 301, 308, 315, 316, 317, 318, 319, 344, 345, 368, 372, 376, 380, 382, 388, 389, 392, 406, 407, 458, 462, 463, 467, 480, 510, 529, 541, 554, 561, 565, 566, 568, 571, 572, 573, 577, 595, 605, 606, 648, 652, 658, 663, 667, 668, 674, 713, 741, 756, 760, 801, 832, 837, 846, 848, 853, 872, 873, 874, 886, 891, 926, 930, 937, 939, 942, 944, 947, 950, 951, 954, 968, 969, 993, 1044, 1091, 1098, 1137, 1147, 1148, 1198, 1201, 1203, 1215], "37": 17, "beaut": 17, "48": [17, 229, 293, 562, 741, 808, 853], "fmt_str_length": 17, "50": [17, 32, 40, 162, 169, 181, 293, 338, 391, 405, 741, 897, 914, 967, 1215], "element": [18, 19, 30, 143, 146, 156, 198, 220, 230, 244, 258, 265, 293, 307, 309, 310, 311, 312, 313, 314, 331, 336, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 360, 361, 417, 418, 422, 434, 444, 458, 466, 467, 469, 470, 471, 472, 477, 480, 481, 487, 488, 489, 490, 495, 500, 503, 504, 511, 543, 544, 554, 557, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 583, 584, 585, 590, 591, 620, 621, 632, 646, 647, 649, 655, 673, 675, 718, 719, 722, 730, 741, 758, 818, 819, 823, 827, 853, 863, 864, 865, 866, 867, 868, 869, 885, 893, 896, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 917, 918, 978, 979, 984, 992, 1005, 1019, 1021, 1022, 1030, 1031, 1033, 1034, 1035, 1036, 1041, 1044, 1045, 1051, 1052, 1053, 1054, 1059, 1064, 1067, 1068, 1071, 1085, 1091, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1114, 1125, 1126, 1127, 1131, 1132, 1162, 1163, 1174, 1186, 1189, 1190, 1194, 1199, 1200, 1204, 1215], "empti": [18, 36, 37, 57, 94, 106, 114, 115, 119, 125, 128, 158, 159, 183, 196, 211, 293, 703, 720, 761, 762, 780, 798, 853, 856, 896, 900, 1000, 1215], "alwai": [18, 37, 39, 57, 63, 114, 137, 138, 139, 140, 143, 182, 185, 205, 279, 293, 519, 629, 685, 731, 794, 853, 862, 1071, 1171, 1215, 1222, 1223], "neg": [18, 49, 135, 183, 184, 186, 187, 189, 204, 229, 239, 240, 242, 247, 293, 491, 492, 547, 562, 579, 580, 587, 618, 741, 780, 781, 783, 784, 808, 814, 815, 817, 832, 853, 992, 1022, 1055, 1056, 1120, 1121, 1129, 1160, 1186, 1215], "result": [18, 37, 43, 44, 45, 57, 58, 59, 78, 86, 107, 109, 116, 117, 118, 119, 128, 131, 133, 134, 146, 169, 183, 186, 188, 201, 216, 220, 229, 232, 239, 240, 255, 264, 272, 293, 391, 394, 397, 405, 413, 414, 415, 419, 434, 455, 498, 499, 509, 511, 543, 551, 558, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 578, 579, 580, 619, 620, 631, 650, 676, 677, 680, 681, 685, 686, 687, 688, 689, 690, 705, 714, 717, 718, 719, 732, 741, 759, 780, 781, 783, 784, 788, 793, 794, 803, 808, 812, 814, 815, 833, 834, 853, 862, 913, 953, 956, 959, 967, 975, 976, 977, 980, 991, 1020, 1062, 1071, 1089, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1118, 1120, 1121, 1161, 1162, 1173, 1196, 1215, 1222, 1223], "being": [18, 85, 114, 115, 116, 128, 134, 157, 168, 252, 262, 263, 293, 307, 355, 391, 565, 566, 567, 568, 569, 571, 572, 573, 691, 741, 760, 764, 771, 772, 853, 892, 912, 953, 993, 1089, 1215, 1223], "content": [18, 582, 741, 1124, 1215], "final": [18, 40, 78, 133, 293, 413, 414, 415, 741, 772, 853, 975, 976, 977, 1215], "item": [18, 86, 115, 181, 230, 233, 293, 358, 418, 465, 468, 475, 478, 486, 576, 621, 741, 915, 979, 1029, 1032, 1039, 1042, 1050, 1112, 1163, 1215], "num": [18, 40, 257, 293, 439, 741, 997, 1215], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 59, 63, 78, 86, 110, 117, 128, 136, 144, 146, 159, 169, 180, 181, 183, 189, 191, 193, 194, 215, 219, 220, 221, 225, 227, 229, 235, 247, 268, 272, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 302, 306, 315, 316, 317, 319, 338, 344, 346, 349, 358, 362, 364, 370, 383, 384, 390, 391, 405, 408, 434, 435, 438, 444, 454, 458, 459, 468, 469, 476, 477, 492, 495, 496, 500, 503, 519, 521, 530, 544, 547, 562, 587, 643, 657, 670, 676, 685, 688, 691, 694, 696, 698, 703, 705, 726, 729, 741, 763, 764, 780, 785, 787, 792, 802, 803, 808, 810, 820, 821, 829, 834, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 856, 897, 915, 920, 922, 928, 952, 967, 970, 973, 992, 1005, 1022, 1032, 1033, 1040, 1041, 1056, 1059, 1060, 1064, 1067, 1071, 1085, 1113, 1116, 1186, 1215, 1223], "size": [19, 45, 59, 114, 115, 116, 142, 143, 144, 146, 148, 167, 262, 293, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 664, 700, 701, 718, 719, 741, 763, 853, 974, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1215, 1223], "overwrit": [19, 38, 39, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 132, 152, 263, 293, 302, 741, 772, 853], "chunk": [19, 59, 112, 114, 115, 126, 128, 131, 132, 133, 144, 146, 169, 200, 215, 293, 306, 555, 741, 853, 862, 895, 980, 989, 1077, 1092, 1191, 1215], "stream": [19, 41, 42, 57, 58, 59, 84, 85, 122, 156, 182, 185, 201, 258, 260, 293, 758, 763, 764, 770, 772, 779, 782, 788, 793, 794, 798, 803, 816, 818, 823, 824, 853], "engin": [19, 38, 116, 117, 119, 148, 182, 185, 201, 205, 260, 279, 293, 779, 782, 788, 793, 794, 798, 824, 841, 853, 1071, 1215], "determin": [19, 37, 40, 57, 76, 78, 86, 106, 109, 114, 115, 116, 119, 125, 126, 128, 133, 135, 153, 163, 175, 183, 186, 199, 200, 205, 220, 229, 259, 264, 293, 335, 374, 390, 391, 405, 499, 510, 519, 551, 557, 565, 566, 567, 568, 569, 571, 572, 573, 586, 603, 629, 631, 632, 687, 714, 717, 732, 741, 780, 783, 808, 853, 890, 932, 952, 953, 967, 993, 1063, 1070, 1089, 1128, 1145, 1171, 1173, 1174, 1215], "schema": [19, 33, 36, 39, 63, 79, 80, 81, 86, 98, 99, 101, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 133, 142, 144, 153, 158, 159, 166, 167, 200, 205, 212, 216, 254, 293, 320, 321, 322, 323, 324, 498, 499, 519, 603, 657, 723, 741, 761, 762, 769, 793, 794, 799, 812, 836, 841, 853, 856, 877, 900, 1145, 1215], "thread": [19, 37, 57, 85, 112, 114, 115, 117, 148, 293, 307, 471, 511, 741, 764, 853, 1035], "pool": [19, 85, 148, 764, 853], "For": [19, 39, 40, 117, 118, 119, 129, 130, 165, 169, 201, 202, 229, 279, 293, 413, 414, 415, 499, 511, 520, 556, 586, 593, 600, 601, 602, 614, 676, 680, 690, 694, 695, 737, 741, 768, 789, 808, 841, 853, 862, 975, 976, 977, 980, 1007, 1093, 1128, 1135, 1142, 1143, 1144, 1156, 1196, 1215], "some": [19, 35, 39, 40, 69, 88, 106, 114, 115, 116, 119, 128, 152, 165, 293, 737, 768, 853, 1005, 1215, 1223], "dataset": [19, 45, 114, 115, 126, 128, 133, 134, 201, 293, 455, 741, 753, 788, 793, 794, 853, 1020, 1215], "esp": 19, "have": [19, 35, 39, 40, 48, 69, 78, 88, 104, 113, 114, 115, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 133, 144, 146, 169, 199, 223, 229, 231, 232, 251, 293, 355, 413, 414, 415, 511, 520, 554, 562, 602, 741, 766, 798, 805, 808, 816, 832, 853, 856, 862, 912, 975, 976, 977, 980, 990, 1091, 1173, 1215, 1223], "too": [19, 561, 741, 772, 853], "optimist": 19, "lead": [19, 45, 110, 134, 183, 184, 186, 187, 209, 229, 239, 246, 293, 429, 432, 491, 509, 511, 562, 578, 579, 609, 623, 624, 626, 644, 673, 741, 780, 781, 783, 784, 793, 794, 808, 814, 836, 841, 853, 1055, 1071, 1118, 1120, 1151, 1165, 1166, 1168, 1215], "memori": [19, 59, 86, 103, 104, 107, 108, 109, 114, 115, 116, 119, 120, 126, 128, 131, 132, 133, 152, 169, 205, 232, 241, 279, 293, 543, 555, 581, 741, 763, 853, 862, 980, 1071, 1092, 1122, 1123, 1215], "error": [19, 39, 85, 114, 115, 128, 157, 220, 230, 293, 302, 327, 333, 454, 474, 478, 497, 530, 593, 596, 600, 602, 603, 604, 629, 630, 631, 634, 741, 760, 764, 836, 841, 853, 881, 886, 1038, 1042, 1061, 1135, 1138, 1142, 1144, 1145, 1146, 1171, 1172, 1173, 1176, 1215], "row": [19, 25, 30, 37, 40, 43, 45, 57, 59, 78, 79, 81, 86, 95, 97, 102, 106, 107, 109, 110, 114, 115, 116, 119, 120, 122, 123, 126, 128, 131, 132, 133, 134, 137, 138, 142, 144, 153, 156, 158, 165, 169, 172, 175, 177, 181, 182, 183, 185, 188, 189, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 216, 232, 233, 242, 247, 248, 251, 253, 258, 260, 262, 263, 270, 277, 279, 287, 293, 318, 418, 430, 434, 435, 459, 472, 499, 543, 544, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 587, 589, 599, 603, 643, 645, 664, 667, 680, 681, 694, 698, 700, 701, 716, 718, 719, 726, 731, 741, 758, 761, 763, 768, 772, 775, 776, 778, 780, 785, 788, 789, 790, 792, 794, 798, 817, 821, 822, 823, 824, 826, 832, 839, 841, 849, 853, 862, 979, 980, 988, 992, 1036, 1085, 1095, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1129, 1141, 1145, 1186, 1188, 1215, 1223], "per": [19, 37, 40, 57, 142, 144, 156, 181, 216, 217, 236, 243, 258, 269, 282, 284, 285, 293, 307, 332, 471, 474, 475, 497, 511, 589, 654, 667, 741, 758, 811, 818, 823, 830, 844, 846, 847, 853, 1035, 1038, 1039, 1061, 1203, 1215], "everi": [19, 37, 57, 114, 115, 128, 177, 183, 186, 248, 251, 264, 293, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 391, 405, 418, 430, 462, 463, 468, 472, 475, 476, 487, 492, 496, 599, 645, 676, 677, 680, 681, 741, 772, 778, 780, 783, 822, 853, 904, 905, 906, 907, 908, 909, 910, 911, 912, 953, 967, 979, 988, 990, 1026, 1027, 1032, 1036, 1039, 1040, 1051, 1056, 1060, 1141, 1188, 1215], "process": [19, 37, 57, 58, 59, 114, 115, 116, 128, 148, 293, 763, 853], "liter": [20, 21, 25, 39, 63, 85, 116, 119, 125, 144, 145, 146, 147, 181, 199, 206, 208, 213, 215, 218, 230, 231, 235, 236, 239, 245, 250, 263, 268, 269, 293, 302, 326, 338, 364, 411, 412, 419, 426, 431, 433, 439, 457, 506, 510, 526, 528, 538, 539, 548, 593, 595, 614, 615, 640, 650, 659, 661, 664, 668, 670, 671, 672, 679, 683, 684, 685, 686, 687, 688, 689, 700, 701, 703, 708, 712, 714, 717, 720, 723, 725, 727, 728, 729, 732, 741, 764, 774, 810, 811, 814, 826, 829, 830, 853, 856, 860, 861, 880, 897, 913, 922, 981, 997, 1089, 1113, 1116, 1120, 1135, 1137, 1156, 1157, 1215, 1222], "left": [20, 21, 40, 65, 78, 137, 138, 139, 140, 183, 184, 186, 187, 201, 202, 229, 263, 293, 356, 413, 414, 415, 438, 439, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 608, 648, 670, 676, 677, 680, 681, 685, 686, 688, 689, 694, 716, 728, 729, 731, 741, 780, 781, 783, 784, 788, 789, 808, 826, 853, 913, 975, 976, 977, 997, 1089, 1114, 1150, 1198, 1215], "center": [20, 21, 40, 293, 413, 414, 415, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 741, 975, 976, 977, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1215], "cell": [20, 21, 40, 293], "valueerror": [20, 25], "recognis": [20, 21, 25, 141], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 39, 40, 57, 78, 110, 119, 144, 157, 162, 181, 183, 184, 186, 187, 200, 202, 229, 264, 293, 362, 363, 364, 365, 366, 368, 370, 371, 372, 374, 375, 376, 378, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 465, 562, 565, 566, 567, 568, 569, 571, 572, 573, 629, 631, 648, 685, 686, 688, 689, 690, 696, 703, 728, 729, 741, 760, 780, 781, 783, 784, 789, 808, 853, 856, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 939, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1016, 1029, 1030, 1031, 1080, 1081, 1113, 1117, 1171, 1173, 1198, 1215], "date": [21, 40, 48, 78, 114, 115, 117, 119, 125, 128, 134, 137, 138, 139, 140, 144, 157, 162, 181, 183, 184, 186, 187, 200, 202, 229, 293, 363, 364, 365, 368, 371, 374, 375, 376, 382, 383, 384, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 465, 562, 565, 566, 567, 568, 569, 571, 572, 573, 629, 630, 648, 685, 686, 688, 689, 696, 703, 727, 741, 760, 780, 781, 783, 784, 789, 808, 853, 856, 921, 922, 923, 926, 929, 930, 932, 933, 934, 935, 936, 937, 941, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 971, 1016, 1029, 1030, 1031, 1080, 1081, 1113, 1117, 1171, 1172, 1198, 1215], "333": [21, 575, 741, 1111, 1215], "mno": [21, 25], "2023": [21, 40, 110, 136, 200, 293, 364, 690, 703, 856, 922], "29": [21, 144, 362, 383, 920, 945], "2001": [21, 363, 368, 371, 372, 374, 380, 382, 387, 388, 389, 391, 396, 405, 406, 407, 408, 565, 566, 568, 571, 572, 573, 629, 741, 856, 921, 926, 929, 930, 932, 934, 935, 936, 937, 939, 941, 942, 944, 947, 949, 950, 951, 953, 958, 967, 968, 969, 970, 971, 1171], "null": [21, 37, 39, 57, 65, 78, 86, 106, 114, 115, 124, 128, 134, 152, 156, 158, 162, 165, 171, 175, 176, 194, 201, 208, 209, 210, 217, 220, 222, 239, 240, 243, 244, 245, 246, 250, 255, 258, 261, 263, 265, 268, 275, 293, 303, 305, 306, 307, 317, 325, 327, 338, 344, 346, 349, 358, 360, 361, 387, 398, 399, 400, 401, 402, 403, 404, 412, 413, 414, 415, 416, 419, 420, 421, 427, 438, 448, 450, 451, 452, 458, 460, 461, 468, 470, 473, 474, 475, 479, 480, 487, 488, 489, 490, 491, 497, 499, 510, 511, 539, 540, 541, 544, 555, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 580, 581, 583, 588, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 611, 612, 613, 618, 620, 621, 622, 637, 638, 639, 648, 658, 659, 660, 661, 670, 671, 672, 674, 679, 692, 703, 708, 712, 718, 719, 723, 725, 731, 741, 758, 761, 768, 774, 787, 788, 801, 812, 814, 815, 818, 823, 825, 826, 829, 831, 837, 853, 860, 861, 863, 872, 881, 896, 897, 915, 917, 918, 960, 961, 962, 963, 964, 965, 966, 975, 976, 977, 981, 983, 990, 996, 1012, 1013, 1021, 1024, 1025, 1032, 1034, 1038, 1044, 1052, 1054, 1055, 1061, 1063, 1071, 1084, 1085, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1115, 1120, 1121, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1154, 1155, 1160, 1162, 1163, 1164, 1179, 1194, 1196, 1197, 1198, 1205, 1215, 1222, 1223], "07": [21, 364, 390, 391, 405, 629, 685, 688, 696, 856, 922, 952, 1171], "05": [21, 134, 137, 138, 139, 140, 144, 157, 202, 264, 293, 364, 365, 390, 392, 394, 397, 398, 685, 688, 760, 789, 853, 856, 922, 923, 924, 925, 952, 953, 956, 957, 959, 960, 967], "visibl": [22, 167, 293, 974, 1215], "eg": [22, 30, 40, 86, 117, 150, 293, 391, 629, 631, 650, 741, 990, 1171, 1173, 1215], "low": [22, 116, 148, 551, 741, 1089, 1215], "rang": [22, 40, 116, 117, 162, 167, 183, 200, 293, 357, 368, 382, 388, 389, 391, 405, 406, 438, 664, 671, 684, 685, 686, 687, 688, 689, 700, 701, 727, 728, 729, 741, 780, 853, 914, 926, 944, 950, 951, 953, 967, 968, 974, 1085, 1215], "98": [22, 193, 293, 331, 429, 432, 588, 632, 649, 741, 1174], "99": [22, 40, 170, 171, 193, 196, 263, 293, 301, 331, 419, 421, 429, 432, 588, 649, 741, 773, 774, 826, 853, 973, 981, 1215], "tbl_col": 22, "95": [22, 301, 741], "96": [22, 301, 741], "97": [22, 193, 293, 301, 741], "move": [23, 232, 293, 413, 414, 415, 565, 566, 568, 572, 741, 975, 976, 977, 1101, 1102, 1104, 1108, 1215], "inlin": [23, 232, 293, 593, 600, 601, 614, 1135, 1142, 1143, 1156], "parenthes": 23, "inform": [24, 28, 39, 83, 118, 129, 130, 133, 137, 139, 161, 293, 455, 586, 593, 600, 601, 614, 741, 803, 853, 891, 1020, 1128, 1135, 1142, 1143, 1156, 1215], "below": [24, 39, 118, 129, 130, 165, 183, 220, 293, 421, 685, 686, 688, 689, 728, 729, 731, 737, 741, 768, 780, 853], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 78, 110], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 332, 600, 604, 741, 1142, 1146], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 57, 83, 116, 118, 129, 130, 144, 156, 162, 167, 218, 232, 258, 259, 262, 263, 293, 356, 392, 439, 551, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 619, 620, 624, 625, 676, 680, 718, 719, 741, 758, 823, 826, 853, 856, 913, 914, 954, 974, 997, 1089, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1161, 1162, 1166, 1205, 1215], "divid": [25, 356, 391, 405, 413, 414, 415, 455, 551, 741, 913, 953, 967, 975, 976, 977, 1020, 1089, 1215], "same": [25, 39, 40, 67, 69, 78, 84, 85, 86, 87, 88, 120, 128, 137, 138, 139, 140, 142, 150, 182, 205, 220, 232, 243, 260, 268, 269, 272, 279, 293, 299, 306, 323, 360, 361, 429, 432, 498, 515, 518, 543, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 589, 605, 639, 741, 763, 764, 779, 793, 794, 818, 824, 829, 830, 834, 853, 858, 862, 863, 878, 913, 917, 918, 922, 1062, 1071, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1147, 1206, 1215], "dens": [25, 181, 293, 554, 741, 1091, 1215], "space": [25, 183, 293, 780, 853], "horizont": [25, 86, 175, 191, 206, 207, 208, 209, 213, 214, 245, 246, 262, 293, 659, 661, 671, 672, 676, 677, 679, 680, 681, 683, 691, 694, 708, 712, 716, 725], "markdown": 25, "compat": [25, 40, 45, 59, 293, 593, 594, 595, 600, 601, 602, 614, 615, 853, 856, 1135, 1136, 1137, 1142, 1143, 1144, 1156, 1157], "No": [25, 635, 1177], "round": [25, 40, 80, 110, 116, 293, 337, 343, 425, 575, 646, 741, 894, 986, 1111, 1215], "corner": [25, 40, 110, 293], "op": [25, 146, 293, 557, 741, 853, 1173, 1215], "one": [25, 37, 38, 40, 57, 68, 78, 95, 103, 105, 106, 107, 108, 109, 114, 115, 119, 123, 124, 125, 128, 145, 146, 147, 150, 171, 172, 181, 182, 183, 184, 186, 187, 199, 211, 220, 229, 230, 231, 237, 239, 254, 257, 273, 293, 301, 356, 421, 429, 432, 491, 499, 504, 562, 579, 588, 601, 706, 721, 731, 737, 741, 774, 775, 779, 780, 781, 783, 784, 798, 808, 813, 814, 831, 835, 853, 862, 913, 983, 1016, 1055, 1063, 1068, 1089, 1120, 1143, 1180, 1215], "more": [25, 40, 43, 45, 59, 68, 78, 86, 87, 88, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 119, 123, 124, 125, 126, 129, 130, 137, 139, 144, 146, 150, 161, 162, 199, 203, 205, 211, 216, 230, 231, 233, 254, 260, 279, 293, 304, 307, 324, 455, 486, 501, 504, 509, 511, 542, 576, 586, 601, 605, 629, 630, 631, 651, 721, 731, 741, 798, 824, 853, 856, 863, 879, 891, 914, 1016, 1020, 1050, 1065, 1071, 1112, 1128, 1143, 1147, 1171, 1172, 1173, 1200, 1215, 1223], "semigraph": 25, "box": [25, 205, 293], "draw": [25, 30, 143, 1223], "found": [25, 37, 40, 57, 65, 90, 99, 101, 106, 110, 166, 293, 577, 604, 627, 628, 629, 631, 741, 853, 1114, 1146, 1169, 1170, 1171, 1173, 1215, 1222], "unicod": 25, "block": [25, 85, 182, 185, 260, 293, 731, 764, 779, 782, 806, 824, 832, 841, 853, 1113, 1116, 1215], "http": [25, 40, 41, 42, 104, 116, 117, 152, 161, 293, 600, 602, 1142, 1144], "en": [25, 40, 293], "wikipedia": 25, "org": [25, 41, 42, 104, 116, 117, 152, 161, 293], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 293], "etc": [26, 39, 40, 114, 118, 120, 122, 126, 129, 130, 131, 293, 741, 856, 1113, 1116, 1215], "between": [29, 86, 141, 142, 144, 146, 161, 222, 285, 293, 333, 358, 359, 439, 468, 469, 477, 478, 487, 488, 489, 490, 495, 500, 544, 551, 552, 569, 592, 665, 666, 673, 675, 715, 718, 719, 741, 804, 847, 853, 886, 891, 915, 916, 997, 1032, 1033, 1041, 1042, 1051, 1052, 1053, 1054, 1059, 1064, 1085, 1089, 1090, 1105, 1134, 1215], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 59, 63, 148, 162, 171, 182, 207, 220, 229, 293, 339, 346, 351, 421, 499, 543, 554, 562, 565, 578, 621, 708, 721, 741, 774, 779, 808, 853, 898, 904, 908, 914, 983, 1063, 1091, 1101, 1118, 1163, 1215], "tbl_row": 30, "also": [32, 37, 40, 57, 68, 69, 106, 116, 119, 125, 128, 142, 143, 144, 145, 146, 150, 166, 182, 183, 184, 186, 187, 212, 216, 229, 231, 235, 243, 263, 268, 293, 346, 349, 387, 390, 439, 511, 554, 565, 566, 567, 568, 569, 571, 572, 573, 589, 624, 625, 676, 677, 680, 681, 685, 694, 696, 716, 731, 740, 741, 747, 779, 780, 781, 783, 784, 799, 808, 810, 818, 826, 829, 831, 853, 856, 952, 997, 1091, 1136, 1137, 1166, 1215], "char": [32, 601, 1143], "omit": [32, 106, 110, 142, 144, 146, 150, 216, 232, 293, 728, 729, 856], "set_decimal_separ": 32, "x": [32, 65, 66, 78, 86, 104, 110, 114, 115, 117, 128, 142, 144, 152, 167, 191, 195, 197, 201, 211, 220, 231, 232, 262, 293, 300, 302, 304, 357, 411, 412, 426, 431, 433, 434, 457, 464, 478, 504, 506, 508, 509, 511, 526, 528, 531, 532, 533, 534, 535, 538, 539, 542, 548, 549, 557, 561, 583, 586, 620, 640, 641, 648, 650, 657, 659, 661, 665, 666, 676, 677, 679, 694, 703, 705, 708, 712, 716, 725, 741, 788, 794, 798, 817, 853, 856, 891, 983, 1018, 1071, 1125, 1128, 1162, 1198, 1215, 1222], "1234567": 32, "987654": [32, 856], "10101": 32, "y": [32, 78, 86, 104, 110, 142, 144, 152, 167, 195, 197, 201, 211, 220, 231, 232, 262, 293, 300, 302, 304, 394, 397, 411, 412, 431, 433, 457, 464, 478, 506, 508, 511, 531, 532, 533, 534, 535, 538, 539, 542, 549, 557, 561, 629, 630, 631, 641, 650, 657, 659, 661, 665, 666, 679, 690, 703, 708, 712, 725, 741, 788, 798, 817, 853, 856, 891, 956, 959, 1171, 1172, 1173], "1234": [32, 575, 741, 1111, 1215], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 144, 183, 202, 264, 293, 362, 363, 365, 370, 372, 376, 380, 383, 384, 387, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 565, 566, 568, 571, 572, 573, 629, 631, 634, 688, 690, 728, 729, 741, 780, 789, 853, 856, 920, 921, 923, 924, 925, 928, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1171, 1173, 1176], "321": [32, 1223], "strip": [33, 609, 617, 624, 625, 626, 627, 628, 1151, 1159, 1166, 1167, 1168], "trail": [33, 181, 293, 617, 623, 624, 625, 1159, 1165, 1166, 1167], "zero": [33, 40, 103, 104, 113, 114, 115, 120, 122, 126, 143, 152, 171, 199, 230, 249, 254, 255, 293, 421, 499, 504, 577, 586, 637, 650, 741, 761, 774, 853, 896, 983, 1063, 1128, 1179, 1191, 1196, 1197, 1215], "enabl": [33, 34, 69, 87, 88, 137, 138, 139, 140, 149, 235, 268, 293, 303, 305, 578, 654, 737, 741, 763, 810, 829, 853, 860, 861, 1118, 1203, 1215], "d": [33, 36, 37, 39, 40, 41, 42, 45, 106, 134, 162, 181, 183, 188, 189, 193, 201, 247, 249, 262, 266, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 300, 302, 371, 394, 397, 439, 547, 581, 595, 601, 620, 629, 630, 631, 670, 690, 696, 741, 780, 788, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 891, 929, 956, 959, 997, 1137, 1143, 1162, 1171, 1172, 1173, 1215], "01": [33, 78, 144, 157, 162, 181, 183, 229, 264, 293, 362, 363, 364, 365, 371, 372, 375, 376, 380, 382, 383, 384, 387, 389, 390, 391, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 562, 565, 566, 568, 571, 572, 573, 629, 630, 631, 634, 685, 686, 688, 690, 741, 760, 780, 808, 853, 856, 921, 922, 923, 924, 925, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1171, 1172, 1173, 1176], "6789": 33, "scale": [33, 49, 167, 293, 511, 547, 632, 741, 974, 1174, 1215], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 106, 118, 119, 129, 130, 142, 163, 165, 168, 182, 185, 218, 235, 236, 237, 243, 261, 268, 269, 272, 293, 300, 370, 416, 419, 543, 589, 593, 600, 601, 614, 667, 670, 671, 672, 692, 720, 723, 741, 767, 771, 779, 782, 810, 811, 813, 818, 825, 829, 830, 834, 853, 920, 928, 981, 1135, 1142, 1143, 1156, 1215], "verbos": [34, 137, 139, 150, 601, 1143], "debug": [34, 763, 772, 793, 794, 853, 1223], "log": [34, 80, 331, 410, 504, 528, 548, 649, 741, 885, 973, 1199, 1215], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 66, 79, 81, 83, 103, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 144, 174, 199, 218, 224, 230, 231, 232, 234, 250, 251, 259, 293, 510, 561, 741, 806, 809, 853, 1070, 1215], "show": [35, 40, 67, 165, 181, 203, 217, 293, 768, 803, 816, 853], "variabl": [35, 60, 65, 133, 145, 148, 211, 252, 293, 798, 853, 1192, 1215, 1222], "chang": [35, 78, 85, 114, 115, 116, 134, 262, 263, 264, 293, 307, 355, 356, 358, 391, 511, 544, 551, 565, 566, 567, 568, 569, 571, 572, 573, 741, 764, 853, 862, 891, 892, 912, 913, 953, 993, 1085, 1089, 1123, 1215], "restrict": [35, 621, 1163], "dictionari": [35, 40, 103, 105, 106, 107, 109, 114, 115, 116, 117, 121, 123, 124, 127, 128, 132, 199, 218, 230, 231, 232, 250, 251, 293, 510, 741, 853, 1070, 1215], "those": [35, 40, 114, 119, 232, 263, 293, 554, 600, 706, 741, 826, 853, 856, 1091, 1142, 1215], "been": [35, 40, 152, 153, 155, 173, 184, 185, 186, 187, 192, 226, 248, 274, 293, 307, 332, 350, 351, 352, 353, 354, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 511, 549, 554, 563, 565, 566, 567, 568, 569, 571, 572, 573, 594, 607, 608, 609, 610, 613, 616, 617, 623, 641, 644, 645, 662, 682, 683, 704, 741, 757, 781, 782, 783, 784, 793, 805, 822, 833, 836, 853, 863, 908, 909, 910, 911, 1002, 1008, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1091, 1099, 1117, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1187, 1188, 1215], "set_fmt_float": 35, "via": [35, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 199, 231, 293, 307, 511, 602, 741, 766, 805, 853, 1144], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 113, 114, 119, 120, 121, 122, 125, 126, 127, 293], "bytesio": [36, 37, 40, 41, 42, 45, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 293, 766, 805, 853], "compress": [36, 41, 42, 45, 58, 59, 293, 853], "avrocompress": [36, 293], "uncompress": [36, 41, 42, 45, 59, 120, 131, 293, 853], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 57, 58, 59, 115, 120, 150, 293, 338, 524, 741, 791, 816, 853, 897, 1215], "apach": [36, 41, 42, 45, 113, 116, 117, 130, 293, 753], "avro": [36, 113, 293, 753], "writeabl": [36, 37, 41, 42, 43, 44, 45, 293], "like": [36, 37, 39, 41, 42, 43, 44, 45, 85, 104, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 183, 195, 197, 201, 254, 293, 344, 362, 458, 471, 480, 523, 554, 600, 625, 626, 654, 737, 741, 764, 766, 780, 805, 853, 862, 920, 1021, 1035, 1044, 1091, 1142, 1203, 1215], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 86, 104, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 142, 144, 146, 152, 182, 183, 185, 186, 202, 203, 229, 232, 254, 255, 293, 685, 686, 688, 689, 703, 728, 729, 753, 766, 780, 781, 783, 784, 789, 805, 808, 853, 856, 887, 919, 1023, 1133, 1191, 1215], "snappi": [36, 45, 59, 293, 853], "deflat": [36, 293], "pathlib": [36, 37, 41, 42, 45, 128, 293], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 169, 172, 175, 176, 178, 179, 180, 188, 189, 190, 191, 193, 194, 196, 201, 205, 206, 207, 208, 209, 210, 213, 214, 217, 220, 222, 224, 225, 227, 230, 233, 234, 235, 238, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 259, 260, 261, 265, 266, 267, 271, 293, 334, 356, 387, 430, 435, 437, 459, 515, 518, 519, 520, 521, 522, 523, 551, 558, 592, 595, 597, 599, 601, 602, 619, 621, 624, 625, 626, 627, 628, 633, 636, 643, 663, 669, 673, 674, 675, 693, 697, 698, 702, 707, 709, 710, 711, 713, 715, 720, 722, 726, 730, 731, 737, 741, 760, 765, 767, 768, 769, 775, 786, 787, 788, 801, 806, 809, 810, 824, 825, 828, 831, 853, 856, 888, 913, 949, 1042, 1089, 1095, 1137, 1139, 1141, 1143, 1144, 1163, 1169, 1170, 1175, 1178, 1215], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 67, 157, 160, 161, 163, 164, 165, 166, 169, 172, 175, 176, 178, 179, 180, 189, 191, 193, 194, 196, 201, 205, 206, 207, 208, 209, 210, 213, 214, 217, 220, 222, 224, 225, 227, 230, 233, 234, 235, 242, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 260, 261, 265, 266, 271, 293, 334, 437, 515, 516, 517, 518, 519, 520, 521, 522, 523, 586, 595, 597, 599, 601, 602, 619, 621, 627, 628, 663, 669, 673, 674, 675, 693, 698, 702, 707, 709, 710, 711, 713, 720, 722, 726, 730, 731, 737, 741, 760, 765, 767, 768, 769, 775, 786, 787, 788, 801, 806, 809, 810, 824, 825, 828, 853, 856, 888, 1042, 1128, 1137, 1139, 1141, 1143, 1144, 1163, 1169, 1170, 1215], "ham": [36, 37, 39, 41, 42, 45, 157, 160, 161, 163, 164, 165, 166, 172, 176, 179, 188, 189, 191, 201, 206, 208, 210, 213, 217, 222, 224, 227, 230, 233, 234, 235, 242, 244, 245, 247, 252, 253, 254, 255, 256, 260, 265, 266, 293, 334, 522, 760, 765, 767, 768, 769, 775, 788, 801, 806, 809, 810, 824, 831, 853, 888], "dirpath": [36, 37, 41, 42, 45, 128, 293], "new_fil": [36, 37, 41, 42, 45, 293], "include_bom": [37, 57, 293, 853], "include_head": [37, 40, 57, 115, 259, 293, 853], "line_termin": [37, 57, 293, 853], "quote_char": [37, 57, 114, 115, 128, 293, 853], "batch_siz": [37, 57, 114, 115, 116, 132, 134, 293, 853], "1024": [37, 57, 59, 114, 115, 116, 132, 293, 853], "datetime_format": [37, 57, 293, 853], "date_format": [37, 57, 293, 853], "time_format": [37, 57, 293, 853], "null_valu": [37, 57, 114, 115, 128, 293, 853], "quote_styl": [37, 57, 293, 853], "csvquotestyl": [37, 57, 293, 853], "textiowrapp": [37, 293], "comma": [37, 293], "csv": [37, 57, 58, 59, 114, 115, 119, 128, 293, 753, 853], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 57, 59, 63, 69, 83, 85, 86, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 134, 137, 138, 139, 140, 145, 152, 153, 156, 165, 169, 181, 183, 184, 186, 187, 189, 198, 199, 202, 204, 205, 209, 216, 220, 229, 231, 232, 233, 239, 242, 246, 247, 251, 252, 254, 258, 259, 260, 262, 263, 293, 303, 305, 307, 364, 383, 384, 422, 455, 486, 491, 492, 499, 509, 510, 511, 522, 543, 551, 554, 556, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 579, 582, 586, 587, 592, 601, 602, 603, 609, 617, 618, 619, 620, 621, 623, 624, 625, 626, 629, 630, 631, 634, 637, 654, 658, 660, 662, 664, 668, 673, 674, 676, 685, 686, 688, 689, 690, 694, 700, 701, 703, 706, 714, 717, 718, 719, 723, 728, 729, 731, 732, 741, 758, 763, 764, 768, 770, 780, 781, 783, 784, 788, 789, 794, 798, 806, 808, 812, 814, 817, 823, 824, 826, 833, 836, 841, 853, 856, 860, 861, 862, 863, 897, 913, 922, 945, 946, 980, 990, 992, 993, 1019, 1020, 1022, 1050, 1055, 1056, 1063, 1071, 1089, 1091, 1093, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1114, 1118, 1120, 1124, 1128, 1129, 1134, 1143, 1144, 1145, 1151, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1171, 1172, 1173, 1176, 1179, 1186, 1191, 1196, 1203, 1205, 1215, 1222], "instead": [37, 43, 44, 63, 67, 78, 85, 86, 114, 115, 116, 119, 125, 126, 128, 133, 134, 144, 181, 183, 199, 205, 216, 218, 230, 231, 232, 235, 236, 239, 240, 255, 268, 269, 293, 317, 339, 340, 356, 369, 373, 377, 379, 381, 386, 390, 393, 405, 416, 491, 509, 551, 579, 580, 605, 606, 609, 617, 623, 624, 625, 626, 627, 628, 629, 631, 637, 664, 668, 669, 685, 686, 687, 688, 689, 690, 700, 701, 714, 717, 723, 728, 729, 732, 741, 764, 773, 780, 810, 811, 812, 814, 815, 826, 829, 830, 833, 853, 856, 872, 898, 899, 913, 927, 931, 938, 940, 943, 948, 952, 955, 967, 998, 1004, 1007, 1014, 1016, 1018, 1055, 1089, 1113, 1116, 1120, 1121, 1147, 1148, 1151, 1159, 1165, 1166, 1167, 1168, 1171, 1173, 1179, 1197, 1215, 1222], "whether": [37, 57, 107, 109, 146, 149, 156, 237, 258, 293, 303, 305, 374, 392, 460, 461, 516, 517, 578, 741, 758, 793, 794, 813, 818, 823, 853, 856, 860, 861, 889, 892, 932, 954, 1024, 1025, 1215, 1222], "utf": [37, 57, 77, 293, 853], "bom": [37, 57, 293, 853], "header": [37, 40, 45, 57, 59, 110, 114, 115, 119, 128, 166, 220, 259, 293, 853], "field": [37, 39, 57, 70, 99, 101, 106, 254, 261, 293, 499, 510, 560, 601, 602, 603, 620, 621, 639, 676, 677, 680, 681, 705, 723, 741, 825, 853, 913, 1063, 1089, 1097, 1144, 1160, 1162, 1163, 1182, 1184, 1215], "symbol": [37, 57, 293, 741, 853], "end": [37, 40, 57, 114, 115, 126, 128, 183, 293, 326, 329, 330, 362, 391, 416, 439, 492, 593, 598, 601, 611, 618, 622, 625, 628, 664, 685, 686, 688, 689, 692, 700, 701, 728, 729, 731, 741, 780, 785, 792, 803, 853, 856, 883, 920, 953, 997, 1056, 1140, 1143, 1153, 1160, 1164, 1215], "byte": [37, 57, 59, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 167, 293, 605, 607, 853, 974, 1147, 1149, 1215], "quot": [37, 38, 57, 114, 115, 128, 293, 853], "specifi": [37, 40, 57, 78, 90, 99, 101, 119, 125, 144, 156, 157, 163, 167, 168, 171, 182, 183, 184, 185, 186, 187, 201, 218, 229, 230, 232, 235, 236, 237, 239, 243, 258, 261, 268, 269, 272, 293, 338, 413, 414, 415, 416, 421, 510, 543, 557, 565, 566, 567, 568, 569, 571, 572, 573, 579, 589, 667, 670, 671, 672, 685, 686, 688, 689, 692, 720, 723, 728, 729, 741, 758, 760, 767, 771, 774, 779, 780, 781, 782, 783, 784, 788, 808, 810, 811, 813, 814, 818, 823, 825, 829, 830, 834, 853, 897, 974, 975, 976, 977, 983, 1120, 1215], "defin": [37, 40, 48, 57, 116, 141, 142, 144, 153, 157, 165, 168, 183, 184, 186, 187, 205, 216, 219, 229, 263, 274, 279, 293, 307, 439, 474, 497, 511, 547, 551, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 662, 685, 686, 688, 689, 703, 706, 723, 728, 729, 741, 760, 768, 771, 780, 781, 783, 784, 802, 808, 826, 836, 841, 853, 856, 863, 997, 1038, 1071, 1089, 1098, 1215], "chrono": [37, 57, 293, 394, 397, 629, 630, 631, 634, 853, 956, 959, 1171, 1172, 1173, 1176], "rust": [37, 45, 57, 96, 116, 120, 122, 126, 205, 279, 293, 602, 853, 1071, 1144, 1215], "crate": [37, 57, 293, 593, 594, 595, 600, 601, 602, 614, 615, 629, 630, 631, 634, 853, 856, 1135, 1136, 1137, 1142, 1143, 1144, 1156, 1157, 1171, 1172, 1173, 1176], "fraction": [37, 57, 137, 138, 139, 140, 233, 293, 392, 486, 544, 576, 629, 631, 741, 853, 954, 1050, 1085, 1112, 1171, 1173, 1215], "second": [37, 57, 137, 138, 139, 140, 143, 183, 202, 229, 264, 293, 387, 391, 404, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 629, 631, 685, 686, 687, 688, 689, 690, 727, 728, 729, 731, 741, 780, 789, 808, 853, 856, 949, 953, 966, 967, 1171, 1173, 1223], "infer": [37, 57, 103, 105, 106, 107, 108, 109, 114, 115, 116, 119, 123, 124, 128, 132, 133, 153, 205, 293, 405, 558, 603, 629, 630, 631, 632, 634, 717, 741, 853, 953, 967, 1095, 1145, 1171, 1172, 1173, 1174, 1176, 1215], "timeunit": [37, 48, 50, 57, 293, 363, 364, 396, 408, 631, 685, 686, 687, 688, 689, 690, 853, 856, 921, 922, 958, 970, 1173], "frame": [37, 38, 40, 57, 63, 64, 65, 66, 67, 68, 78, 85, 86, 106, 115, 119, 125, 137, 138, 144, 157, 158, 199, 200, 205, 212, 216, 219, 230, 231, 232, 255, 262, 263, 293, 760, 761, 799, 802, 826, 853, 856, 896, 1215, 1222, 1223], "repres": [37, 40, 57, 61, 76, 103, 105, 107, 108, 109, 116, 119, 244, 265, 271, 293, 448, 450, 509, 591, 655, 658, 673, 675, 690, 692, 703, 705, 706, 718, 719, 722, 730, 737, 741, 819, 827, 853, 1113, 1117, 1132, 1204, 1215], "necessari": [37, 57, 69, 88, 119, 293, 853], "non_numer": [37, 57, 293, 853], "never": [37, 57, 116, 230, 293, 853], "strategi": [37, 57, 78, 86, 114, 141, 142, 143, 144, 146, 171, 183, 186, 201, 202, 215, 263, 293, 307, 421, 499, 511, 741, 774, 780, 783, 788, 789, 826, 853, 983, 1063, 1215], "put": [37, 57, 293, 853], "around": [37, 57, 293, 853], "thei": [37, 39, 40, 57, 69, 85, 86, 87, 88, 106, 128, 150, 203, 232, 293, 625, 626, 741, 764, 853, 856], "record": [37, 42, 57, 122, 134, 202, 254, 293, 789, 853], "termin": [37, 57, 293, 853], "indistinguish": [37, 57, 293, 853], "even": [37, 57, 114, 293, 547, 551, 741, 853, 1089, 1215], "invalid": [37, 57, 114, 115, 128, 293, 603, 604, 650, 741, 853, 1145, 1146], "g": [37, 57, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 134, 152, 254, 262, 293, 300, 307, 416, 511, 581, 692, 741, 766, 805, 806, 853, 1115, 1196, 1215, 1223], "pars": [37, 57, 63, 114, 115, 119, 124, 128, 131, 132, 156, 182, 185, 235, 236, 239, 243, 258, 268, 269, 272, 293, 338, 439, 510, 543, 589, 603, 613, 632, 659, 661, 667, 670, 671, 672, 679, 683, 696, 708, 712, 720, 721, 723, 725, 731, 741, 758, 779, 782, 810, 811, 814, 818, 823, 829, 830, 834, 853, 897, 997, 1120, 1145, 1155, 1173, 1174, 1215], "valid": [37, 40, 48, 57, 63, 116, 120, 122, 126, 146, 150, 167, 201, 293, 355, 593, 594, 595, 600, 601, 602, 604, 614, 615, 731, 741, 788, 853, 856, 912, 974, 990, 1135, 1136, 1137, 1142, 1143, 1144, 1146, 1156, 1157, 1215], "integ": [37, 39, 40, 53, 54, 55, 56, 57, 72, 73, 74, 75, 135, 142, 144, 145, 147, 165, 183, 229, 252, 293, 304, 337, 392, 425, 426, 542, 551, 556, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 613, 657, 664, 696, 700, 701, 717, 741, 768, 780, 808, 853, 856, 894, 954, 986, 1007, 1089, 1093, 1106, 1113, 1117, 1155, 1215, 1222, 1223], "aren": [37, 57, 293, 853], "t": [37, 57, 65, 66, 86, 114, 119, 125, 128, 183, 205, 219, 260, 262, 293, 307, 355, 362, 370, 390, 410, 413, 414, 415, 471, 511, 543, 547, 600, 626, 629, 631, 731, 741, 780, 802, 824, 853, 856, 912, 952, 973, 975, 976, 977, 1035, 1071, 1115, 1142, 1167, 1168, 1171, 1173, 1196, 1205, 1215], "strictli": [37, 57, 69, 88, 293, 772, 853], "table_nam": [38, 40, 293], "connect": [38, 114, 116, 117, 120, 122, 126, 131, 133, 134, 293, 754], "if_exist": [38, 293], "dbwritemod": [38, 293], "fail": [38, 39, 104, 118, 120, 124, 129, 133, 137, 138, 152, 260, 293, 318, 395, 499, 629, 630, 631, 634, 741, 824, 853, 1071, 1171, 1172, 1173, 1176, 1215], "dbwriteengin": [38, 293], "sqlalchemi": [38, 116, 136, 293], "databas": [38, 116, 117, 293, 753], "creat": [38, 40, 69, 88, 103, 107, 109, 116, 117, 129, 130, 142, 143, 144, 145, 146, 147, 158, 159, 183, 184, 187, 217, 220, 229, 264, 268, 293, 364, 391, 405, 499, 555, 562, 565, 566, 568, 571, 572, 573, 618, 671, 684, 685, 686, 687, 688, 689, 690, 727, 728, 729, 737, 741, 761, 762, 770, 780, 781, 784, 808, 829, 853, 896, 900, 913, 922, 953, 967, 1082, 1089, 1092, 1160, 1196, 1215, 1222, 1223], "append": [38, 39, 144, 169, 201, 202, 293, 555, 731, 741, 788, 789, 853, 980, 1215], "your": [38, 40, 69, 78, 88, 114, 115, 116, 119, 134, 199, 205, 231, 232, 235, 251, 268, 272, 279, 293, 307, 511, 602, 629, 630, 631, 637, 706, 741, 785, 792, 794, 810, 829, 834, 841, 853, 1071, 1144, 1171, 1172, 1173, 1179, 1215, 1223], "special": [38, 114, 115, 128, 293, 564, 601, 741, 863, 1071, 1100, 1143, 1215], "uri": [38, 39, 116, 117, 118, 129, 130, 293], "postgresql": [38, 116, 117, 293, 543, 741], "user": [38, 116, 117, 153, 205, 219, 274, 279, 293, 307, 509, 511, 547, 578, 662, 706, 741, 802, 836, 841, 853, 863, 1071, 1118, 1215], "pass": [38, 39, 40, 45, 66, 78, 105, 116, 117, 119, 128, 133, 134, 137, 139, 142, 144, 146, 156, 161, 163, 182, 183, 186, 189, 204, 218, 219, 229, 235, 239, 243, 247, 258, 264, 268, 272, 293, 307, 371, 387, 390, 419, 437, 491, 511, 543, 547, 562, 565, 566, 567, 568, 569, 571, 572, 573, 579, 589, 624, 625, 626, 658, 667, 685, 696, 723, 731, 737, 741, 758, 767, 779, 780, 781, 783, 784, 786, 793, 794, 802, 808, 810, 814, 816, 818, 823, 829, 834, 841, 853, 863, 929, 952, 981, 992, 1022, 1055, 1071, 1120, 1166, 1167, 1168, 1186, 1215], "server": [38, 116, 117, 293], "port": [38, 114, 116, 117, 120, 122, 126, 131, 293], "sqlite": [38, 116, 293], "db": [38, 117, 293], "replac": [38, 39, 114, 115, 128, 170, 171, 226, 227, 259, 268, 269, 293, 364, 390, 510, 615, 741, 773, 829, 830, 853, 922, 952, 1070, 1113, 1116, 1117, 1157, 1215], "insert": [38, 114, 115, 120, 122, 126, 128, 131, 132, 133, 192, 193, 225, 259, 261, 293, 577, 592, 637, 741, 825, 853, 1114, 1134, 1179, 1215], "mode": [38, 39, 57, 58, 59, 63, 137, 139, 220, 293, 601, 714, 717, 732, 741, 763, 853, 1143, 1215, 1222], "new": [38, 39, 40, 119, 128, 150, 177, 191, 192, 193, 205, 216, 217, 224, 225, 248, 259, 261, 262, 263, 268, 269, 293, 302, 364, 418, 430, 438, 508, 531, 614, 615, 620, 621, 638, 639, 645, 737, 741, 753, 778, 806, 822, 825, 826, 829, 830, 836, 841, 853, 859, 922, 979, 988, 1082, 1094, 1156, 1157, 1162, 1163, 1180, 1182, 1188, 1193, 1215, 1222], "alreadi": [38, 39, 293, 355, 471, 654, 741, 912, 1035, 1203, 1215], "adbc": [38, 116, 117, 293], "deltalak": [39, 118, 129, 136, 293], "deltat": [39, 293], "ignor": [39, 143, 144, 146, 208, 209, 245, 246, 263, 293, 303, 305, 358, 390, 413, 414, 415, 468, 536, 537, 592, 658, 660, 741, 860, 861, 915, 952, 975, 976, 977, 1032, 1080, 1081, 1134, 1215], "overwrite_schema": [39, 293], "storage_opt": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 293], "delta_write_opt": [39, 293], "delta": [39, 50, 118, 129, 244, 265, 293, 571, 573, 591, 655, 673, 675, 718, 719, 722, 730, 741, 753, 819, 827, 853, 1107, 1109, 1132, 1204, 1215], "handl": [39, 86, 110, 114, 115, 128, 134, 293, 358, 468, 637, 741, 763, 853, 915, 1032, 1179, 1215], "throw": [39, 157, 293, 333, 603, 604, 741, 760, 853, 886, 1145, 1146, 1215], "add": [39, 40, 115, 169, 183, 186, 205, 268, 269, 270, 293, 356, 532, 533, 549, 551, 641, 690, 694, 731, 741, 780, 783, 788, 829, 830, 831, 832, 853, 862, 980, 1215], "anyth": [39, 230, 293], "updat": [39, 293, 853], "extra": [39, 45, 59, 114, 115, 118, 119, 120, 122, 126, 128, 129, 130, 131, 169, 183, 293, 741, 780, 853, 862, 980, 1215], "storag": [39, 114, 118, 120, 122, 126, 129, 130, 131, 133, 293], "backend": [39, 116, 117, 118, 129, 130, 293], "cloud": [39, 116, 118, 129, 130, 133, 134, 293], "configur": [39, 118, 129, 130, 150, 293], "authent": [39, 118, 129, 130, 293], "see": [39, 40, 41, 42, 48, 116, 117, 118, 119, 129, 130, 133, 137, 138, 139, 140, 144, 146, 161, 183, 201, 219, 220, 293, 338, 421, 455, 509, 586, 593, 600, 601, 614, 685, 686, 688, 689, 716, 728, 729, 737, 741, 763, 780, 853, 856, 891, 897, 1020, 1128, 1135, 1142, 1143, 1156, 1215, 1223], "here": [39, 40, 45, 103, 105, 106, 107, 109, 116, 117, 118, 123, 124, 129, 130, 132, 133, 142, 144, 146, 293, 511, 602, 604, 741, 853, 1146], "gc": [39, 118, 129, 130, 293], "azur": [39, 118, 129, 130, 133, 293], "keyword": [39, 66, 118, 126, 129, 161, 219, 230, 235, 236, 268, 269, 272, 293, 547, 720, 723, 741, 802, 810, 811, 829, 830, 834, 853, 1215], "argument": [39, 45, 88, 114, 118, 126, 128, 129, 161, 163, 168, 182, 183, 184, 185, 186, 187, 206, 208, 213, 218, 219, 220, 229, 235, 236, 237, 243, 245, 255, 261, 264, 268, 269, 272, 293, 391, 405, 416, 439, 543, 547, 562, 565, 566, 567, 568, 569, 571, 572, 573, 589, 624, 625, 626, 658, 665, 666, 667, 670, 671, 672, 685, 692, 717, 720, 723, 728, 741, 767, 771, 779, 780, 781, 782, 783, 784, 802, 808, 810, 811, 813, 818, 825, 829, 830, 834, 853, 862, 953, 967, 997, 1166, 1167, 1168, 1197, 1215], "while": [39, 85, 115, 118, 119, 129, 144, 146, 150, 199, 211, 259, 263, 293, 606, 764, 798, 826, 853, 990, 1148, 1215], "lake": [39, 118, 129, 293, 753], "typeerror": [39, 293], "unsupport": [39, 293], "arrowinvaliderror": [39, 293], "could": [39, 76, 91, 157, 293, 333, 676, 680, 690, 694, 741, 760, 768, 853, 886, 990, 1215], "primit": [39, 293, 444, 741, 1196, 1215], "categor": [39, 69, 87, 88, 104, 137, 138, 139, 140, 201, 252, 253, 293, 334, 335, 356, 510, 551, 648, 741, 856, 887, 888, 889, 890, 891, 892, 913, 1089, 1198, 1215], "protocol": [39, 104, 117, 152, 293], "associ": [39, 40, 64, 66, 78, 117, 143, 232, 293], "affect": [39, 293], "follow": [39, 40, 45, 83, 114, 115, 118, 128, 129, 130, 137, 183, 202, 205, 219, 229, 264, 293, 387, 391, 405, 547, 554, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 639, 650, 685, 686, 688, 689, 706, 728, 729, 731, 733, 734, 736, 741, 742, 743, 746, 748, 749, 750, 780, 789, 802, 808, 853, 949, 953, 967, 1091, 1113, 1116, 1207, 1209, 1211, 1215, 1216, 1219, 1220, 1221, 1223], "unsign": [39, 72, 73, 74, 75, 293, 556, 741, 856, 1007, 1093, 1215], "millisecond": [39, 183, 202, 229, 264, 293, 387, 391, 401, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 856, 949, 953, 963, 967], "nanosecond": [39, 183, 202, 229, 264, 293, 387, 391, 392, 403, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 949, 953, 954, 965, 967], "zone": [39, 48, 293, 362, 365, 390, 631, 685, 686, 687, 688, 689, 856, 920, 923, 952, 1173], "binari": [39, 41, 116, 119, 293, 326, 328, 329, 330, 856, 880, 883, 884], "nullabl": [39, 293], "To": [39, 85, 170, 206, 208, 213, 245, 293, 338, 360, 361, 421, 593, 600, 601, 614, 625, 626, 627, 628, 635, 741, 773, 853, 897, 917, 918, 990, 1135, 1142, 1143, 1156, 1177, 1196, 1215], "pyarrow": [39, 45, 103, 104, 108, 114, 117, 118, 120, 122, 126, 129, 134, 136, 249, 254, 255, 293, 754, 1191, 1195, 1196, 1197, 1215], "ha": [39, 40, 78, 85, 116, 119, 128, 152, 153, 155, 173, 183, 184, 185, 186, 187, 192, 226, 229, 248, 264, 274, 293, 307, 331, 332, 350, 351, 352, 353, 354, 355, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 520, 549, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 594, 607, 608, 609, 610, 613, 616, 617, 623, 641, 644, 645, 649, 662, 682, 683, 704, 737, 741, 757, 764, 780, 781, 782, 783, 784, 793, 805, 808, 822, 833, 836, 841, 853, 863, 885, 896, 908, 909, 910, 911, 912, 914, 990, 1002, 1004, 1008, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1099, 1117, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1187, 1188, 1199, 1215], "last": [39, 137, 138, 139, 140, 156, 189, 202, 204, 220, 232, 243, 247, 258, 260, 287, 293, 317, 355, 368, 383, 388, 406, 446, 447, 454, 475, 496, 499, 530, 532, 533, 534, 535, 549, 588, 621, 641, 643, 726, 741, 758, 789, 818, 821, 823, 824, 849, 853, 856, 872, 912, 926, 945, 950, 968, 992, 1008, 1009, 1022, 1039, 1060, 1163, 1186, 1215], "filesystem": [39, 118, 129, 130, 293], "table_path": [39, 118, 129, 130, 293], "match": [39, 40, 48, 86, 97, 103, 105, 106, 107, 109, 123, 124, 132, 137, 138, 139, 140, 171, 202, 230, 263, 293, 517, 570, 593, 594, 595, 598, 600, 601, 603, 604, 614, 615, 622, 629, 630, 631, 741, 774, 789, 826, 853, 856, 1007, 1016, 1106, 1135, 1136, 1137, 1140, 1142, 1143, 1145, 1146, 1156, 1157, 1164, 1171, 1172, 1173, 1215], "version": [39, 83, 88, 118, 119, 129, 136, 152, 153, 155, 173, 183, 184, 185, 186, 187, 188, 192, 206, 208, 213, 226, 240, 245, 248, 274, 293, 307, 332, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 383, 384, 386, 390, 393, 405, 434, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 549, 563, 580, 594, 607, 608, 609, 610, 613, 616, 617, 623, 629, 631, 641, 644, 645, 662, 669, 682, 683, 685, 687, 704, 716, 717, 728, 741, 757, 777, 780, 781, 782, 783, 784, 793, 805, 815, 822, 833, 836, 853, 862, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 945, 946, 948, 952, 953, 955, 967, 991, 998, 1002, 1004, 1007, 1008, 1014, 1016, 1018, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1089, 1099, 1117, 1121, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1171, 1173, 1187, 1188, 1205, 1215], "old": [39, 224, 293, 806, 853], "existing_table_path": [39, 293], "store": [39, 114, 126, 130, 169, 199, 231, 293, 334, 862, 888, 980, 1215], "bucket": [39, 118, 129, 130, 133, 293, 391, 405, 953, 967, 993, 1215], "prefix": [39, 150, 293, 302, 330, 508, 531, 533, 534, 535, 622, 626, 627, 637, 641, 741, 856, 884, 1164, 1169, 1179], "aws_region": [39, 129, 133, 293], "the_aws_region": [39, 293], "aws_access_key_id": [39, 118, 129, 133, 293], "the_aws_access_key_id": [39, 118, 129, 130, 293], "aws_secret_access_kei": [39, 118, 129, 133, 293], "the_aws_secret_access_kei": [39, 118, 129, 130, 293], "pa": [39, 103, 134, 293], "workbook": [40, 119, 293], "worksheet": [40, 119, 125, 293], "posit": [40, 163, 168, 182, 185, 218, 235, 236, 237, 239, 243, 261, 268, 269, 272, 293, 413, 414, 415, 416, 491, 543, 551, 579, 589, 602, 613, 665, 666, 667, 670, 671, 672, 692, 720, 723, 741, 767, 771, 779, 782, 810, 811, 813, 814, 818, 825, 829, 830, 834, 853, 975, 976, 977, 1055, 1089, 1120, 1144, 1155, 1215], "tupl": [40, 117, 119, 125, 153, 199, 205, 230, 231, 232, 238, 271, 293, 558, 741, 803, 816, 853, 856, 1095, 1215], "a1": [40, 79, 81, 293], "table_styl": [40, 293], "column_format": [40, 293], "columnformatdict": [40, 293], "dtype_format": [40, 293], "oneormoredatatyp": [40, 142, 293, 1016, 1215], "conditional_format": [40, 293], "conditionalformatdict": [40, 293], "header_format": [40, 293], "column_tot": [40, 293], "columntotalsdefinit": [40, 293], "column_width": [40, 293], "columnwidthsdefinit": [40, 293], "row_tot": [40, 293], "rowtotalsdefinit": [40, 293], "row_height": [40, 293], "sparklin": [40, 293], "sequenc": [40, 70, 78, 84, 85, 103, 105, 106, 107, 109, 114, 115, 116, 119, 123, 124, 125, 128, 132, 142, 143, 144, 156, 162, 168, 169, 201, 202, 211, 216, 218, 219, 220, 232, 243, 252, 258, 262, 263, 264, 293, 356, 444, 499, 507, 509, 547, 551, 589, 627, 628, 639, 662, 667, 676, 677, 680, 681, 694, 696, 704, 705, 706, 716, 721, 741, 758, 771, 788, 789, 798, 802, 818, 823, 826, 853, 862, 913, 914, 916, 980, 1063, 1089, 1113, 1117, 1182, 1215], "formula": [40, 293, 410, 741, 973, 1215], "autofilt": [40, 293], "autofit": [40, 293], "hidden_column": [40, 293], "selectortyp": [40, 293, 856], "hide_gridlin": [40, 293], "sheet_zoom": [40, 293], "freeze_pan": [40, 293], "excel": [40, 119, 293], "open": [40, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 133, 293, 766, 805, 853], "xlsxwriter": [40, 136, 293], "close": [40, 116, 183, 184, 186, 187, 229, 293, 356, 439, 504, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 586, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 808, 853, 913, 997, 1089, 1128, 1215], "xlsx": [40, 119, 293], "work": [40, 49, 104, 115, 134, 225, 236, 269, 293, 303, 305, 307, 324, 337, 338, 416, 425, 471, 501, 511, 543, 561, 605, 606, 651, 741, 811, 830, 853, 856, 860, 861, 879, 894, 897, 986, 1035, 1065, 1147, 1148, 1200, 1215], "directori": [40, 45, 126, 133, 293], "sheet1": [40, 293], "medium": [40, 293], "kei": [40, 78, 83, 86, 130, 133, 183, 199, 201, 202, 212, 218, 220, 224, 228, 231, 232, 263, 293, 511, 723, 741, 772, 780, 788, 789, 799, 806, 807, 826, 853], "first_column": [40, 293], "last_column": [40, 293], "banded_column": [40, 293], "banded_row": [40, 293], "sheet": [40, 119, 125, 293], "chart": [40, 293, 803, 853], "subsequ": [40, 68, 223, 255, 293, 499, 731, 770, 853], "colnam": [40, 128, 144, 166, 293, 769, 853], "given": [40, 63, 64, 78, 103, 105, 106, 107, 109, 114, 115, 116, 117, 119, 123, 124, 125, 128, 132, 133, 139, 140, 141, 142, 144, 145, 146, 147, 153, 156, 167, 168, 170, 183, 184, 186, 187, 198, 205, 218, 219, 229, 230, 232, 239, 240, 243, 258, 263, 293, 338, 362, 365, 394, 396, 397, 410, 439, 465, 491, 499, 502, 511, 543, 547, 554, 557, 558, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 579, 580, 601, 602, 611, 612, 629, 631, 637, 639, 662, 692, 704, 705, 706, 717, 718, 719, 741, 758, 771, 780, 781, 783, 784, 793, 794, 802, 808, 814, 815, 818, 823, 826, 836, 841, 853, 856, 863, 897, 920, 923, 956, 958, 959, 973, 974, 993, 997, 1019, 1029, 1055, 1063, 1066, 1069, 1071, 1082, 1091, 1095, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1114, 1120, 1121, 1143, 1144, 1153, 1154, 1171, 1173, 1179, 1202, 1206, 1215, 1222, 1223], "dd": [40, 293], "mm": [40, 293], "yyyi": [40, 293], "overridden": [40, 103, 105, 107, 109, 123, 124, 148, 293, 853], "basi": [40, 144, 293], "param": [40, 103, 105, 106, 107, 109, 114, 115, 123, 124, 128, 143, 144, 146, 230, 293, 853], "It": [40, 69, 88, 212, 219, 279, 293, 332, 519, 561, 737, 741, 793, 794, 799, 841, 853, 1113, 1116, 1215], "float_dtyp": [40, 293], "simplifi": [40, 57, 58, 59, 84, 85, 293, 763, 764, 770, 772, 803, 816, 853], "uniform": [40, 293, 551, 741, 1089, 1215], "condit": [40, 165, 172, 230, 293, 598, 622, 668, 694, 731, 768, 775, 853], "suppli": [40, 103, 105, 106, 107, 109, 116, 123, 124, 132, 172, 230, 293, 547, 741, 775, 853], "typenam": [40, 293], "3_color_scal": [40, 293], "data_bar": [40, 293], "make": [40, 70, 86, 103, 108, 114, 115, 120, 122, 126, 131, 212, 216, 223, 264, 293, 414, 415, 510, 534, 535, 543, 557, 620, 741, 799, 853, 976, 977, 993, 1070, 1162, 1215, 1223], "icon": [40, 293], "multipl": [40, 66, 84, 85, 86, 114, 115, 119, 125, 128, 131, 132, 133, 142, 146, 156, 163, 167, 169, 172, 182, 183, 191, 200, 218, 220, 232, 235, 237, 243, 258, 263, 268, 272, 293, 474, 497, 516, 520, 527, 528, 543, 558, 561, 565, 566, 567, 568, 569, 571, 572, 573, 589, 667, 680, 681, 694, 704, 705, 707, 711, 716, 721, 724, 731, 737, 741, 758, 763, 764, 767, 775, 779, 780, 810, 813, 818, 823, 826, 829, 834, 841, 853, 862, 974, 980, 1038, 1061, 1076, 1095, 1215], "singl": [40, 64, 78, 85, 86, 114, 115, 116, 117, 119, 126, 128, 133, 142, 157, 163, 164, 165, 169, 178, 188, 198, 201, 205, 218, 230, 232, 243, 293, 307, 338, 387, 422, 429, 432, 434, 466, 467, 474, 497, 509, 511, 555, 558, 589, 592, 656, 662, 667, 671, 672, 701, 705, 706, 721, 729, 741, 760, 763, 767, 768, 788, 818, 853, 862, 897, 949, 980, 991, 1030, 1031, 1038, 1092, 1095, 1134, 1191, 1215], "across": [40, 78, 188, 207, 209, 214, 246, 293, 434, 659, 661, 676, 677, 679, 683, 708, 712, 725, 741, 991, 1215], "effect": [40, 175, 183, 186, 254, 293, 370, 511, 685, 686, 741, 780, 783, 832, 853, 920, 928], "heatmap": [40, 293], "min": [40, 45, 59, 162, 171, 214, 220, 229, 293, 340, 347, 352, 421, 483, 543, 554, 562, 568, 712, 720, 741, 774, 808, 853, 899, 905, 909, 914, 983, 1091, 1104, 1215, 1223], "entir": [40, 293, 763, 853], "made": [40, 116, 293, 1196, 1215], "abov": [40, 137, 220, 293, 731], "than": [40, 57, 58, 59, 102, 107, 109, 114, 115, 116, 119, 125, 128, 134, 144, 146, 158, 182, 185, 199, 202, 205, 218, 230, 231, 233, 262, 279, 293, 431, 433, 457, 486, 506, 511, 522, 551, 561, 576, 586, 605, 611, 612, 621, 637, 673, 685, 706, 741, 763, 779, 782, 789, 841, 853, 1050, 1071, 1089, 1098, 1112, 1128, 1147, 1153, 1154, 1163, 1179, 1215, 1223], "bold": [40, 293], "font_color": [40, 293], "702963": [40, 293], "total": [40, 167, 293, 369, 373, 377, 379, 381, 386, 393, 398, 399, 400, 401, 402, 403, 404, 927, 931, 938, 940, 943, 948, 955, 960, 961, 962, 963, 964, 965, 966, 974, 1215], "export": [40, 199, 200, 231, 232, 251, 254, 293, 737], "sum": [40, 63, 167, 175, 182, 183, 198, 220, 229, 246, 272, 293, 348, 349, 354, 410, 422, 499, 511, 519, 521, 522, 523, 562, 572, 656, 658, 676, 678, 679, 680, 682, 683, 694, 706, 716, 725, 741, 763, 764, 766, 770, 772, 779, 780, 801, 803, 808, 812, 816, 834, 853, 856, 906, 907, 911, 973, 974, 1108, 1215], "must": [40, 104, 105, 118, 129, 130, 134, 162, 168, 183, 184, 186, 187, 202, 212, 229, 230, 293, 356, 499, 509, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 731, 741, 771, 780, 781, 783, 784, 789, 793, 794, 799, 808, 853, 913, 914, 1089, 1215], "funcnam": [40, 293], "averag": [40, 293, 413, 414, 415, 554, 741, 975, 976, 977, 1091, 1215], "count_num": [40, 293], "count": [40, 63, 114, 115, 120, 122, 126, 128, 131, 132, 133, 134, 154, 155, 162, 183, 202, 216, 217, 220, 229, 259, 263, 264, 270, 279, 284, 293, 308, 345, 350, 387, 458, 466, 467, 511, 519, 521, 529, 541, 562, 565, 566, 567, 568, 569, 571, 572, 573, 594, 595, 652, 654, 663, 713, 741, 756, 757, 780, 789, 801, 808, 832, 841, 846, 853, 914, 949, 993, 1030, 1031, 1078, 1084, 1136, 1137, 1201, 1203, 1215], "std_dev": [40, 293], "var": [40, 147, 293, 573, 741, 853, 1215], "pixel": [40, 293], "unit": [40, 48, 50, 137, 138, 139, 140, 144, 146, 167, 293, 363, 364, 371, 396, 408, 505, 520, 629, 631, 653, 685, 686, 687, 688, 689, 690, 696, 741, 803, 853, 856, 921, 922, 929, 958, 970, 974, 1069, 1171, 1173, 1202, 1215, 1223], "hand": [40, 114, 115, 128, 293, 487, 488, 489, 490, 1051, 1052, 1053, 1054], "side": [40, 183, 184, 186, 187, 229, 293, 439, 487, 488, 489, 490, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 808, 853, 997, 1051, 1052, 1053, 1054, 1114, 1215], "call": [40, 67, 69, 88, 115, 116, 137, 138, 139, 140, 144, 146, 150, 182, 183, 186, 203, 205, 229, 292, 293, 307, 346, 349, 454, 511, 530, 532, 533, 534, 535, 549, 582, 641, 737, 741, 754, 779, 780, 781, 783, 784, 808, 852, 853, 856, 863, 1071, 1124, 1215], "ad": [40, 106, 119, 183, 186, 259, 263, 268, 269, 293, 306, 419, 676, 677, 680, 681, 741, 780, 783, 826, 829, 830, 853, 913, 981, 1089, 1215], "wise": [40, 78, 116, 175, 293, 309, 310, 311, 312, 313, 314, 341, 342, 343, 417, 503, 583, 584, 585, 646, 647, 680, 681, 694, 716, 741, 864, 865, 866, 867, 868, 869, 901, 902, 903, 978, 1067, 1068, 1125, 1126, 1127, 1189, 1190, 1215], "particip": [40, 293], "distinct": [40, 146, 218, 293, 324, 442, 443, 446, 447, 501, 554, 690, 741, 879, 1002, 1003, 1008, 1009, 1065, 1091, 1215, 1223], "referenc": [40, 293, 639], "differ": [40, 114, 134, 137, 139, 169, 183, 188, 199, 229, 231, 232, 251, 259, 293, 358, 368, 387, 388, 390, 406, 412, 434, 468, 487, 489, 495, 499, 510, 511, 536, 537, 539, 629, 652, 693, 696, 702, 741, 770, 780, 808, 853, 856, 862, 891, 915, 926, 949, 950, 952, 968, 980, 991, 1032, 1051, 1053, 1059, 1071, 1080, 1081, 1115, 1171, 1215], "row_index": [40, 293], "height": [40, 165, 293], "provid": [40, 66, 114, 115, 117, 118, 128, 129, 130, 133, 144, 146, 172, 198, 293, 327, 328, 416, 499, 509, 511, 596, 597, 600, 603, 604, 625, 626, 627, 628, 696, 723, 741, 753, 775, 853, 881, 882, 993, 1019, 1071, 1138, 1139, 1142, 1145, 1146, 1215, 1222, 1223], "intersect": [40, 293, 488, 856, 1052], "bodi": [40, 293], "start": [40, 113, 114, 115, 116, 117, 120, 122, 125, 126, 128, 131, 132, 133, 148, 182, 183, 185, 186, 203, 242, 264, 270, 293, 326, 329, 330, 368, 382, 388, 391, 405, 406, 416, 439, 492, 565, 566, 568, 571, 572, 573, 587, 593, 598, 601, 612, 618, 622, 626, 627, 637, 664, 676, 680, 685, 686, 688, 689, 692, 694, 700, 701, 728, 729, 731, 741, 779, 780, 782, 783, 803, 817, 832, 853, 856, 884, 921, 923, 926, 929, 930, 937, 939, 942, 944, 947, 950, 953, 958, 967, 968, 997, 1056, 1129, 1140, 1143, 1154, 1160, 1164, 1179, 1215, 1223], "unless": [40, 78, 105, 255, 293, 624, 625, 717, 853, 1166, 1197, 1205, 1215], "marker": [40, 293], "compliant": [40, 293], "case": [40, 69, 78, 85, 103, 105, 106, 107, 109, 116, 123, 124, 132, 133, 148, 153, 169, 183, 184, 186, 187, 199, 205, 229, 231, 232, 251, 293, 362, 508, 509, 519, 520, 531, 562, 593, 601, 614, 741, 764, 780, 781, 783, 784, 808, 853, 856, 862, 920, 980, 1135, 1143, 1156, 1215], "three": [40, 257, 293, 356, 551, 577, 741, 913, 1063, 1089, 1215], "avail": [40, 112, 116, 117, 118, 129, 130, 142, 150, 220, 292, 293, 554, 733, 734, 736, 740, 741, 742, 743, 746, 747, 748, 749, 750, 753, 754, 772, 852, 853, 856, 1091, 1207, 1209, 1211, 1215, 1216, 1219, 1220, 1221], "insert_befor": [40, 293], "insert_aft": [40, 293], "respect": [40, 293, 856], "direct": [40, 117, 126, 130, 133, 137, 239, 262, 293, 491, 579, 741, 814, 853, 1055, 1120, 1215], "far": [40, 293], "strongli": [40, 148, 205, 230, 279, 293, 511, 741, 1071, 1215], "advis": [40, 69, 88, 203, 293], "structur": [40, 94, 98, 100, 169, 219, 232, 254, 293, 547, 741, 802, 853, 862, 980, 1215], "wherev": [40, 205, 279, 293, 511, 741, 1071, 1215], "possibl": [40, 114, 156, 182, 185, 199, 205, 231, 258, 260, 279, 293, 505, 511, 519, 564, 621, 653, 741, 758, 779, 782, 818, 823, 824, 853, 1071, 1100, 1163, 1215], "simpl": [40, 146, 216, 293], "colx": [40, 68, 293, 534, 535, 856, 1223], "coli": [40, 293, 534, 535, 856, 1223], "after": [40, 68, 86, 106, 113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 261, 292, 293, 416, 510, 543, 554, 637, 741, 825, 853, 862, 980, 1070, 1091, 1179, 1215], "befor": [40, 114, 116, 119, 128, 134, 137, 138, 139, 140, 148, 150, 169, 183, 186, 202, 261, 293, 348, 349, 355, 510, 543, 544, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 637, 642, 718, 719, 741, 780, 783, 786, 789, 825, 853, 862, 906, 907, 912, 980, 1070, 1085, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1179, 1185, 1215], "most": [40, 65, 103, 114, 115, 117, 128, 137, 138, 139, 140, 293, 520, 527, 544, 621, 741, 1076, 1085, 1163, 1215, 1222], "mandatori": [40, 293], "return_dtyp": [40, 153, 205, 293, 307, 507, 509, 510, 511, 662, 704, 705, 706, 741, 863, 1070, 1071, 1215], "latter": [40, 169, 293, 862, 980, 1215], "appropri": [40, 134, 254, 293, 554, 741, 1091, 1215], "pure": [40, 293, 1196, 1215], "actual": [40, 106, 144, 146, 232, 293, 1123, 1215], "indic": [40, 113, 114, 115, 116, 120, 122, 126, 128, 141, 142, 146, 183, 184, 186, 187, 229, 232, 237, 239, 252, 293, 318, 429, 440, 441, 442, 443, 445, 446, 447, 448, 450, 451, 452, 474, 491, 497, 515, 518, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 579, 583, 644, 667, 668, 741, 780, 781, 783, 784, 808, 813, 814, 853, 856, 987, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1038, 1055, 1061, 1113, 1114, 1117, 1120, 1125, 1187, 1192, 1215, 1223], "calcul": [40, 78, 183, 244, 265, 293, 358, 413, 414, 415, 455, 468, 487, 505, 570, 586, 591, 653, 655, 673, 675, 718, 719, 722, 730, 741, 780, 819, 827, 853, 915, 975, 976, 977, 1020, 1032, 1051, 1106, 1128, 1132, 1204, 1215], "individu": [40, 59, 144, 150, 229, 254, 293, 511, 601, 741, 763, 808, 853, 895, 1143, 1215], "gridlin": [40, 293], "zoom": [40, 293], "freez": [40, 293], "pane": [40, 293], "top": [40, 156, 258, 293, 758, 823, 853], "index": [40, 104, 108, 111, 136, 152, 173, 179, 183, 184, 186, 187, 192, 193, 198, 199, 202, 220, 226, 227, 229, 230, 231, 239, 242, 254, 256, 263, 264, 270, 293, 301, 315, 316, 317, 319, 387, 429, 432, 462, 463, 474, 475, 491, 492, 497, 499, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 579, 587, 600, 618, 644, 741, 780, 781, 783, 784, 789, 808, 814, 817, 826, 832, 853, 870, 871, 872, 873, 874, 949, 987, 1019, 1026, 1027, 1038, 1039, 1055, 1056, 1061, 1063, 1082, 1113, 1114, 1117, 1120, 1129, 1142, 1160, 1187, 1215], "thu": [40, 169, 293, 673, 862, 980, 1215], "altern": [40, 293, 737], "a2": [40, 79, 81, 293], "occur": [40, 84, 85, 293, 466, 467, 527, 554, 741, 763, 764, 770, 772, 803, 816, 853, 1030, 1031, 1076, 1091, 1215], "equival": [40, 103, 105, 106, 107, 109, 118, 123, 124, 132, 183, 198, 216, 293, 300, 304, 411, 412, 426, 431, 433, 457, 506, 526, 528, 538, 539, 542, 548, 606, 640, 650, 657, 741, 780, 853, 1019, 1148, 1175, 1177, 1178, 1215], "top_row": [40, 293], "top_col": [40, 293], "base": [40, 46, 165, 172, 183, 184, 186, 187, 229, 293, 362, 370, 410, 413, 414, 415, 502, 503, 551, 562, 613, 741, 768, 775, 780, 781, 783, 784, 808, 853, 856, 920, 928, 973, 975, 976, 977, 993, 1066, 1067, 1089, 1155, 1206, 1215, 1223], "scroll": [40, 293], "region": [40, 130, 293], "initit": [40, 293], "5th": [40, 293], "properti": [40, 152, 160, 166, 174, 190, 234, 238, 267, 293, 765, 769, 809, 828, 853, 856, 1223], "readthedoc": [40, 293], "io": [40, 130, 293, 766, 812, 853], "html": [40, 41, 42, 104, 116, 152, 161, 293], "definit": [40, 142, 293, 455, 741, 1020, 1215], "take": [40, 119, 125, 144, 150, 175, 177, 183, 186, 209, 212, 219, 220, 248, 254, 293, 387, 429, 430, 474, 589, 645, 685, 686, 691, 693, 702, 741, 778, 780, 783, 799, 822, 853, 949, 987, 988, 1038, 1188, 1206, 1215], "care": [40, 293, 307, 511, 578, 741, 1118, 1215], "rel": [40, 117, 118, 129, 130, 137, 138, 139, 140, 293, 387, 413, 414, 415, 567, 569, 571, 573, 741, 949, 975, 976, 977, 1215], "working_with_conditional_format": [40, 293], "similarli": [40, 106, 183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "well": [40, 114, 115, 116, 128, 220, 293, 439, 741, 997, 1215], "adjac": [40, 293], "two": [40, 68, 69, 87, 88, 105, 107, 109, 117, 175, 211, 212, 220, 257, 273, 279, 293, 301, 359, 364, 429, 432, 499, 551, 588, 665, 666, 673, 675, 718, 719, 741, 798, 799, 835, 841, 853, 916, 922, 1063, 1089, 1215], "help": [40, 137, 138, 139, 140, 293, 772, 853], "where": [40, 63, 78, 116, 117, 143, 165, 169, 183, 199, 211, 231, 244, 263, 265, 293, 318, 407, 410, 412, 539, 557, 577, 586, 589, 591, 655, 668, 673, 675, 718, 719, 722, 730, 731, 741, 768, 780, 798, 819, 826, 827, 853, 862, 873, 969, 973, 980, 1114, 1128, 1132, 1204, 1206, 1215, 1222], "appear": [40, 106, 293, 652, 741, 1201, 1215], "working_with_sparklin": [40, 293], "inject": [40, 78, 293], "locat": [40, 169, 226, 227, 256, 261, 293, 577, 741, 825, 853, 862, 980, 987, 1113, 1114, 1117, 1187, 1215], "syntax": [40, 172, 205, 216, 293, 593, 600, 601, 614, 737, 775, 816, 853, 1135, 1142, 1143, 1156, 1215], "correctli": [40, 119, 293], "microsoft": [40, 293], "com": [40, 117, 293, 413, 414, 415, 600, 601, 602, 741, 975, 976, 977, 1142, 1143, 1144, 1215], "u": [40, 48, 50, 66, 133, 293, 363, 364, 371, 396, 408, 629, 631, 685, 686, 687, 688, 689, 690, 696, 856, 921, 922, 929, 958, 970, 1171, 1173], "offic": [40, 293], "f5ed2452": [40, 293], "2337": [40, 293], "4f71": [40, 293], "bed3": [40, 293], "c8ae6d2b276": [40, 293], "instanti": [40, 116, 235, 268, 293, 810, 829, 853], "basic": [40, 293, 1223], "random": [40, 41, 135, 142, 144, 146, 188, 233, 293, 434, 486, 554, 576, 582, 654, 741, 753, 991, 1050, 1091, 1112, 1124, 1203, 1215], "dtm": [40, 293, 364, 856, 922], "500": [40, 199, 263, 293, 772, 826, 853, 937, 939, 947, 1101, 1102, 1104, 1215], "val": [40, 228, 293, 335, 511, 547, 648, 731, 741, 807, 853, 890], "10_000": [40, 293], "20_000": [40, 293], "30_000": [40, 293], "increas": [40, 78, 114, 126, 293, 355, 741, 912, 1215], "b4": [40, 293], "light": [40, 293], "twice": [40, 119, 293], "titl": [40, 63, 293], "explicit": [40, 116, 128, 142, 263, 293, 716, 826, 853], "integr": [40, 293, 1223], "multi_fram": [40, 293], "wb": [40, 293], "coordin": [40, 293], "advanc": [40, 119, 220, 293, 499, 1063, 1223], "min_color": [40, 293], "76933c": [40, 293], "mid_color": [40, 293], "c4d79b": [40, 293], "max_color": [40, 293], "ebf1d": [40, 293], "data_bar_2010": [40, 293], "bar_color": [40, 293], "9bbb59": [40, 293], "bar_negative_color_sam": [40, 293], "bar_negative_border_color_sam": [40, 293], "white": [40, 293], "w": [40, 65, 66, 183, 186, 232, 293, 595, 600, 602, 659, 661, 780, 783, 853, 856, 1137, 1142, 1144, 1167], "get_worksheet_by_nam": [40, 293], "fmt_titl": [40, 293], "add_format": [40, 293], "4f6228": [40, 293], "font_siz": [40, 293], "12": [40, 78, 110, 143, 144, 155, 183, 202, 229, 240, 264, 293, 302, 339, 340, 348, 362, 364, 368, 372, 380, 382, 383, 384, 387, 388, 389, 391, 405, 406, 407, 454, 508, 544, 549, 553, 562, 572, 580, 581, 595, 608, 616, 632, 641, 669, 677, 684, 685, 686, 687, 688, 689, 705, 728, 729, 741, 757, 777, 780, 785, 789, 792, 805, 808, 815, 816, 821, 833, 853, 856, 898, 899, 920, 922, 944, 953, 967, 1071, 1110, 1121, 1137, 1150, 1158, 1174, 1215, 1223], "ital": [40, 293], "customis": [40, 293], "trend": [40, 293], "win_loss": [40, 293], "subtl": [40, 293], "tone": [40, 293], "hidden": [40, 293], "id": [40, 86, 130, 259, 279, 293, 561, 614, 615, 652, 741, 841, 1098, 1201, 1215, 1223], "q1": [40, 293], "55": [40, 80, 293], "20": [40, 144, 169, 191, 193, 212, 219, 221, 225, 227, 293, 315, 316, 317, 358, 391, 405, 434, 438, 547, 565, 566, 568, 696, 703, 728, 741, 799, 802, 853, 856, 915, 953, 967, 1215], "35": [40, 293, 358, 741, 915, 1215], "q2": [40, 293], "30": [40, 169, 183, 191, 219, 225, 227, 250, 268, 293, 315, 316, 317, 358, 364, 372, 380, 382, 383, 389, 390, 391, 398, 405, 406, 434, 581, 703, 728, 741, 780, 802, 829, 853, 856, 915, 922, 945, 952, 953, 960, 967, 1215, 1223], "60": [40, 169, 293, 392, 404, 572, 629, 741, 950, 954, 966, 1171], "q3": [40, 293], "40": [40, 169, 219, 293, 391, 405, 434, 632, 741, 802, 853, 933, 967, 1174], "80": [40, 293], "q4": [40, 293], "75": [40, 162, 293, 304, 542, 551, 565, 566, 567, 568, 571, 572, 573, 706, 741, 914, 993, 1089, 1215, 1223], "account": [40, 110, 117, 130, 293, 387, 413, 414, 415, 741, 949, 975, 976, 977, 1215], "flavour": [40, 116, 293], "integer_dtyp": [40, 235, 293, 810, 853, 856], "0_": [40, 293], "just": [40, 128, 211, 293, 798, 853], "unifi": [40, 293, 856], "2_color_scal": [40, 293], "95b3d7": [40, 293], "ffffff": [40, 293], "standardis": [40, 293], "z": [40, 65, 86, 110, 142, 144, 167, 195, 197, 201, 211, 231, 232, 262, 293, 300, 302, 304, 335, 434, 464, 508, 511, 531, 532, 533, 534, 535, 542, 549, 557, 601, 629, 631, 641, 659, 661, 679, 708, 712, 717, 725, 741, 788, 798, 817, 853, 856, 890, 983, 1143, 1171, 1173, 1215, 1222], "score": [40, 293], "conjunct": [40, 87, 119, 125, 293], "a123": [40, 293], "b345": [40, 293], "c567": [40, 293], "d789": [40, 293], "e101": [40, 293], "45": [40, 136, 229, 293, 364, 372, 380, 391, 405, 562, 572, 595, 601, 665, 666, 703, 728, 741, 808, 853, 856, 922, 953, 967, 1137, 1143, 1223], "85": [40, 293, 1223], "font": [40, 293], "consola": [40, 293], "stdev": [40, 293], "ipccompress": [41, 42, 293], "arrow": [41, 42, 58, 103, 104, 116, 117, 120, 122, 131, 199, 231, 232, 249, 251, 293, 853, 1191, 1196, 1215], "ipc": [41, 42, 58, 120, 121, 122, 131, 134, 293, 753, 853], "feather": [41, 120, 131, 293, 753], "access": [41, 79, 80, 81, 82, 130, 133, 152, 199, 230, 231, 293, 510, 602, 741, 831, 853, 1144, 1223], "doc": [41, 42, 117, 137, 139, 161, 293], "python": [41, 42, 62, 104, 114, 115, 116, 136, 137, 139, 152, 199, 205, 231, 232, 251, 279, 293, 307, 364, 507, 509, 511, 602, 685, 686, 688, 689, 728, 729, 731, 741, 747, 841, 863, 922, 934, 935, 936, 941, 1071, 1144, 1195, 1215], "lz4": [41, 42, 45, 58, 59, 293, 853], "zstd": [41, 42, 45, 58, 59, 293, 853], "batch": [42, 112, 115, 116, 122, 132, 134, 293, 763, 793, 794, 853], "pretti": [43, 293], "row_ori": [43, 293], "iobas": [43, 44, 123, 124, 293, 524, 766, 805, 812, 833, 853], "serial": [43, 44, 293, 766, 833, 853], "orient": [43, 79, 81, 107, 109, 293, 853], "slower": [43, 107, 109, 119, 182, 185, 205, 218, 264, 279, 293, 511, 706, 741, 779, 782, 841, 853, 1071, 1215], "common": [43, 78, 84, 85, 86, 263, 293, 508, 531, 741, 747, 763, 764, 770, 772, 803, 816, 826, 853], "write_ndjson": [43, 293], "bit_set": [43, 293, 812, 853], "newlin": [44, 124, 132, 293], "delimit": [44, 57, 124, 132, 220, 252, 293, 592, 853, 1134, 1192, 1215], "parquetcompress": [45, 293], "compression_level": [45, 59, 293, 853], "statist": [45, 59, 114, 115, 126, 133, 162, 293, 414, 415, 455, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 741, 853, 914, 976, 977, 1020, 1106, 1128, 1215], "row_group_s": [45, 59, 293, 853], "use_pyarrow": [45, 114, 120, 122, 126, 293, 1195, 1196, 1215], "pyarrow_opt": [45, 118, 126, 129, 293], "parquet": [45, 59, 126, 127, 133, 293, 753, 853], "gzip": [45, 59, 293, 853], "lzo": [45, 59, 293, 853], "brotli": [45, 59, 293, 853], "choos": [45, 58, 59, 183, 220, 293, 780, 853], "good": [45, 58, 59, 199, 293, 853], "perform": [45, 58, 59, 78, 94, 104, 114, 115, 116, 120, 126, 128, 131, 132, 133, 152, 156, 182, 183, 184, 185, 186, 187, 202, 205, 206, 208, 213, 223, 229, 232, 245, 258, 279, 293, 307, 499, 511, 543, 562, 605, 606, 629, 630, 631, 741, 758, 780, 781, 783, 784, 789, 808, 818, 823, 832, 853, 1071, 1147, 1148, 1171, 1172, 1173, 1215], "fast": [45, 58, 59, 145, 147, 293, 419, 578, 741, 853, 981, 1118, 1215, 1223], "decompress": [45, 58, 59, 293, 853], "backward": [45, 59, 171, 202, 293, 325, 384, 421, 741, 774, 789, 853, 946, 983, 1215], "guarante": [45, 59, 104, 114, 115, 188, 260, 293, 434, 741, 772, 824, 853, 990, 991, 1215], "deal": [45, 59, 199, 293, 303, 305, 390, 391, 405, 554, 629, 631, 658, 660, 687, 741, 853, 860, 861, 952, 953, 967, 1091, 1171, 1173, 1215], "older": [45, 59, 293, 853], "reader": [45, 59, 112, 114, 115, 120, 122, 126, 293, 754, 853], "higher": [45, 59, 222, 285, 293, 552, 569, 715, 741, 804, 847, 853, 1090, 1105, 1215], "mean": [45, 59, 114, 115, 120, 126, 128, 162, 171, 182, 183, 202, 209, 220, 229, 264, 272, 293, 387, 391, 405, 418, 421, 562, 565, 566, 567, 568, 569, 571, 572, 573, 586, 600, 669, 685, 686, 688, 689, 690, 728, 729, 731, 741, 774, 779, 780, 789, 793, 794, 808, 834, 853, 914, 949, 953, 967, 979, 983, 990, 1102, 1128, 1142, 1215], "smaller": [45, 59, 167, 293, 772, 853, 974, 1215], "disk": [45, 57, 58, 59, 120, 293, 816, 853], "22": [45, 59, 136, 143, 293, 368, 388, 391, 405, 407, 408, 564, 565, 566, 568, 571, 572, 573, 629, 741, 853, 856, 953, 967, 970, 1100, 1171, 1215, 1223], "comput": [45, 59, 84, 86, 91, 167, 182, 202, 255, 260, 272, 285, 293, 299, 309, 310, 311, 312, 313, 314, 320, 321, 322, 336, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 359, 410, 417, 455, 469, 477, 482, 483, 484, 487, 488, 489, 490, 495, 500, 502, 503, 504, 527, 543, 544, 550, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 583, 584, 585, 586, 590, 646, 647, 654, 659, 661, 665, 666, 667, 673, 675, 691, 718, 719, 731, 741, 763, 779, 786, 788, 789, 824, 831, 834, 847, 853, 858, 864, 865, 866, 867, 868, 869, 875, 876, 877, 893, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 916, 973, 974, 978, 1020, 1033, 1041, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1059, 1064, 1066, 1067, 1068, 1076, 1085, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1125, 1126, 1127, 1128, 1131, 1189, 1190, 1197, 1203, 1215], "512": [45, 116, 293, 548, 741, 1085, 1215], "implement": [45, 104, 116, 152, 188, 205, 279, 293, 434, 454, 511, 530, 532, 533, 534, 535, 549, 641, 706, 741, 841, 991, 1071, 1113, 1116, 1215], "At": [45, 293], "moment": [45, 161, 293, 455, 586, 741, 1020, 1128, 1215], "write_t": [45, 293], "partition_col": [45, 117, 293], "write_to_dataset": [45, 293], "similar": [45, 148, 175, 202, 239, 293, 394, 397, 491, 543, 561, 579, 731, 741, 772, 789, 814, 853, 956, 959, 1055, 1098, 1120, 1215], "spark": [45, 293], "partit": [45, 117, 118, 126, 129, 133, 134, 200, 218, 293], "we": [45, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 127, 128, 133, 183, 202, 229, 264, 293, 387, 391, 405, 471, 499, 509, 511, 562, 565, 566, 567, 568, 569, 571, 572, 573, 602, 613, 685, 686, 688, 689, 703, 728, 729, 731, 741, 766, 780, 789, 793, 794, 805, 808, 853, 863, 949, 953, 967, 993, 1035, 1071, 1144, 1155, 1215], "use_pyarrow_write_to_dataset": [45, 293], "first": [45, 78, 114, 115, 119, 123, 128, 132, 137, 138, 139, 140, 143, 153, 181, 183, 186, 189, 202, 204, 205, 215, 219, 220, 247, 252, 253, 259, 260, 264, 277, 293, 317, 319, 355, 358, 384, 387, 391, 435, 442, 443, 459, 468, 471, 475, 476, 499, 510, 520, 547, 577, 589, 600, 603, 604, 614, 615, 670, 676, 694, 698, 731, 741, 763, 780, 783, 785, 789, 792, 802, 824, 831, 839, 853, 856, 872, 912, 914, 915, 946, 949, 953, 992, 1002, 1003, 1022, 1032, 1035, 1039, 1040, 1063, 1070, 1114, 1142, 1144, 1145, 1146, 1156, 1157, 1186, 1194, 1215, 1223], "watermark": [45, 293], "partitioned_object": [45, 293], "calendar": [47, 48, 183, 202, 229, 264, 293, 375, 387, 391, 405, 409, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 933, 949, 953, 967, 971], "time_unit": [48, 50, 363, 364, 371, 396, 408, 631, 685, 686, 687, 688, 689, 690, 696, 856, 921, 922, 929, 958, 970, 1173], "time_zon": [48, 365, 390, 631, 685, 686, 687, 688, 689, 856, 920, 923, 928, 952, 1173], "timezon": [48, 856], "m": [48, 50, 66, 201, 293, 362, 363, 364, 370, 371, 394, 396, 397, 408, 600, 629, 630, 631, 634, 685, 686, 687, 688, 689, 690, 696, 788, 853, 856, 920, 921, 922, 928, 929, 956, 958, 959, 970, 1142, 1171, 1172, 1173, 1176], "zoneinfo": [48, 856], "run": [48, 57, 58, 59, 84, 85, 145, 147, 182, 185, 203, 205, 220, 236, 260, 269, 279, 293, 307, 355, 471, 511, 560, 561, 606, 720, 741, 763, 764, 770, 772, 779, 782, 793, 794, 798, 803, 811, 816, 824, 830, 853, 856, 912, 1035, 1071, 1097, 1098, 1148, 1215, 1222, 1223], "available_timezon": [48, 856], "check": [48, 114, 115, 128, 137, 138, 139, 140, 149, 176, 183, 184, 186, 187, 196, 198, 201, 229, 293, 326, 329, 330, 439, 444, 465, 562, 593, 598, 622, 741, 780, 781, 783, 784, 788, 793, 794, 808, 853, 880, 883, 884, 998, 1000, 1004, 1005, 1007, 1014, 1015, 1016, 1018, 1019, 1029, 1115, 1135, 1140, 1164, 1215], "128": [49, 80, 1085, 1215], "bit": [49, 51, 52, 53, 54, 55, 56, 72, 73, 74, 75, 556, 593, 741, 1093, 1135, 1215], "experiment": [49, 85, 134, 262, 263, 293, 355, 391, 511, 565, 566, 567, 568, 569, 571, 572, 573, 741, 764, 853, 892, 912, 953, 993, 1089, 1215], "progress": 49, "expect": [49, 95, 97, 102, 114, 116, 128, 499, 511, 703, 741, 791, 793, 794, 853], "32": [51, 54, 73, 80, 198, 229, 293, 528, 562, 581, 741, 808, 853, 916, 950, 1085, 1105, 1215], "sign": [53, 54, 55, 56, 387, 556, 637, 741, 856, 949, 1007, 1093, 1179, 1215], "maintain_ord": [57, 58, 59, 156, 182, 185, 218, 220, 258, 260, 264, 273, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 301, 324, 429, 432, 501, 511, 651, 674, 741, 758, 764, 770, 772, 779, 782, 803, 816, 818, 823, 824, 835, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 879, 1065, 1200, 1215], "type_coercion": [57, 58, 59, 84, 85, 763, 764, 770, 772, 803, 816, 853], "predicate_pushdown": [57, 58, 59, 84, 85, 763, 764, 770, 772, 793, 794, 803, 816, 853], "projection_pushdown": [57, 58, 59, 84, 85, 763, 764, 770, 772, 793, 794, 803, 816, 853], "simplify_express": [57, 58, 59, 84, 85, 763, 764, 770, 772, 803, 816, 853], "slice_pushdown": [57, 58, 59, 84, 85, 763, 764, 770, 772, 793, 794, 803, 816, 853], "no_optim": [57, 58, 59, 84, 85, 763, 764, 772, 793, 794, 803, 853], "evalu": [57, 58, 59, 170, 172, 202, 293, 304, 318, 355, 437, 460, 461, 499, 510, 542, 658, 660, 664, 668, 685, 686, 688, 689, 691, 700, 701, 714, 717, 723, 728, 729, 731, 732, 741, 763, 775, 786, 788, 789, 853, 873, 912, 1024, 1025, 1206, 1215], "queri": [57, 58, 59, 63, 65, 84, 85, 116, 117, 120, 128, 131, 132, 133, 169, 203, 219, 293, 509, 510, 511, 604, 741, 763, 764, 770, 772, 785, 792, 803, 816, 832, 836, 841, 853, 862, 980, 1071, 1146, 1215, 1222], "ram": [57, 58, 59, 853], "maintain": [57, 58, 59, 156, 258, 293, 324, 501, 577, 651, 741, 758, 818, 823, 853, 879, 1065, 1114, 1200, 1215], "slightli": [57, 58, 59, 119, 853], "faster": [57, 58, 59, 116, 169, 254, 262, 293, 307, 511, 652, 741, 853, 862, 863, 980, 1071, 1215], "coercion": [57, 58, 59, 84, 85, 557, 741, 763, 764, 770, 772, 803, 816, 853], "optim": [57, 58, 59, 84, 85, 126, 128, 131, 132, 133, 199, 203, 219, 223, 231, 260, 293, 763, 764, 770, 772, 793, 794, 803, 816, 824, 832, 841, 853, 893, 1113, 1215], "predic": [57, 58, 59, 84, 85, 128, 131, 132, 133, 134, 172, 198, 230, 293, 422, 656, 694, 741, 763, 764, 770, 772, 775, 793, 794, 803, 806, 816, 832, 853, 984, 1113, 1116, 1215], "pushdown": [57, 58, 59, 84, 85, 763, 764, 770, 772, 793, 794, 803, 806, 816, 832, 853, 1113, 1116, 1215], "project": [57, 58, 59, 84, 85, 128, 130, 131, 132, 133, 307, 588, 589, 741, 763, 764, 770, 772, 793, 794, 803, 806, 812, 816, 853], "slice": [57, 58, 59, 79, 84, 85, 167, 189, 200, 247, 293, 476, 496, 511, 519, 521, 563, 565, 566, 567, 568, 569, 571, 572, 573, 741, 763, 764, 770, 772, 793, 794, 803, 816, 853, 974, 992, 1040, 1060, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1186, 1215], "off": [57, 58, 59, 84, 85, 114, 115, 128, 763, 764, 770, 772, 793, 794, 803, 853], "certain": [57, 58, 59, 85, 93, 118, 129, 192, 193, 264, 293, 625, 626, 763, 764, 803, 853, 1215], "lf": [57, 58, 59, 756, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 786, 787, 788, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 806, 807, 809, 810, 812, 814, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 829, 831, 832, 853, 1222, 1223], "scan_csv": [57, 58, 59, 114, 115, 853], "my_larger_than_ram_fil": [57, 58, 59, 853], "data_pagesize_limit": [59, 853], "reduc": [59, 114, 115, 126, 128, 131, 132, 133, 280, 281, 283, 286, 581, 677, 694, 741, 842, 843, 845, 848, 853, 1073, 1088, 1122, 1185, 1215], "pressur": [59, 114, 115, 126, 128, 132, 133, 581, 741, 853, 1122, 1215], "improv": [59, 120, 131, 853], "speed": [59, 307, 511, 741, 853, 1223], "page": [59, 120, 126, 131, 133, 293, 741, 753, 853, 1215], "integer_list": 60, "float_list": 60, "wrap": [62, 110, 439, 741], "arbitrari": [62, 144, 856], "eager": [63, 64, 65, 66, 67, 68, 183, 220, 262, 293, 363, 365, 368, 371, 376, 383, 384, 387, 388, 390, 391, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 565, 566, 568, 571, 572, 573, 664, 668, 685, 686, 688, 689, 696, 700, 701, 714, 717, 723, 728, 729, 732, 740, 741, 780, 794, 853, 920, 921, 923, 926, 928, 929, 930, 936, 937, 939, 942, 944, 945, 946, 947, 949, 950, 951, 952, 953, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 1222], "against": [63, 116, 471, 853, 1035, 1222, 1223], "eagerli": [63, 499], "unset": [63, 143, 390, 499, 952], "init": [63, 150], "eager_execut": [63, 1222], "itself": [63, 142, 511, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 718, 719, 741, 791, 853, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1215, 1222], "impact": [63, 183, 186, 293, 780, 783, 853, 1222], "declar": [63, 103, 105, 106, 107, 109, 116, 123, 124, 132, 293, 853], "godfath": 63, "1972": 63, "6_000_000": 63, "134_821_952": 63, "dark": 63, "knight": 63, "2008": 63, "185_000_000": 63, "533_316_061": 63, "schindler": 63, "1993": 63, "22_000_000": 63, "96_067_179": 63, "pulp": 63, "fiction": 63, "1994": 63, "8_000_000": 63, "107_930_000": 63, "shawshank": 63, "redempt": 63, "25_000_000": 63, "28_341_469": 63, "release_year": 63, "budget": 63, "gross": 63, "imdb_scor": 63, "ctx": [63, 64, 65, 66, 67, 68], "film": 63, "1990": 63, "BY": [63, 65], "desc": [63, 65], "AS": [63, 721, 1222], "decad": 63, "total_gross": 63, "n_film": 63, "2000": [63, 374, 376, 383, 384, 387, 392, 856, 932, 945, 946, 949, 954], "533316061": 63, "232338648": 63, "1970": [63, 134], "134821952": 63, "register_glob": [64, 66, 68, 1222], "register_mani": [64, 65, 68], "unregist": [64, 65, 66, 1222], "frame_data": [64, 67], "execut": [64, 65, 67, 69, 86, 116, 203, 293, 332, 471, 654, 741, 759, 793, 794, 803, 853, 1035, 1203, 1215, 1222], "collect": [64, 65, 68, 81, 84, 85, 128, 129, 130, 134, 144, 146, 163, 165, 203, 220, 249, 260, 261, 293, 332, 416, 444, 511, 671, 692, 696, 723, 741, 756, 758, 760, 764, 766, 767, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 785, 787, 788, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 806, 807, 808, 810, 812, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 831, 832, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 853, 856, 1005, 1215, 1222, 1223], "global": [65, 69, 87, 88, 135, 144, 149, 254, 293, 510, 741, 889, 891, 1222], "scope": [65, 68, 150, 752, 856, 1222], "map": [65, 66, 105, 106, 114, 115, 116, 117, 120, 121, 126, 127, 128, 131, 157, 166, 174, 199, 205, 224, 230, 231, 232, 250, 293, 302, 391, 405, 508, 509, 510, 511, 530, 543, 561, 654, 705, 741, 760, 769, 806, 853, 856, 914, 953, 967, 1070, 1071, 1098, 1203, 1215, 1222], "recent": [65, 137, 138, 139, 140, 544, 741, 1085, 1215, 1222], "df1": [65, 67, 68, 78, 86, 137, 138, 169, 176, 212, 255, 266, 293, 799, 853], "df2": [65, 67, 68, 78, 86, 137, 138, 169, 176, 255, 266, 293], "join": [65, 69, 78, 84, 85, 86, 88, 202, 263, 293, 438, 543, 741, 763, 764, 770, 772, 789, 803, 816, 826, 831, 853], "named_fram": [66, 1222], "lf1": [66, 68], "o": [66, 120, 131, 331, 355, 599, 649, 741, 885, 912, 1141, 1166, 1199, 1215], "lf2": [66, 68, 853], "p": [66, 80, 219, 293, 547, 723, 741, 802, 853], "q": [66, 232, 293, 723], "r": [66, 114, 115, 128, 547, 595, 599, 600, 601, 602, 614, 741, 856, 1137, 1141, 1142, 1143, 1144, 1156], "lf3": [66, 853], "lf4": [66, 853], "either": [66, 144, 198, 202, 203, 206, 208, 213, 218, 229, 230, 245, 254, 293, 551, 562, 629, 658, 667, 723, 741, 789, 791, 808, 853, 856, 1089, 1171, 1215, 1223], "tbl1": [66, 68], "tbl2": [66, 68], "tbl3": 66, "tbl4": 66, "statement": [67, 731], "hello_world": 67, "baz": [67, 193, 194, 220, 261, 293, 602, 619, 621, 737, 787, 825, 853, 856, 1144, 1163], "hello_data": 67, "foo_bar": [67, 515, 518, 619, 703], "registr": [68, 753], "lifetim": [68, 150, 752], "context": [68, 69, 87, 88, 148, 216, 275, 293, 301, 307, 332, 344, 422, 458, 471, 480, 509, 511, 519, 588, 589, 654, 662, 674, 693, 696, 702, 706, 717, 720, 740, 741, 752, 753, 831, 837, 853, 1021, 1035, 1044, 1203, 1215, 1222], "manag": [68, 69, 87, 88, 752, 753, 1222], "often": [68, 150, 183, 184, 186, 187, 229, 293, 466, 467, 557, 562, 741, 780, 781, 783, 784, 808, 853, 1030, 1031], "want": [68, 85, 106, 169, 205, 216, 293, 422, 509, 510, 511, 561, 565, 566, 567, 568, 569, 571, 572, 573, 605, 676, 685, 694, 714, 717, 732, 741, 764, 785, 792, 853, 856, 862, 980, 1071, 1098, 1147, 1215], "df0": [68, 212, 293, 799, 853], "exit": [68, 69, 87, 150, 1222], "construct": [68, 69, 87, 88, 103, 105, 106, 107, 108, 109, 116, 293, 428, 510, 714, 717, 732, 737, 741, 766, 777, 805, 853, 889, 1215], "persist": 68, "through": [68, 104, 116, 737, 856, 1215], "tbl0": 68, "remain": [68, 114, 115, 128, 165, 167, 172, 293, 360, 361, 422, 470, 620, 621, 741, 768, 775, 793, 794, 853, 917, 918, 974, 984, 1034, 1162, 1163, 1215], "text": [68, 116, 605, 606, 614, 615, 721, 1147, 1148, 1223], "misc": 68, "testing1234": 68, "test1": 68, "test2": 68, "test3": 68, "disabl": [69, 87, 88, 199, 293, 763, 853], "cach": [69, 84, 85, 87, 88, 120, 128, 131, 133, 137, 138, 139, 140, 149, 510, 565, 566, 567, 568, 569, 571, 572, 573, 629, 630, 631, 634, 741, 752, 763, 764, 770, 772, 803, 816, 853, 889, 1171, 1172, 1173, 1176], "under": [69, 79, 80, 81, 82, 87, 88, 733, 734, 736, 737, 742, 743, 746, 748, 749, 750, 1207, 1209, 1211, 1216, 1219, 1220, 1221], "physic": [69, 88, 114, 115, 202, 293, 335, 648, 741, 759, 788, 789, 853, 890, 891, 1198, 1215], "equal": [69, 88, 114, 115, 116, 128, 137, 138, 139, 140, 156, 176, 183, 186, 202, 212, 258, 293, 332, 356, 411, 412, 431, 457, 499, 539, 551, 557, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 611, 612, 637, 718, 719, 737, 741, 758, 780, 783, 789, 799, 818, 823, 853, 913, 1063, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1115, 1153, 1154, 1179, 1215, 1223], "concaten": [69, 86, 87, 88, 175, 219, 293, 547, 671, 672, 741, 802, 853, 895, 1077, 1215], "introduc": [69, 88, 629, 630, 631, 1171, 1172, 1173], "overhead": [69, 88, 128, 131, 132, 133], "amount": [69, 88, 307, 511, 690, 741], "depend": [69, 83, 88, 116, 136, 462, 463, 511, 519, 551, 554, 690, 693, 696, 702, 741, 1026, 1027, 1089, 1091, 1215, 1223], "categori": [69, 88, 252, 293, 334, 335, 356, 551, 741, 888, 890, 913, 993, 1089, 1215], "nest": [69, 110, 126, 133, 167, 293, 753, 974, 1215, 1222, 1223], "clear": [69, 87, 159, 293, 762, 853, 900, 1215], "outermost": 69, "s1": [69, 87, 88, 139, 140, 175, 293, 1019, 1063, 1197, 1206, 1215], "color": [69, 87, 88, 279, 326, 328, 329, 330, 654, 741, 841, 1203, 1215], "red": [69, 87, 88, 279, 654, 741, 841, 1203, 1215], "green": [69, 87, 88, 279, 654, 741, 841, 1203, 1215], "blue": [69, 87, 88, 326, 328, 329, 330, 654, 741, 1203, 1215], "concat": [69, 87, 88, 115, 895, 1077, 1215], "cat": [69, 87, 88, 253, 293, 356, 551, 593, 595, 633, 636, 648, 672, 736, 741, 856, 913, 993, 1089, 1135, 1137, 1175, 1178, 1211, 1215], "decor": [69, 79, 80, 81, 82, 144, 146, 205, 293, 511, 741, 752, 753, 1071, 1215], "dure": [69, 114, 115, 128, 150, 169, 293, 862, 980, 1215], "afterward": [69, 731], "construct_categor": 69, "composit": [70, 143, 1223], "schemadict": [70, 103, 105, 106, 107, 108, 109, 114, 116, 117, 119, 125, 128, 234, 293, 723, 793, 794, 809, 836, 841, 853], "struct_seri": [70, 841], "dai": [71, 183, 186, 200, 202, 229, 264, 293, 383, 384, 387, 388, 391, 398, 405, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 684, 685, 686, 687, 688, 689, 690, 728, 729, 741, 780, 783, 789, 808, 853, 856, 945, 946, 949, 950, 953, 960, 967, 969], "static": [76, 836, 841], "frametyp": [78, 1222], "joinstrategi": [78, 201, 293, 788, 853], "outer": [78, 86, 201, 263, 293, 788, 826, 853], "descend": [78, 156, 237, 243, 258, 293, 317, 493, 554, 578, 588, 589, 654, 667, 741, 758, 813, 818, 823, 853, 872, 1015, 1057, 1091, 1118, 1130, 1203, 1215], "fill": [78, 86, 158, 170, 171, 239, 240, 262, 293, 325, 346, 349, 420, 421, 427, 438, 565, 566, 568, 572, 579, 580, 608, 616, 695, 714, 717, 732, 741, 773, 774, 814, 815, 831, 853, 982, 983, 996, 1082, 1101, 1102, 1104, 1107, 1108, 1109, 1120, 1121, 1150, 1158, 1215], "sort": [78, 79, 137, 138, 143, 156, 183, 184, 186, 187, 202, 212, 219, 220, 229, 237, 258, 264, 277, 287, 293, 317, 335, 422, 511, 543, 562, 566, 567, 568, 569, 571, 573, 578, 589, 654, 656, 667, 706, 741, 758, 770, 780, 781, 783, 784, 789, 799, 802, 803, 808, 813, 816, 823, 839, 849, 853, 856, 872, 890, 1015, 1118, 1200, 1203, 1215, 1223], "origin": [78, 114, 115, 128, 165, 172, 260, 293, 360, 361, 390, 391, 405, 422, 454, 470, 510, 530, 543, 556, 557, 558, 594, 595, 600, 604, 665, 666, 741, 768, 775, 824, 853, 913, 917, 918, 952, 953, 967, 984, 1034, 1070, 1089, 1095, 1136, 1137, 1142, 1146, 1215], "In": [78, 85, 116, 118, 129, 130, 133, 144, 146, 150, 167, 169, 183, 184, 186, 187, 205, 216, 229, 254, 293, 511, 562, 685, 741, 764, 780, 781, 783, 784, 808, 853, 862, 974, 980, 1092, 1215], "duplic": [78, 92, 195, 201, 202, 260, 263, 293, 302, 440, 454, 530, 551, 741, 788, 789, 824, 826, 853, 999, 1089, 1215], "suitabl": [78, 86, 116, 142, 205, 293, 511, 577, 741, 1071, 1114, 1215, 1223], "get": [78, 85, 111, 121, 127, 134, 148, 156, 160, 166, 174, 178, 180, 183, 184, 186, 187, 189, 190, 195, 197, 198, 204, 207, 214, 215, 220, 229, 230, 234, 238, 242, 247, 258, 267, 277, 287, 293, 301, 315, 316, 317, 319, 324, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 371, 423, 429, 435, 453, 456, 459, 473, 479, 501, 512, 513, 514, 519, 521, 525, 536, 537, 545, 546, 552, 560, 562, 587, 591, 642, 643, 651, 655, 693, 698, 702, 706, 707, 708, 709, 710, 711, 712, 722, 726, 730, 741, 758, 764, 765, 769, 776, 780, 781, 783, 784, 785, 790, 792, 808, 809, 817, 821, 823, 828, 839, 849, 853, 870, 871, 872, 873, 874, 879, 888, 895, 904, 905, 906, 907, 908, 909, 910, 911, 929, 989, 992, 997, 999, 1017, 1022, 1037, 1043, 1065, 1072, 1074, 1075, 1077, 1080, 1081, 1086, 1087, 1090, 1097, 1129, 1132, 1186, 1191, 1192, 1200, 1204, 1205, 1215], "speedup": [78, 199, 205, 293, 511, 741, 1071, 1215], "receiv": [78, 116, 128, 205, 219, 279, 293, 511, 547, 741, 802, 853, 1223], "now": [78, 229, 293, 332, 405, 741, 808, 853, 953, 967, 1173], "One": [78, 162, 216, 220, 293, 304, 542, 721, 741, 856, 914, 1215], "whose": [78, 202, 220, 293, 416, 692, 741, 789, 853, 856], "uniqu": [78, 141, 142, 143, 146, 154, 155, 197, 201, 216, 220, 232, 284, 293, 308, 319, 356, 453, 529, 551, 629, 630, 631, 634, 652, 654, 663, 713, 741, 756, 757, 788, 846, 853, 874, 913, 914, 1017, 1078, 1089, 1171, 1172, 1173, 1176, 1201, 1203, 1215], "post": 78, "constrain": [78, 165, 293, 768, 853], "newli": 78, "boolean": [78, 156, 172, 175, 203, 243, 258, 293, 303, 304, 305, 326, 329, 330, 374, 422, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 460, 461, 465, 540, 542, 545, 546, 589, 603, 656, 657, 667, 668, 723, 731, 741, 758, 762, 775, 791, 818, 823, 853, 856, 860, 861, 873, 880, 882, 932, 984, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1017, 1024, 1025, 1029, 1083, 1086, 1087, 1116, 1135, 1196, 1206, 1215], "know": [78, 116, 220, 293, 499, 1205, 1215], "2022": [78, 157, 162, 181, 293, 364, 372, 380, 391, 405, 629, 685, 686, 688, 690, 696, 760, 853, 856, 922, 933, 953, 967, 1171], "df3": [78, 293], "set_tbl_format": 78, "09": [78, 136, 144, 229, 293, 364, 383, 384, 562, 632, 685, 729, 741, 808, 853, 856, 1174], "02": [78, 157, 181, 183, 229, 264, 293, 363, 364, 371, 383, 384, 387, 390, 396, 399, 402, 404, 408, 562, 565, 566, 568, 571, 572, 573, 574, 629, 630, 631, 634, 685, 686, 688, 690, 741, 760, 780, 808, 853, 856, 921, 922, 924, 925, 929, 930, 936, 937, 942, 945, 946, 947, 952, 953, 957, 958, 961, 964, 966, 967, 1063, 1171, 1172, 1173, 1176], "03": [78, 110, 157, 183, 229, 264, 293, 363, 364, 365, 371, 383, 384, 387, 390, 391, 392, 394, 396, 397, 398, 399, 402, 404, 405, 408, 562, 565, 566, 568, 571, 572, 573, 630, 634, 685, 686, 688, 690, 741, 760, 780, 808, 853, 921, 922, 923, 929, 930, 936, 937, 945, 946, 947, 952, 953, 956, 958, 959, 960, 961, 964, 966, 1172, 1176], "af1": 78, "af2": 78, "af3": 78, "keep": [78, 114, 115, 128, 260, 263, 264, 293, 454, 510, 523, 531, 670, 741, 824, 826, 853, 1070, 1215], "easili": [78, 116, 235, 268, 272, 293, 723, 810, 829, 834, 853], "dot": [78, 741, 816, 853, 1215], "product": [78, 161, 293, 348, 353, 359, 741, 772, 853, 906, 910, 916, 1215], "fill_nul": [78, 170, 293, 741, 773, 831, 853, 1215], "sum_horizont": [78, 245, 293, 724], "167": 78, "47": 78, "callabl": [79, 80, 81, 82, 128, 153, 175, 205, 219, 274, 279, 293, 307, 499, 507, 508, 509, 511, 531, 547, 563, 564, 662, 676, 677, 680, 681, 694, 704, 705, 706, 716, 741, 793, 794, 802, 836, 841, 853, 863, 1063, 1071, 1099, 1100, 1215], "by_first_letter_of_column_nam": 79, "f": [79, 115, 162, 181, 200, 249, 259, 262, 293, 300, 499, 581, 599, 629, 631, 662, 671, 704, 741, 1063, 1141, 1171, 1173], "fromkei": [79, 81], "by_first_letter_of_column_valu": 79, "starts_with": [79, 326, 329, 593, 598, 856, 1140], "to_seri": [79, 178, 293, 629, 668, 717, 1171], "xy": [79, 81], "yz": [79, 81], "b1": [79, 81], "b2": [79, 81], "pow_n": 80, "powersofn": 80, "next": [80, 183, 202, 229, 264, 293, 325, 387, 391, 405, 554, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967, 1091, 1215], "ceil": [80, 741, 1215], "previou": [80, 150, 532, 533, 544, 549, 639, 641, 741, 862, 1085, 1215], "floor": [80, 741, 1215], "nearest": [80, 202, 222, 285, 293, 337, 425, 438, 552, 569, 715, 741, 789, 804, 847, 853, 894, 986, 996, 1090, 1105, 1215], "24": [80, 136, 167, 183, 202, 205, 229, 264, 293, 348, 355, 368, 387, 388, 391, 399, 405, 407, 528, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 912, 949, 953, 961, 967, 1019, 1215], "001": [80, 376, 400, 401, 403, 637, 690, 962, 963, 965, 1179], "next_pow2": 80, "prev_pow2": 80, "nearest_pow2": 80, "split_by_column_dtyp": 81, "collect_al": [81, 85, 763, 764, 853], "31": [82, 144, 364, 368, 372, 380, 383, 387, 398, 629, 684, 687, 696, 703, 856, 920, 922, 926, 945, 960, 1171, 1223], "42": [82, 188, 212, 229, 293, 562, 741, 799, 808, 853, 991, 1215], "961": 82, "1764": 82, "4160": 82, "build": [83, 104, 856, 1223], "wa": [83, 137], "compil": [83, 462, 463, 1026, 1027], "gate": 83, "info": [83, 118, 129, 130, 136], "otherwis": [83, 116, 119, 143, 148, 205, 212, 232, 235, 279, 293, 327, 338, 356, 413, 414, 415, 499, 511, 519, 547, 551, 556, 566, 567, 568, 569, 571, 573, 593, 596, 658, 706, 731, 741, 799, 810, 841, 853, 881, 897, 913, 975, 976, 977, 1063, 1071, 1089, 1093, 1113, 1116, 1135, 1138, 1215], "host": [83, 114, 120, 122, 126, 131], "git": 83, "lazy_fram": [84, 85], "comm_subplan_elim": [84, 85, 763, 764, 770, 772, 803, 816, 853], "comm_subexpr_elim": [84, 85, 332, 741, 763, 764, 770, 772, 803, 816, 853], "graph": [84, 203, 293, 763, 786, 831, 853], "parallel": [84, 86, 112, 117, 126, 133, 183, 186, 202, 203, 219, 236, 269, 293, 355, 471, 654, 731, 741, 753, 780, 783, 788, 789, 811, 830, 841, 853, 912, 1035, 1203, 1215], "threadpool": [84, 148], "Will": [84, 85, 763, 764, 770, 772, 803, 816, 853, 1215], "try": [84, 85, 98, 100, 114, 115, 120, 126, 128, 131, 133, 763, 764, 770, 772, 803, 816, 853], "branch": [84, 85, 763, 764, 770, 772, 803, 816, 853], "subplan": [84, 85, 763, 764, 770, 772, 803, 816, 853], "union": [84, 85, 86, 490, 763, 764, 770, 772, 803, 816, 853, 856, 1054], "subexpress": [84, 85, 763, 764, 770, 772, 803, 816, 853], "reus": [84, 85, 763, 764, 770, 772, 803, 816, 853], "part": [84, 85, 103, 119, 144, 601, 620, 621, 764, 770, 772, 803, 816, 831, 853, 1143, 1162, 1163], "fashion": [84, 85, 201, 293, 764, 770, 772, 803, 816, 853], "alpha": [84, 85, 307, 413, 414, 415, 741, 763, 764, 770, 772, 803, 816, 853, 975, 976, 977, 1215], "gevent": [85, 136, 764, 853], "_geventdataframeresult": [85, 764, 853], "await": [85, 764, 853], "asynchron": [85, 764, 853], "them": [85, 103, 105, 106, 107, 109, 123, 124, 125, 128, 132, 133, 168, 169, 183, 202, 212, 229, 264, 293, 439, 478, 536, 537, 543, 562, 671, 685, 686, 688, 689, 728, 729, 741, 764, 771, 780, 789, 799, 808, 853, 856, 862, 980, 1042, 1080, 1081, 1215], "schedul": [85, 764, 853], "insid": [85, 764, 853], "almost": [85, 205, 279, 293, 629, 630, 631, 764, 853, 1071, 1171, 1172, 1173, 1215], "instantli": [85, 764, 853], "asyncio": [85, 764, 853], "releas": [85, 307, 511, 741, 764, 853, 1223], "greenlet": [85, 764, 853], "task": [85, 764, 853], "wrapper": [85, 764, 853], "event": [85, 764, 853], "asyncresult": [85, 764, 853], "timeout": [85, 764, 853], "break": [85, 134, 262, 263, 293, 307, 355, 356, 391, 565, 566, 567, 568, 569, 571, 572, 573, 741, 764, 853, 892, 912, 913, 953, 993, 1089, 1215], "collect_async": [85, 853], "set_except": [85, 764, 853], "futur": [85, 152, 206, 208, 213, 245, 293, 685, 764, 853, 1205, 1215], "rerais": [85, 764, 853], "iter": [86, 103, 116, 145, 147, 156, 172, 182, 183, 184, 185, 186, 187, 199, 200, 229, 230, 231, 232, 235, 236, 237, 243, 258, 259, 268, 269, 271, 272, 293, 355, 543, 589, 659, 661, 667, 670, 671, 672, 679, 683, 708, 712, 720, 723, 725, 737, 741, 758, 775, 779, 780, 781, 782, 783, 784, 808, 810, 811, 813, 818, 823, 829, 830, 834, 853, 912, 1215, 1223], "polarstyp": 86, "concatmethod": 86, "vertic": [86, 169, 206, 208, 213, 245, 262, 266, 293, 592, 1134], "rechunk": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 169, 293, 741, 862, 895, 980, 1077, 1215], "combin": [86, 98, 100, 172, 183, 188, 202, 229, 264, 293, 304, 318, 405, 542, 562, 609, 617, 623, 624, 625, 626, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 816, 853, 953, 967, 1151, 1159, 1165, 1166, 1167, 1168], "vertical_relax": 86, "diagon": [86, 259, 293], "diagonal_relax": 86, "vstack": [86, 169, 293], "addition": [86, 230, 293], "coerc": [86, 557, 741], "supertyp": [86, 171, 293, 306, 741, 774, 853], "mismatch": [86, 98, 124, 137, 139], "find": [86, 173, 179, 293, 577, 741, 1114, 1215], "miss": [86, 114, 115, 128, 170, 293, 325, 413, 414, 415, 427, 448, 450, 499, 741, 773, 853, 975, 976, 977, 1205, 1215], "stack": [86, 191, 266, 293], "don": [86, 183, 205, 260, 262, 293, 307, 355, 471, 511, 543, 741, 780, 824, 853, 856, 912, 1035, 1071, 1115, 1205, 1215], "auto": [86, 103, 105, 106, 107, 109, 123, 124, 126, 132, 133, 259, 293, 405, 853, 953, 967, 1223], "logic": [86, 137, 138, 139, 140, 205, 279, 293, 303, 305, 511, 648, 658, 660, 706, 741, 766, 777, 788, 805, 812, 833, 841, 853, 860, 861, 1071, 1198, 1215], "align_fram": 86, "pattern": [86, 114, 115, 128, 131, 132, 133, 199, 293, 517, 593, 594, 595, 600, 601, 602, 614, 615, 841, 856, 1113, 1116, 1135, 1136, 1137, 1142, 1143, 1144, 1156, 1157, 1215], "collis": 86, "need": [86, 110, 114, 115, 117, 183, 184, 186, 187, 229, 232, 241, 254, 293, 499, 510, 562, 581, 632, 690, 714, 717, 732, 741, 780, 781, 783, 784, 808, 853, 1122, 1174, 1215, 1223], "sure": [86, 103, 108, 114, 115, 120, 122, 126, 183, 184, 186, 187, 223, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "contigu": [86, 103, 108, 114, 115, 120, 122, 126, 128, 131, 132, 133, 223, 293], "relev": 86, "df_h1": 86, "l1": 86, "l2": 86, "df_h2": 86, "r1": 86, "r2": 86, "r3": 86, "df_d1": 86, "df_d2": 86, "df_a1": 86, "df_a2": 86, "df_a3": 86, "enable_string_cach": 87, "stringcach": [87, 88, 201, 293, 753, 889, 891], "reliabl": [87, 88], "wai": [87, 88, 103, 105, 106, 107, 109, 123, 124, 132, 182, 200, 219, 243, 272, 293, 543, 547, 589, 600, 737, 741, 779, 802, 818, 834, 841, 853, 1142], "until": [87, 203, 293, 611, 612, 637, 1153, 1154, 1179], "deprec": [88, 89, 153, 155, 173, 183, 184, 185, 186, 187, 192, 206, 208, 213, 226, 240, 245, 248, 274, 293, 307, 332, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 386, 390, 393, 405, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 549, 563, 580, 594, 607, 608, 609, 610, 613, 616, 617, 623, 629, 631, 641, 644, 645, 662, 669, 682, 683, 685, 687, 704, 717, 728, 741, 757, 777, 780, 781, 782, 783, 784, 793, 805, 815, 822, 833, 836, 853, 862, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 948, 952, 953, 955, 967, 998, 1002, 1004, 1007, 1008, 1014, 1016, 1018, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1089, 1099, 1117, 1121, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1171, 1173, 1187, 1188, 1205, 1215], "sinc": [88, 118, 129, 153, 155, 156, 173, 183, 184, 185, 186, 187, 192, 206, 208, 213, 226, 240, 245, 248, 258, 274, 293, 307, 332, 339, 340, 350, 351, 352, 353, 354, 369, 371, 373, 377, 379, 381, 386, 390, 393, 405, 442, 446, 449, 454, 466, 469, 477, 481, 495, 500, 507, 508, 549, 563, 580, 594, 607, 608, 609, 610, 613, 616, 617, 623, 629, 631, 641, 644, 645, 662, 669, 682, 683, 685, 687, 696, 704, 717, 728, 741, 757, 758, 777, 780, 781, 782, 783, 784, 793, 805, 815, 818, 822, 823, 833, 836, 853, 862, 863, 898, 899, 908, 909, 910, 911, 913, 927, 929, 931, 938, 940, 943, 948, 952, 953, 955, 967, 998, 1002, 1004, 1007, 1008, 1014, 1016, 1018, 1030, 1033, 1041, 1045, 1059, 1061, 1064, 1089, 1099, 1117, 1121, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1171, 1173, 1187, 1188, 1205, 1215], "19": [88, 119, 136, 153, 173, 183, 184, 185, 186, 187, 192, 202, 206, 208, 213, 226, 229, 240, 245, 248, 274, 293, 307, 339, 340, 350, 351, 352, 353, 354, 369, 373, 377, 379, 381, 386, 390, 391, 393, 405, 442, 446, 449, 454, 466, 481, 507, 508, 549, 562, 563, 566, 568, 580, 594, 607, 608, 609, 610, 613, 616, 617, 623, 629, 631, 632, 641, 644, 645, 662, 682, 683, 685, 687, 704, 741, 780, 781, 782, 783, 784, 789, 793, 808, 815, 822, 836, 853, 863, 898, 899, 908, 909, 910, 911, 913, 927, 931, 938, 940, 943, 948, 952, 953, 955, 967, 998, 1002, 1004, 1007, 1008, 1014, 1016, 1018, 1030, 1045, 1061, 1089, 1099, 1117, 1121, 1136, 1149, 1150, 1151, 1152, 1155, 1158, 1159, 1165, 1171, 1173, 1174, 1187, 1188, 1205, 1215], "longer": [88, 114, 128], "accept": [88, 113, 114, 115, 118, 120, 122, 126, 156, 182, 185, 235, 236, 239, 243, 258, 268, 269, 272, 293, 300, 338, 416, 439, 510, 543, 589, 657, 659, 661, 667, 670, 671, 672, 679, 683, 692, 708, 712, 720, 723, 725, 731, 741, 758, 779, 782, 810, 811, 814, 818, 823, 829, 830, 834, 853, 897, 997, 1120, 1215], "disable_string_cach": 88, "finish": [91, 169, 293, 862, 980, 1215], "least": [95, 144, 544, 741, 1085, 1215], "unexpect": [96, 293, 509, 511, 741, 1071, 1215], "caus": [96, 104, 114, 115, 128, 137, 152, 169, 293, 862, 980, 1215], "panic": 96, "incompat": 100, "arrai": [103, 107, 114, 115, 126, 167, 249, 254, 255, 293, 320, 321, 322, 323, 324, 339, 340, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 464, 482, 483, 484, 485, 494, 498, 503, 565, 566, 568, 572, 578, 691, 741, 853, 875, 876, 877, 878, 879, 898, 899, 904, 905, 906, 907, 908, 909, 910, 911, 916, 974, 1028, 1046, 1047, 1048, 1049, 1057, 1058, 1062, 1067, 1068, 1101, 1102, 1104, 1107, 1108, 1109, 1118, 1123, 1191, 1196, 1197, 1205, 1215], "chunkedarrai": [103, 215, 293, 916, 1215], "recordbatch": [103, 200, 293], "schemadefinit": [103, 105, 106, 107, 109, 123, 124, 132, 293, 853], "schema_overrid": [103, 105, 106, 107, 108, 109, 116, 117, 119, 123, 124, 125, 200, 254, 293, 853, 856, 879], "copi": [103, 104, 152, 158, 159, 200, 249, 254, 255, 268, 293, 419, 741, 761, 762, 829, 853, 896, 900, 981, 1191, 1196, 1197, 1215], "closest": 103, "pair": [103, 105, 106, 107, 109, 123, 124, 132, 143, 224, 293, 806, 853, 1223], "sever": [103, 105, 106, 107, 109, 123, 124, 132, 293, 853, 1223], "form": [103, 105, 106, 107, 109, 123, 124, 132, 199, 231, 262, 293, 544, 741, 853, 1085, 1215], "dimens": [103, 105, 107, 109, 123, 124, 132, 293, 558, 741, 853, 1095, 1215], "supportsinterchang": 104, "allow_copi": [104, 152], "interchang": [104, 152], "__dataframe__": 104, "convers": [104, 119, 152, 199, 200, 231, 232, 251, 255, 293, 629, 630, 631, 634, 753, 990, 1171, 1172, 1173, 1176, 1195, 1196, 1197, 1215], "detail": [104, 116, 117, 137, 139, 152, 293, 853, 1223], "latest": [104, 118, 129, 152, 390, 391, 405, 427, 520, 629, 631, 687, 741, 952, 953, 967, 1171, 1173], "from_panda": 104, "from_arrow": 104, "effici": [104, 116, 119, 200, 293], "reli": 104, "therefor": [104, 167, 293, 511, 731, 741, 974, 1215], "becaus": [104, 124, 167, 183, 186, 203, 205, 262, 279, 293, 471, 780, 783, 841, 853, 863, 974, 1035, 1071, 1215], "convert": [104, 108, 118, 119, 125, 129, 152, 250, 251, 252, 253, 254, 257, 293, 323, 357, 365, 394, 397, 498, 499, 508, 531, 553, 602, 613, 629, 630, 631, 632, 634, 741, 777, 853, 878, 891, 923, 956, 959, 1062, 1063, 1144, 1155, 1171, 1172, 1173, 1174, 1176, 1184, 1194, 1195, 1196, 1197, 1205, 1215], "panda": [104, 108, 136, 183, 255, 293, 383, 384, 648, 741, 780, 853, 945, 946, 1197, 1198, 1215], "pd": [104, 108, 648, 741, 1197, 1198, 1215], "df_pd": 104, "dfi": [104, 152], "clone": [105, 106, 107, 108, 109, 158, 254, 255, 293, 761, 853, 896, 1195, 1196, 1197, 1205, 1215], "dimension": [105, 107, 109, 254, 293, 853, 1215], "infer_schema_length": [106, 109, 114, 115, 119, 123, 128, 132, 293, 603, 853, 1145], "NOT": [106, 499, 518, 1222], "typic": [106, 116, 205, 293, 370, 856, 928, 1071, 1215], "clearer": 106, "partial": [106, 114, 128, 293, 853], "mani": [106, 109, 116, 117, 169, 293, 603, 862, 980, 1145, 1215], "scan": [106, 109, 114, 115, 128, 129, 130, 131, 132, 133, 134, 183, 184, 186, 187, 229, 293, 562, 741, 772, 780, 781, 783, 784, 785, 792, 808, 853], "slow": [106, 109, 114, 115, 128, 307, 355, 511, 564, 741, 841, 912, 1100, 1215], "present": [106, 144, 444, 625, 626, 741, 772, 853, 1205, 1215], "np": [107, 172, 254, 293, 429, 644, 741, 775, 853, 987, 1001, 1006, 1010, 1011, 1187, 1215], "ndarrai": [107, 172, 254, 293, 429, 644, 741, 775, 853, 916, 987, 1113, 1114, 1117, 1187, 1196, 1215], "numpi": [107, 136, 161, 199, 231, 232, 251, 254, 255, 293, 536, 537, 564, 741, 853, 1001, 1006, 1010, 1011, 1080, 1081, 1100, 1196, 1197, 1205, 1215], "columnar": [107, 109, 199, 231, 293], "interpret": [107, 109, 114, 115, 128, 293, 853], "yield": [107, 109, 114, 115, 116, 128, 167, 169, 259, 293, 543, 741, 853, 862, 974, 980, 1215], "conclus": [107, 109, 293, 853], "nan_to_nul": [108, 293, 853, 1215], "include_index": 108, "instal": [108, 114, 115, 117, 120, 122, 126, 136, 161, 254, 255, 293, 816, 853, 1197, 1215], "nan": [108, 137, 138, 139, 140, 144, 152, 170, 255, 293, 360, 361, 411, 412, 420, 431, 433, 438, 448, 450, 451, 452, 457, 506, 512, 525, 536, 537, 538, 539, 564, 650, 673, 741, 773, 853, 865, 869, 917, 918, 982, 1010, 1011, 1080, 1081, 1100, 1196, 1197, 1215, 1223], "pd_df": 108, "pd_seri": 108, "tbl": [110, 112, 115], "reconstruct": 110, "repr": [110, 144, 146], "trim": 110, "whitespac": [110, 609, 617, 623, 624, 625, 626, 1151, 1159, 1165, 1166, 1167, 1168], "prompt": 110, "extract": [110, 366, 368, 369, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 385, 386, 388, 389, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 406, 407, 409, 547, 601, 602, 603, 604, 620, 741, 924, 925, 926, 927, 930, 931, 933, 937, 938, 939, 940, 942, 943, 944, 947, 948, 950, 951, 954, 955, 957, 960, 961, 962, 963, 964, 965, 966, 968, 969, 971, 1143, 1144, 1145, 1146], "to_init_repr": [110, 293, 1215], "truncat": [110, 114, 128, 181, 183, 186, 199, 231, 232, 251, 293, 780, 783, 803, 853], "identifi": [110, 211, 218, 260, 293, 798, 824, 853], "compound": [110, 232, 293, 856], "neither": [110, 119, 125, 233, 293, 499, 1063], "source_ac": 110, "source_cha": 110, "ident": [110, 158, 159, 293, 394, 560, 561, 741, 761, 762, 853, 896, 900, 956, 1097, 1098, 1215], "timestamp": [110, 183, 186, 293, 390, 391, 405, 696, 780, 783, 853, 952, 953, 967], "tor_id": 110, "nnel_id": 110, "\u03bc": [110, 144, 183, 199, 202, 229, 231, 232, 251, 264, 293, 362, 363, 364, 365, 370, 372, 376, 380, 383, 384, 387, 390, 391, 392, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 562, 565, 566, 568, 571, 572, 573, 629, 631, 688, 690, 696, 741, 780, 789, 808, 853, 856, 920, 921, 922, 923, 924, 925, 928, 929, 930, 936, 937, 942, 945, 946, 947, 949, 952, 953, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 970, 1171, 1173], "asia": [110, 856, 924, 925, 957], "tokyo": [110, 856], "123456780": 110, "9876543210": 110, "56": [110, 646, 741], "59": [110, 143, 364, 372, 380, 392, 687, 727, 728, 729, 856, 922, 942, 954], "663053": 110, "jst": [110, 856], "803065983": 110, "2055938745": 110, "38": [110, 144], "18": [110, 155, 212, 229, 293, 332, 349, 391, 405, 408, 438, 454, 469, 477, 495, 500, 530, 562, 669, 685, 728, 741, 757, 777, 799, 803, 805, 808, 833, 853, 856, 862, 970, 1033, 1041, 1059, 1064, 1173, 1215], "050545": 110, "source_actor_id": 110, "source_channel_id": 110, "to_list": [110, 229, 293, 1135, 1215], "datatypeclass": 111, "uint32": [111, 136, 157, 167, 293, 317, 368, 372, 376, 378, 380, 382, 385, 388, 389, 392, 406, 407, 429, 432, 462, 463, 480, 557, 594, 595, 605, 606, 644, 648, 741, 760, 853, 856, 873, 886, 926, 930, 937, 939, 942, 944, 947, 950, 951, 954, 968, 969, 974, 1007, 1026, 1027, 1044, 1115, 1136, 1137, 1147, 1148, 1198, 1215], "regular": [111, 199, 230, 231, 264, 293, 344, 416, 458, 480, 593, 594, 595, 600, 601, 602, 614, 615, 692, 741, 856, 1021, 1044, 1135, 1136, 1137, 1142, 1143, 1144, 1156, 1157, 1215], "uint64": [111, 188, 293, 434, 462, 463, 556, 741, 991, 1026, 1027, 1093, 1215], "bigidx": 111, "read": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 293, 428, 509, 731, 741, 766, 772, 777, 805, 853, 862, 980, 1215], "over": [112, 114, 115, 116, 118, 128, 144, 153, 169, 199, 200, 205, 230, 231, 232, 259, 271, 274, 279, 293, 307, 355, 421, 508, 509, 511, 519, 521, 522, 523, 531, 554, 565, 566, 567, 568, 569, 571, 572, 573, 662, 676, 677, 680, 681, 694, 704, 705, 706, 716, 741, 836, 841, 856, 862, 863, 912, 980, 1071, 1101, 1102, 1104, 1108, 1215], "fetch": [112, 128, 203, 293, 761, 763, 785, 792, 853], "ideal": 112, "read_csv_batch": [112, 754], "tpch": [112, 115], "tables_scale_100": [112, 115], "lineitem": [112, 115, 117], "try_parse_d": [112, 114, 115, 128], "n_row": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 200, 293, 772, 853], "handler": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 766, 805, 853], "builtin": [113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 127, 766, 805, 853], "stop": [113, 114, 115, 120, 122, 126, 128, 131, 132, 133, 565, 566, 568, 571, 572, 573, 741, 921, 923, 929, 930, 937, 939, 942, 947, 953, 958], "textio": 114, "has_head": [114, 115, 119, 128], "new_column": [114, 115, 119, 128, 225, 226, 293], "comment_char": [114, 115, 128], "skip_row": [114, 115, 128], "missing_utf8_is_empty_str": [114, 115, 128], "ignore_error": [114, 115, 124, 128], "n_thread": [114, 115], "8192": 114, "csvencod": [114, 115, 128], "low_memori": [114, 115, 126, 128, 132, 133], "skip_rows_after_head": [114, 115, 128], "row_count_nam": [114, 115, 120, 122, 126, 128, 131, 132, 133], "row_count_offset": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sample_s": [114, 115], "eol_char": [114, 115, 128], "raise_if_empti": [114, 115, 119, 125, 128], "truncate_ragged_lin": [114, 128], "fsspec": [114, 115, 120, 122, 126, 129, 130, 131, 133, 136], "remot": [114, 115, 120, 122, 126], "autogener": [114, 115, 128], "column_x": [114, 115, 128], "enumer": [114, 115, 128, 200, 293], "shorter": [114, 115, 128, 499], "comment": [114, 115, 128], "instanc": [114, 115, 128, 133, 144, 146, 150, 157, 169, 175, 293, 333, 520, 565, 566, 567, 568, 569, 571, 572, 573, 676, 680, 694, 737, 741, 760, 794, 832, 853, 862, 886, 980, 1215], "escap": [114, 115, 128], "doesn": [114, 128, 183, 293, 410, 741, 780, 853, 973, 1205, 1215], "complet": [114, 116, 128, 1196, 1215], "wherea": [114, 116, 128, 229, 293, 391, 405, 536, 537, 562, 741, 785, 792, 808, 853, 953, 967, 1080, 1081, 1215], "would": [114, 115, 128, 317, 475, 511, 519, 554, 667, 741, 872, 1039, 1091, 1196, 1215], "prefer": [114, 115, 118, 128, 147, 169, 199, 205, 230, 231, 279, 293, 416, 511, 741, 853, 862, 980, 1071, 1215, 1223], "treat": [114, 115, 128, 344, 458, 480, 593, 595, 614, 615, 741, 1021, 1044, 1135, 1137, 1156, 1157, 1215], "10000": [114, 200, 293], "might": [114, 115, 128, 148, 156, 254, 258, 293, 307, 511, 652, 741, 758, 818, 823, 853, 1197, 1215], "issu": [114, 115, 119, 128, 348, 349, 642, 741, 906, 907, 1185, 1215], "iso8601": [114, 115, 128], "succe": [114, 115, 128], "cpu": [114, 115], "system": [114, 115], "wrongli": 114, "done": [114, 115, 128, 134, 150, 154, 157, 202, 293, 306, 308, 333, 543, 663, 741, 756, 760, 789, 853, 886, 1215], "buffer": [114, 115, 116, 167, 199, 293, 974, 1215], "modifi": [114, 115, 128, 148, 150, 169, 191, 199, 266, 293, 318, 390, 408, 593, 600, 601, 614, 741, 862, 952, 970, 980, 1135, 1142, 1143, 1156, 1175, 1177, 1178, 1215], "upper": [114, 115, 116, 167, 183, 186, 293, 338, 339, 439, 499, 653, 664, 685, 686, 688, 689, 700, 701, 728, 729, 741, 780, 783, 853, 897, 898, 974, 997, 1069, 1202, 1215], "bound": [114, 115, 167, 183, 186, 293, 338, 339, 340, 439, 474, 475, 497, 499, 505, 653, 664, 685, 686, 688, 689, 700, 701, 728, 729, 741, 780, 783, 853, 897, 898, 899, 974, 997, 1038, 1039, 1061, 1069, 1202, 1215], "lossi": [114, 115, 128], "decod": [114, 115], "expens": [114, 115, 126, 128, 132, 133, 145, 147, 183, 184, 186, 187, 199, 205, 229, 230, 231, 232, 259, 260, 293, 307, 511, 562, 741, 780, 781, 783, 784, 808, 824, 853, 862, 980, 1071, 1215, 1223], "aggreg": [114, 115, 126, 175, 182, 183, 185, 186, 206, 208, 210, 213, 216, 220, 221, 222, 229, 244, 245, 262, 265, 272, 273, 276, 278, 293, 301, 422, 436, 507, 509, 511, 543, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 658, 659, 660, 661, 676, 677, 678, 679, 680, 681, 682, 683, 694, 699, 707, 708, 711, 712, 716, 724, 725, 741, 780, 781, 783, 784, 794, 795, 796, 797, 800, 801, 804, 808, 819, 820, 827, 834, 835, 838, 840, 853, 994, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1109, 1215], "parser": 114, "regard": [114, 673], "sens": [114, 120, 122, 126, 131, 212, 264, 293, 543, 741, 799, 853], "particular": [114, 120, 122, 126, 131, 167, 293, 974, 1215], "usernam": [114, 117, 120, 122, 126, 131], "password": [114, 117, 120, 122, 126, 131], "skip": [114, 115, 119, 126, 128, 133, 262, 293, 863, 1071, 1215], "offset": [114, 115, 119, 120, 122, 126, 128, 131, 132, 133, 183, 184, 186, 187, 229, 242, 264, 270, 293, 362, 370, 383, 384, 387, 391, 405, 492, 562, 587, 618, 741, 780, 781, 783, 784, 808, 817, 832, 853, 920, 928, 945, 946, 949, 953, 967, 1056, 1129, 1160, 1173, 1215], "row_count": [114, 115, 120, 122, 126, 128, 131, 132, 133], "sampl": [114, 115, 279, 293, 586, 741, 841, 1128, 1215], "estim": [114, 115, 154, 167, 293, 308, 414, 415, 455, 663, 741, 756, 853, 974, 976, 977, 1020, 1215], "alloc": [114, 115, 167, 223, 293, 741, 974, 1215], "encount": [114, 115, 128, 183, 186, 293, 536, 537, 603, 604, 673, 676, 694, 741, 780, 783, 853, 1080, 1081, 1145, 1146, 1215], "window": [114, 115, 128, 183, 184, 186, 187, 229, 293, 355, 391, 405, 413, 414, 415, 509, 511, 543, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 671, 718, 719, 741, 780, 781, 783, 784, 808, 853, 912, 953, 967, 975, 976, 977, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1215], "rn": [114, 115, 128], "go": [114, 115, 128, 598, 1140], "nodataerror": [114, 115, 119, 125, 128, 753], "lazili": [114, 115, 128, 129, 130, 131, 132, 133, 510, 741, 764, 853], "glob": [114, 115, 128, 131, 132, 133], "continu": [114, 126, 356, 551, 586, 741, 913, 1089, 1128, 1215], "benchmark": [114, 126], "50000": 115, "batchedcsvread": [115, 753], "upon": 115, "creation": 115, "gather": [115, 177, 248, 293, 430, 644, 645, 741, 778, 822, 853, 988, 1187, 1188, 1215], "next_batch": 115, "big": 115, "interest": 115, "seen_group": 115, "big_fil": 115, "df_current_batch": 115, "partition_df": 115, "partition_bi": [115, 200, 293], "as_dict": [115, 218, 293], "fh": 115, "write_csv": [115, 128, 293], "els": [115, 731], "connectionorcursor": 116, "iter_batch": 116, "cursor": 116, "client": 116, "odbc": 116, "driver": [116, 117], "packag": [116, 119], "establish": 116, "resultset": 116, "manner": 116, "veri": [116, 199, 259, 293, 511, 741, 841], "poor": 116, "trip": 116, "still": [116, 117], "intern": [116, 135, 199, 293], "exact": [116, 142, 144, 146, 241, 293, 627, 628, 629, 630, 631, 650, 741, 1171, 1172, 1173], "incom": 116, "execute_opt": 116, "read_arrow_batches_from_odbc": 116, "read_database_uri": 116, "wide": [116, 181, 211, 262, 293, 798, 853], "snowflak": [116, 117], "variou": [116, 293, 741, 853, 856, 1215], "facil": 116, "initialis": [116, 150, 853, 1222], "flight": 116, "flightsql": 116, "flight_sql": 116, "about": [116, 586, 593, 600, 601, 614, 741, 1128, 1135, 1142, 1143, 1156, 1215, 1223], "notabl": 116, "dremio": 116, "influxdb": 116, "notic": [116, 293, 853, 1215], "dbapi2": 116, "connectorx": [116, 117, 136], "optimis": [116, 205, 232, 279, 293, 853, 1071, 1116, 1215, 1223], "translat": 116, "conn": 116, "url": [116, 133, 600, 602, 1142, 1144], "test_data": 116, "user_conn": 116, "normalised_scor": 116, "uint8": [116, 141, 143, 157, 253, 254, 262, 293, 348, 349, 510, 642, 657, 741, 760, 853, 856, 906, 907, 1185, 1215, 1223], "parameteris": 116, "metric": 116, "alchemy_conn": 116, "qmark": 116, "variad": 116, "1000": [116, 119, 167, 253, 293, 376, 400, 962, 1194, 1215, 1223], "localhost": 116, "5432": 116, "uid": 116, "usr": 116, "pwd": 116, "max_text_s": 116, "max_binary_s": 116, "do_someth": 116, "partition_on": 117, "partition_rang": 117, "partition_num": 117, "dbreadengin": 117, "raw": 117, "warehous": 117, "role": 117, "transfer": 117, "document": [117, 119, 394, 397, 604, 629, 630, 631, 634, 737, 891, 956, 959, 1146, 1171, 1172, 1173, 1176], "redshift": 117, "mysql": 117, "mariadb": 117, "clickhous": 117, "oracl": 117, "bigqueri": 117, "pleas": [117, 183, 293, 685, 690, 780, 853], "github": 117, "sfu": 117, "connector": 117, "destin": 117, "develop": [117, 144, 146], "read_databas": 117, "explicitli": [117, 142, 144, 150, 510, 723, 741, 752], "test_tabl": 117, "compani": 117, "testdb": 117, "public": [117, 293, 741, 753, 853, 1215], "myrol": 117, "delta_table_opt": [118, 129], "root": [118, 129, 336, 454, 508, 521, 530, 531, 532, 533, 534, 535, 549, 590, 641, 740, 741, 893, 1131, 1215], "absolut": [118, 129, 130, 137, 138, 139, 140, 299, 413, 414, 415, 741, 858, 975, 976, 977, 1215], "avoid": [118, 231, 293, 302, 741], "year": [118, 129, 183, 202, 229, 264, 293, 374, 375, 387, 388, 391, 405, 406, 562, 565, 566, 567, 568, 569, 571, 572, 573, 684, 685, 686, 687, 688, 689, 728, 729, 741, 780, 789, 808, 853, 932, 933, 949, 950, 953, 967, 968], "2021": [118, 129, 157, 162, 181, 183, 264, 293, 629, 703, 760, 780, 853, 856, 924, 925, 933, 957, 1016, 1171, 1215], "aw": [118, 129, 133], "googl": [118, 129, 130], "service_account": [118, 129], "service_account_json_absolute_path": [118, 129], "az": [118, 129, 130], "adl": [118, 129, 130], "abf": [118, 129, 130], "azure_storage_account_nam": [118, 129, 130], "azure_storage_account_kei": [118, 129, 130], "without_fil": [118, 129, 130], "track": [118, 129, 130, 205, 293, 499, 1222], "sheet_id": [119, 125], "sheet_nam": [119, 125], "xlsx2csv": [119, 136], "openpyxl": [119, 136], "pyxlsb": [119, 136], "xlsx2csv_option": 119, "read_csv_opt": 119, "noreturn": [119, 125], "spreadsheet": [119, 125, 220, 293, 753], "xlsb": 119, "sheetnam": [119, 125], "nor": [119, 125, 233, 293], "fastest": 119, "read_csv": [119, 128], "refin": 119, "significantli": [119, 205, 279, 293, 1071, 1215, 1223], "potenti": [119, 128, 131, 132, 133, 199, 230, 232, 293, 530], "unabl": 119, "julian": 119, "skip_empty_lin": 119, "influenc": [119, 772, 794, 853], "pipelin": 119, "correct": [119, 125, 414, 415, 455, 566, 567, 568, 569, 570, 571, 573, 586, 741, 793, 794, 853, 976, 977, 1020, 1106, 1128, 1215], "known": [119, 144, 499, 836, 841, 1063], "better": [119, 205, 254, 279, 293, 511, 606, 741, 841, 1113, 1116, 1148, 1215], "detect": 119, "memory_map": [120, 126, 131], "greatli": [120, 131], "repeat": [120, 131, 555, 557, 714, 732, 741], "give": [120, 122, 126, 131, 132, 133, 211, 260, 293, 371, 455, 557, 650, 741, 753, 798, 824, 853, 929, 1020, 1215], "That": [120, 793, 794, 853], "filenam": 120, "my_fil": 120, "write_ipc": [120, 293], "read_ndjson": 123, "openoffic": 125, "od": 125, "parallelstrategi": [126, 133], "use_statist": [126, 133], "stabl": [126, 156, 161, 188, 233, 258, 293, 434, 504, 741, 758, 798, 818, 823, 853, 991, 1215], "row_group": [126, 133], "read_tabl": 126, "scan_parquet": [126, 134], "scan_pyarrow_dataset": [126, 133], "hive": [126, 133], "contribut": [126, 567, 569, 571, 573, 741], "with_column_nam": 128, "push": [128, 131, 132, 133, 134], "down": [128, 131, 132, 133, 134, 425, 741, 986, 1215], "therebi": [128, 131, 132, 133], "realloc": [128, 131, 132, 169, 293, 862, 980, 1215], "headerless": 128, "my_long_fil": 128, "thing": [128, 135, 693, 702], "less": [128, 202, 293, 457, 506, 621, 741, 789, 853, 1163, 1223], "breezah": 128, "languag": [128, 183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "hard": [128, 793, 794, 853], "mydf": 128, "lambda": [128, 153, 175, 205, 219, 220, 279, 293, 307, 413, 414, 415, 499, 507, 508, 509, 511, 531, 676, 677, 694, 705, 706, 716, 741, 793, 794, 802, 841, 853, 863, 975, 976, 977, 1063, 1071, 1215], "lower": [128, 183, 186, 222, 285, 293, 338, 340, 439, 505, 508, 531, 552, 556, 569, 664, 685, 686, 688, 689, 700, 701, 715, 728, 729, 741, 780, 783, 804, 847, 853, 897, 899, 997, 1069, 1090, 1093, 1105, 1202, 1215], "simpli": [128, 543, 676, 694, 741], "idx": [128, 183, 200, 293, 499, 780, 853, 1063], "uint16": [128, 348, 349, 642, 741, 856, 906, 907, 1185, 1215], "u16": [128, 144, 1223], "eu": [129, 130], "central": [129, 130, 455, 586, 741, 1020, 1128, 1215], "iceberg": [130, 753], "pyiceberg": [130, 136], "metadata": [130, 183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "secret": [130, 133], "adlf": 130, "my": [130, 134, 635, 1177], "gcp": [130, 133], "oauth": 130, "token": 130, "ya29": 130, "dr": 130, "afm": 130, "py": 130, "impl": 130, "fsspecfileio": 130, "hive_partit": 133, "retri": 133, "prune": [133, 794, 853], "read_parquet": 133, "east": 133, "allow_pyarrow_filt": 134, "comparison": 134, "dset": 134, "folder": 134, "04": [134, 157, 183, 264, 293, 364, 365, 383, 384, 390, 391, 394, 397, 398, 399, 402, 404, 408, 629, 688, 690, 760, 780, 853, 856, 923, 937, 942, 945, 946, 947, 952, 956, 959, 960, 961, 964, 966, 970, 1171], "seed": [135, 188, 233, 293, 434, 486, 554, 576, 582, 741, 991, 1050, 1091, 1112, 1124, 1215], "shuffl": [135, 233, 279, 293, 486, 576, 741, 841, 1050, 1112, 1215], "stdout": [136, 150, 181, 293, 522], "platform": 136, "maco": 136, "13": [136, 144, 158, 159, 170, 171, 180, 193, 203, 215, 229, 268, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 302, 369, 373, 377, 379, 381, 386, 393, 519, 521, 562, 632, 671, 676, 679, 694, 725, 730, 741, 761, 762, 773, 774, 791, 808, 829, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 927, 931, 938, 940, 943, 948, 953, 955, 967, 968, 1004, 1007, 1014, 1016, 1071, 1174, 1215], "arm64": 136, "arm": 136, "64bit": [136, 556, 741, 1093, 1215], "main": [136, 764, 853], "aug": 136, "clang": 136, "14": [136, 144, 173, 192, 205, 206, 208, 213, 226, 245, 248, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 350, 351, 352, 353, 354, 362, 438, 554, 613, 644, 645, 682, 683, 728, 741, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 856, 908, 909, 910, 911, 920, 953, 998, 1018, 1061, 1117, 1155, 1187, 1188, 1205, 1215], "1403": 136, "adbc_driver_sqlit": 136, "cloudpickl": 136, "matplotlib": [136, 803, 816, 853], "26": [136, 370, 406, 928], "pydant": 136, "21": [136, 212, 245, 293, 565, 566, 568, 571, 572, 573, 696, 741, 799, 853, 856], "check_row_ord": [137, 138], "check_column_ord": [137, 138], "check_dtyp": [137, 138, 139, 140], "check_exact": [137, 138, 139, 140], "rtol": [137, 138, 139, 140], "atol": [137, 138, 139, 140], "08": [137, 138, 139, 140, 144, 229, 293, 364, 391, 562, 629, 688, 690, 741, 808, 853, 856, 953, 967, 1171], "categorical_as_str": [137, 138, 139, 140], "nans_compare_equ": [137, 138, 139, 140], "assert": [137, 138, 139, 140, 142, 144, 146, 229, 293, 753, 856], "assertionerror": [137, 138, 139, 140], "compar": [137, 138, 139, 140, 176, 293, 411, 412, 431, 433, 457, 506, 538, 539, 741, 891, 1115, 1215], "unsort": [137, 138], "exactli": [137, 138, 139, 140, 143, 144, 146, 620, 621, 627, 628, 690, 1123, 1162, 1163, 1169, 1170, 1215], "toler": [137, 138, 139, 140, 202, 293, 789, 853], "inexact": [137, 138, 139, 140], "share": [137, 138, 139, 140, 167, 293, 741, 974, 1215], "assert_series_equ": [137, 140, 1223], "assert_frame_not_equ": [137, 140], "pytest": [137, 139], "worthwhil": [137, 139], "shorten": [137, 139], "traceback": [137, 138, 139, 140], "tb": [137, 139, 167, 293, 974, 1215], "short": [137, 139], "tend": [137, 139], "unhelpfulli": [137, 139], "assert_frame_equ": [138, 139, 1223], "assert_series_not_equ": [138, 139], "check_nam": [139, 140], "searchstrategi": [141, 143, 144, 146], "null_prob": [141, 144, 146], "percentag": [141, 144, 146, 544, 741, 1085, 1215], "chanc": [141, 144, 146, 1223], "independ": [141, 142, 144, 146], "flag": [141, 293, 578, 593, 600, 601, 614, 741, 770, 793, 794, 853, 1118, 1135, 1142, 1143, 1156, 1215], "hypothesi": [141, 142, 143, 144, 145, 146, 1223], "sampled_from": [141, 1223], "unique_small_int": 141, "ccy": [141, 1223], "gbp": [141, 1223], "eur": [141, 162, 181, 293, 1223], "jpy": [141, 1223], "min_col": [142, 144], "max_col": [142, 144], "standalon": [142, 144, 856], "mincol": 142, "assign": [142, 183, 293, 499, 543, 554, 620, 621, 741, 780, 853, 1063, 1070, 1091, 1162, 1163, 1215], "minimum": [142, 143, 144, 146, 175, 213, 214, 293, 413, 414, 415, 525, 537, 546, 554, 711, 712, 741, 800, 853, 941, 975, 976, 977, 1081, 1087, 1091, 1215, 1223], "especi": [142, 561, 741, 772, 853, 1098, 1215], "test_unique_xyz": 142, "assert_someth": 142, "punctuat": 142, "test_special_char_colname_init": 142, "inner_dtyp": [143, 146], "select_from": [143, 146], "min_siz": [143, 144, 146, 1223], "max_siz": [143, 144, 146, 1223], "anoth": [143, 182, 293, 355, 363, 474, 497, 515, 518, 741, 779, 831, 853, 912, 921, 980, 1038, 1115, 1215], "randomli": 143, "innermost": 143, "2x": 143, "lst": 143, "11330": 143, "24030": 143, "116": 143, "zz": [143, 146], "uint8_pair": [143, 1223], "uint": [143, 1223], "zip": [143, 1223], "131": 143, "176": 143, "149": [143, 1223], "max_data_s": [144, 146], "include_col": 144, "allow_infin": [144, 146], "allowed_dtyp": [144, 146, 1223], "excluded_dtyp": [144, 146], "describ": [144, 181, 293, 1215], "desir": [144, 499, 1063], "n_chunk": [144, 146, 293, 862, 980, 1215], "randomis": 144, "onto": 144, "pct": 144, "preced": [144, 856], "disallow": [144, 146], "inf": [144, 146, 314, 356, 441, 445, 551, 650, 741, 869, 903, 913, 993, 1001, 1006, 1069, 1085, 1089, 1202, 1215], "exclud": [144, 146, 183, 293, 346, 349, 439, 741, 780, 853, 997, 1016, 1215], "usag": [144, 146, 241, 293, 856, 1123, 1215], "deploi": [144, 146], "characterist": [144, 146], "concret": [144, 146], "test_repr": 144, "isinst": [144, 146, 293], "0x11f561580": 144, "0565": 144, "34715": 144, "5844": 144, "33": [144, 212, 293, 574, 741, 799, 853, 1105, 1215], "076854": 144, "3382": 144, "17": [144, 272, 564, 574, 696, 717, 728, 741, 834, 901, 903, 953, 1100, 1215, 1223], "48662": 144, "7540": 144, "836271": 144, "4063": 144, "06": [144, 157, 264, 293, 364, 382, 389, 390, 391, 405, 406, 760, 853, 856, 952, 953, 967], "39092": 144, "1889": 144, "41": [144, 572, 741, 1223], "874455": 144, "15836": 144, "1755e": 144, "575050513": 144, "profil": [145, 147, 763, 853], "balanc": [145, 147, 1223], "set_environ": 145, "polars_hypothesis_profil": [145, 147], "1500": 145, "constructor": 146, "normal": [146, 183, 293, 410, 455, 586, 741, 780, 853, 973, 1020, 1128, 1215], "test_repr_is_valid_str": 146, "experi": 146, "create_list_strategi": [146, 1223], "polars_max_thread": 148, "behind": 148, "lock": 148, "reason": [148, 499, 509, 741], "temporarili": [148, 150, 183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "pyspark": 148, "udf": [148, 153, 205, 219, 274, 279, 293, 307, 511, 547, 662, 706, 741, 802, 836, 841, 853, 863, 1071, 1215], "recommend": [148, 199, 219, 293, 856], "easi": [150, 1223], "restor": 150, "restore_default": 150, "relat": [150, 856], "set_tbl_row": 150, "initi": [150, 676, 680, 694, 731], "whatev": 150, "were": [150, 206, 208, 213, 245, 293, 737], "enter": 150, "advantag": [150, 219, 293], "set_": 150, "set_verbos": 150, "do_various_th": 150, "cleaner": 150, "breviti": 150, "vein": 150, "durat": [150, 202, 264, 293, 362, 369, 370, 373, 377, 379, 381, 386, 393, 398, 399, 400, 401, 402, 403, 404, 408, 648, 685, 686, 688, 689, 728, 729, 741, 789, 853, 856, 920, 927, 928, 931, 938, 940, 943, 948, 955, 960, 961, 962, 963, 964, 965, 966, 970, 1198, 1215], "set_ascii_t": 150, "write_ascii_frame_to_stdout": 150, "sy": 150, "nan_as_nul": 152, "polarsdatafram": 152, "notimplementederror": 152, "num_row": 152, "get_column": [152, 256, 293], "dtypekind": 152, "inference_s": [153, 205, 293], "256": [153, 205, 293, 1085, 1215], "map_row": [153, 293], "tri": [153, 205, 293], "approxim": [154, 155, 293, 308, 663, 741, 756, 757, 853, 1223], "hyperloglog": [154, 293, 308, 663, 741, 756, 853], "algorithm": [154, 293, 308, 663, 741, 756, 853], "cardin": [154, 293, 308, 663, 741, 756, 853], "approx_n_uniqu": [155, 293, 741, 757, 853], "k": [156, 232, 258, 293, 331, 335, 455, 649, 741, 758, 823, 853, 885, 890, 1020, 1199, 1215], "intoexpr": [156, 182, 183, 184, 185, 186, 187, 229, 235, 236, 239, 243, 258, 268, 269, 272, 293, 306, 326, 329, 330, 439, 466, 467, 469, 477, 478, 487, 488, 489, 490, 495, 500, 543, 577, 579, 580, 589, 619, 620, 621, 627, 628, 659, 661, 667, 670, 671, 672, 673, 675, 676, 679, 680, 683, 687, 694, 708, 712, 717, 720, 723, 725, 731, 741, 758, 779, 780, 781, 782, 783, 784, 808, 810, 811, 814, 818, 823, 829, 830, 834, 853, 880, 883, 884, 997, 1042, 1120, 1161, 1162, 1163, 1169, 1170, 1215], "nulls_last": [156, 243, 258, 293, 317, 588, 741, 758, 818, 823, 853, 872, 1215], "smallest": [156, 258, 293, 331, 741, 758, 823, 853, 885, 1215], "largest": [156, 258, 293, 649, 741, 758, 823, 853, 1199, 1215], "wors": [156, 258, 293, 758, 818, 823, 853], "search": [156, 202, 258, 293, 499, 758, 789, 818, 823, 853], "top_k": [156, 293, 331, 741, 758, 853, 885, 1215], "columnnameorselector": [157, 163, 165, 211, 218, 220, 232, 252, 260, 261, 262, 293, 760, 767, 768, 798, 824, 825, 853], "strict": [157, 293, 327, 333, 593, 596, 613, 629, 630, 631, 634, 741, 760, 853, 881, 886, 1115, 1135, 1138, 1155, 1171, 1172, 1173, 1176, 1215], "due": [157, 183, 202, 229, 232, 264, 293, 302, 333, 370, 387, 391, 405, 454, 530, 532, 533, 534, 535, 549, 562, 565, 566, 567, 568, 569, 571, 572, 573, 641, 685, 686, 688, 689, 728, 729, 741, 760, 780, 789, 808, 853, 886, 928, 949, 953, 967, 1215], "overflow": [157, 293, 333, 348, 349, 613, 642, 741, 760, 853, 886, 906, 907, 1155, 1185, 1215], "2020": [157, 162, 181, 229, 293, 365, 370, 376, 390, 394, 397, 398, 399, 400, 401, 402, 403, 404, 562, 629, 630, 631, 741, 760, 808, 853, 856, 923, 928, 952, 956, 959, 960, 961, 962, 963, 964, 965, 966, 1171, 1172, 1173], "u8": [157, 252, 253, 262, 293, 510, 657, 741, 760, 853, 856, 1192, 1215, 1223], "to_dict": [157, 293, 760, 853], "as_seri": [157, 250, 293, 760, 853, 913, 1089, 1215], "tempor": [157, 183, 184, 186, 187, 199, 229, 231, 232, 251, 293, 338, 439, 562, 565, 566, 567, 568, 569, 571, 572, 573, 741, 753, 760, 780, 781, 783, 784, 808, 853, 856, 897, 997, 1016, 1215], "greater": [158, 202, 293, 431, 433, 586, 611, 612, 621, 637, 741, 789, 853, 1128, 1153, 1154, 1163, 1179, 1215], "cheap": [158, 159, 236, 269, 293, 761, 762, 811, 830, 853, 862, 896, 900, 1215], "deepcopi": [158, 293, 761, 853, 896, 1215], "appl": [160, 191, 201, 224, 227, 250, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 559, 598, 622, 741, 788, 806, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848, 853, 1140, 1164], "banana": [160, 250, 275, 276, 278, 280, 281, 282, 283, 284, 285, 286, 293, 559, 598, 622, 741, 837, 838, 840, 842, 843, 844, 845, 846, 847, 848], "orang": [160, 275, 276, 278, 280, 281, 283, 285, 286, 293, 837, 838, 840, 842, 843, 845, 847, 848], "pairwis": [161, 293], "pearson": [161, 293, 455, 586, 673, 741, 1020, 1128, 1215], "correl": [161, 293, 673, 718], "coeffici": [161, 293, 586, 741, 1128, 1215], "corrcoef": [161, 293], "percentil": [162, 293, 914, 1215], "summari": [162, 293, 914, 1215], "glimps": [162, 189, 293], "median": [162, 220, 293, 421, 567, 741, 831, 853, 914, 1103, 1215], "usd": [162, 181, 293, 1223], "null_count": [162, 165, 293, 355, 741, 853, 912, 914, 990, 1215], "266667": [162, 293], "666667": [162, 194, 265, 281, 293, 413, 741, 787, 827, 843, 853, 975, 1215], "std": [162, 293, 571, 741, 853, 914, 1107, 1215], "101514": [162, 293], "707107": [162, 293, 414, 571, 741, 976, 1215], "57735": [162, 293], "more_column": [163, 168, 237, 261, 293, 416, 692, 741, 767, 771, 813, 825, 853], "subset": [165, 216, 260, 293, 768, 824, 853], "preserv": [165, 172, 182, 185, 201, 205, 254, 255, 293, 360, 361, 422, 470, 583, 741, 768, 775, 788, 853, 917, 918, 984, 1034, 1125, 1197, 1215], "behavior": [165, 293, 474, 497, 768, 853, 862, 913, 1038, 1061, 1089, 1215], "all_horizont": [165, 293, 658, 768, 853], "is_nul": [165, 293, 741, 768, 853, 1215], "sizeunit": [167, 293, 974, 1215], "heap": [167, 293, 741, 974, 1215], "its": [167, 293, 364, 391, 405, 589, 731, 741, 891, 922, 953, 967, 974, 1215], "bitmap": [167, 293, 974, 1215], "structarrai": [167, 293, 974, 1215], "constant": [167, 229, 293, 362, 419, 741, 808, 853, 920, 974, 981, 1215], "unchang": [167, 293, 648, 741, 793, 794, 836, 841, 853, 974, 1198, 1215], "capac": [167, 241, 293, 974, 1123, 1215], "ffi": [167, 293, 974, 1215], "kb": [167, 293, 974, 1215], "mb": [167, 293, 974, 1215], "gb": [167, 293, 974, 1215], "revers": [167, 293, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 508, 531, 532, 533, 549, 641, 741, 853, 904, 905, 906, 907, 908, 909, 910, 911, 1215], "1_000_000": [167, 293, 974, 1215], "25888898": [167, 293], "689577102661133": [167, 293], "long": [168, 211, 262, 293, 771, 798, 853], "letter": [168, 277, 287, 293, 416, 601, 692, 741, 771, 839, 849, 853, 856, 1143], "onlin": [169, 293, 862, 980, 1215], "rerun": [169, 293, 862, 980, 1215], "conveni": [169, 293, 862, 980, 1215], "Not": [170, 293, 448, 450, 510, 741, 773, 853], "fillnullstrategi": [171, 293, 421, 741, 774, 853, 983, 1215], "matches_supertyp": [171, 293, 774, 853], "forward": [171, 202, 239, 293, 383, 421, 427, 491, 579, 741, 774, 789, 814, 853, 945, 983, 1055, 1120, 1215], "consecut": [171, 293, 325, 421, 427, 592, 741, 774, 853, 983, 1134, 1215], "fill_nan": [171, 293, 741, 853, 1215], "intoexprcolumn": [172, 293, 331, 338, 339, 340, 486, 491, 544, 576, 579, 624, 625, 626, 649, 664, 685, 686, 688, 689, 700, 701, 728, 729, 741, 775, 814, 853, 885, 897, 898, 899, 1050, 1055, 1085, 1166, 1167, 1168, 1199, 1215], "constraint": [172, 293, 454, 530, 532, 533, 534, 535, 549, 641, 741, 775, 853], "is_in": [172, 293, 741, 1215], "get_column_index": [173, 293], "reduct": [175, 293], "supercast": [175, 293], "parent": [175, 293], "rule": [175, 293], "arithmet": [175, 293], "zip_with": [175, 293, 1215], "foo11": [175, 293], "bar22": [175, 293], "null_equ": [176, 293, 1115, 1215], "nth": [177, 248, 293, 430, 621, 645, 741, 778, 822, 853, 988, 1163, 1188, 1215], "th": [177, 248, 293, 430, 487, 586, 645, 741, 778, 822, 853, 988, 1051, 1128, 1188, 1215], "retriev": [178, 293, 462, 463, 638, 1026, 1027, 1180], "max_items_per_column": [181, 293], "max_colname_length": [181, 293], "return_as_str": [181, 293, 522], "preview": [181, 293], "few": [181, 293], "exce": [181, 293], "ellipsi": [181, 293], "head": [181, 204, 247, 293, 306, 459, 741, 792, 853, 1022, 1186, 1215], "tail": [181, 189, 293, 306, 586, 741, 853, 992, 1128, 1215], "more_bi": [182, 185, 218, 243, 293, 589, 741, 779, 782, 818, 853], "groupbi": [182, 220, 293, 307, 511, 662, 706, 741, 853], "consist": [182, 185, 218, 293, 629, 779, 782, 853, 862, 980, 1171, 1215], "regardless": [182, 185, 293, 604, 731, 1146], "agg": [182, 183, 186, 220, 229, 293, 301, 422, 424, 429, 432, 511, 588, 589, 656, 674, 706, 741, 763, 764, 770, 772, 779, 780, 781, 783, 784, 803, 808, 812, 816, 853, 856], "Or": [182, 183, 202, 229, 243, 264, 272, 293, 543, 562, 589, 685, 686, 688, 689, 728, 729, 731, 741, 779, 780, 789, 808, 818, 834, 853], "index_column": [183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "timedelta": [183, 184, 186, 187, 202, 229, 264, 293, 368, 387, 388, 391, 405, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 789, 808, 853, 856, 934, 936, 941, 949, 953, 967, 1080, 1081, 1215], "period": [183, 184, 186, 187, 229, 293, 391, 405, 413, 414, 415, 544, 562, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 808, 853, 953, 967, 975, 976, 977, 1085, 1215], "include_boundari": [183, 186, 293, 780, 783, 853], "closedinterv": [183, 184, 186, 187, 229, 293, 439, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 808, 853, 997, 1215], "label": [183, 293, 356, 551, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 741, 780, 803, 853, 913, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1215], "start_bi": [183, 186, 293, 780, 783, 853], "startbi": [183, 186, 293, 780, 783, 853], "check_sort": [183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "dynamicgroupbi": [183, 186, 293], "member": [183, 293, 780, 853, 1005, 1215], "descript": [183, 293, 780, 853], "ascend": [183, 184, 186, 187, 229, 293, 562, 566, 567, 568, 569, 571, 573, 741, 780, 781, 783, 784, 808, 853], "dynam": [183, 186, 293, 499, 565, 566, 567, 568, 569, 571, 572, 573, 741, 780, 783, 853, 1063], "matter": [183, 184, 186, 187, 199, 229, 231, 232, 251, 293, 562, 625, 626, 741, 780, 781, 783, 784, 808, 853], "interv": [183, 184, 186, 187, 229, 264, 293, 356, 391, 405, 439, 551, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 781, 783, 784, 808, 853, 913, 926, 929, 930, 937, 939, 942, 944, 947, 950, 951, 953, 958, 967, 968, 997, 1089, 1215], "_lower_boundari": [183, 293, 780, 853], "_upper_boundari": [183, 293, 780, 853], "harder": [183, 186, 293, 780, 783, 853], "inclus": [183, 184, 186, 187, 229, 293, 439, 562, 565, 566, 567, 568, 569, 571, 572, 573, 619, 620, 664, 685, 686, 688, 689, 700, 701, 728, 729, 741, 780, 781, 783, 784, 808, 853, 997, 1161, 1162, 1215], "datapoint": [183, 186, 293, 780, 783, 853], "boundari": [183, 293, 338, 339, 340, 741, 780, 853, 897, 898, 899, 993, 1215], "mondai": [183, 186, 293, 405, 407, 780, 783, 853, 967, 969], "tuesdai": [183, 186, 293, 780, 783, 853], "wednesdai": [183, 186, 293, 780, 783, 853], "thursdai": [183, 186, 293, 780, 783, 853], "fridai": [183, 186, 293, 780, 783, 853], "saturdai": [183, 186, 293, 780, 783, 853], "sundai": [183, 186, 293, 407, 780, 783, 853, 969], "earliest": [183, 186, 293, 390, 391, 405, 629, 631, 687, 780, 783, 853, 952, 953, 967, 1171, 1173], "weekli": [183, 186, 293, 405, 780, 783, 853, 967], "week": [183, 186, 202, 229, 264, 293, 387, 391, 405, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 783, 789, 808, 853, 856, 949, 953, 967, 969], "sorted": [183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "verifi": [183, 184, 186, 187, 229, 293, 562, 741, 780, 781, 783, 784, 808, 853], "incorrectli": [183, 184, 186, 187, 229, 293, 499, 562, 741, 780, 781, 783, 784, 808, 853], "incorrect": [183, 184, 186, 187, 229, 293, 408, 562, 578, 741, 780, 781, 783, 784, 808, 836, 841, 853, 970, 1118, 1215], "roll": [183, 184, 187, 293, 383, 384, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 671, 718, 719, 741, 780, 781, 784, 853, 945, 946, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1215], "re": [183, 254, 293, 383, 384, 780, 853, 945, 946, 1222], "come": [183, 293, 383, 384, 455, 499, 741, 754, 780, 852, 853, 945, 946, 1020, 1215], "1d": [183, 202, 229, 264, 293, 363, 387, 391, 399, 402, 405, 408, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 703, 728, 729, 741, 780, 789, 808, 853, 856, 921, 929, 936, 949, 953, 958, 961, 964, 967], "set_index": [183, 293, 780, 853], "resampl": [183, 293, 780, 853], "reset_index": [183, 293, 780, 853], "though": [183, 293, 737, 780, 853], "unlik": [183, 293, 780, 853], "evenli": [183, 293, 780, 853], "upsampl": [183, 293, 780, 853], "1n": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "1u": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "microsecond": [183, 199, 202, 229, 231, 232, 251, 264, 293, 387, 391, 400, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 780, 789, 803, 808, 853, 856, 949, 953, 962, 967], "1m": [183, 202, 229, 264, 293, 376, 387, 391, 400, 401, 403, 404, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 962, 963, 965, 966, 967], "minut": [183, 202, 229, 264, 293, 387, 391, 402, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 780, 789, 808, 853, 856, 949, 953, 964, 967], "1h": [183, 202, 229, 264, 293, 370, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 928, 930, 949, 953, 967], "hour": [183, 202, 229, 264, 293, 387, 391, 399, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 687, 688, 689, 690, 727, 728, 729, 741, 780, 789, 808, 853, 856, 949, 953, 961, 967], "1w": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "1mo": [183, 202, 229, 264, 293, 365, 383, 384, 387, 390, 391, 398, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 923, 944, 945, 946, 949, 950, 951, 952, 953, 960, 967, 968], "month": [183, 202, 229, 264, 293, 368, 383, 384, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 684, 685, 686, 687, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 926, 945, 946, 949, 953, 967], "1q": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "quarter": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "1y": [183, 202, 229, 264, 293, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 949, 953, 967], "1i": [183, 202, 229, 264, 293, 387, 562, 565, 566, 567, 568, 569, 571, 572, 573, 741, 780, 789, 808, 853, 949], "3d12h4m25": [183, 202, 229, 264, 293, 391, 405, 562, 685, 686, 688, 689, 728, 729, 741, 780, 789, 808, 853, 953, 967], "correspond": [183, 202, 229, 254, 264, 293, 375, 387, 391, 405, 511, 554, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 728, 729, 741, 763, 780, 789, 808, 853, 933, 949, 953, 967, 1091, 1098, 1215], "daylight": [183, 202, 229, 264, 293, 362, 370, 387, 391, 405, 562, 565, 566, 567, 568, 569, 571, 572, 573, 685, 686, 688, 689, 690, 728, 729, 741, 780, 789, 808, 853, 928, 949, 953, 967], "10i": [183, 229, 293, 562, 741, 780, 808, 853], "datetime_rang": [183, 293, 363, 365, 376, 383, 384, 387, 390, 391, 398, 399, 400, 401, 402, 403, 404, 405, 408, 565, 566, 568, 571, 572, 573, 685, 741, 780, 853, 920, 921, 923, 928, 929, 930, 936, 937, 939, 942, 945, 946, 947, 949, 952, 953, 958, 960, 961, 962, 963, 964, 965, 966, 967], "30m": [183, 293, 391, 405, 780, 853, 953, 967], "lower_bound": [183, 293, 338, 340, 439, 741, 780, 853, 897, 899, 997, 1202, 1215], "upper_bound": [183, 293, 338, 339, 439, 499, 741, 780, 853, 897, 898, 997, 1069, 1215], "bys": [183, 293, 780, 853], "int_rang": [183, 262, 279, 293, 664, 780, 794, 841, 853], "2i": [183, 293, 780, 853], "3i": [183, 293, 780, 853], "a_agg_list": [183, 293, 780, 853], "rollinggroupbi": [184, 187, 229, 293], "group_bi": [185, 216, 220, 292, 293, 301, 422, 424, 429, 432, 509, 511, 588, 589, 656, 674, 706, 741, 763, 764, 770, 772, 782, 803, 816, 852, 853, 856], "group_by_dynam": [186, 229, 293, 783, 808, 853], "_lower_bound": [186, 293, 783, 853], "_upper_bound": [186, 293, 783, 853], "seed_1": [188, 293, 434, 741, 991, 1215], "seed_2": [188, 293, 434, 741, 991, 1215], "seed_3": [188, 293, 434, 741, 991, 1215], "hash": [188, 293, 741, 1215], "Its": [188, 293, 434, 741, 991, 1215], "u64": [188, 293, 434, 556, 741, 803, 853, 991, 1215], "10783150408545073287": [188, 293], "1438741209321515184": [188, 293], "10047419486152048166": [188, 293], "2047317070637311557": [188, 293], "ab": [189, 204, 247, 268, 293, 638, 639, 741, 829, 853, 992, 1022, 1186, 1215], "grown": [191, 293], "insert_column": [192, 293], "intermedi": [194, 293, 787, 853, 1223], "linear": [194, 222, 285, 293, 438, 464, 514, 552, 569, 671, 672, 715, 741, 787, 804, 847, 853, 996, 1028, 1090, 1105, 1215], "333333": [194, 293, 454, 530, 741, 787, 853, 1085, 1109, 1215], "mask": [195, 197, 293, 327, 440, 442, 443, 446, 447, 453, 545, 546, 593, 596, 741, 881, 984, 990, 997, 999, 1002, 1003, 1008, 1009, 1017, 1086, 1087, 1116, 1135, 1138, 1206, 1215], "visual": [195, 197, 293], "scalar": [198, 205, 230, 293, 577, 662, 703, 706, 741, 1019, 1114, 1215], "With": [198, 239, 293, 491, 565, 566, 567, 568, 569, 571, 572, 573, 579, 741, 814, 853, 1019, 1055, 1120, 1215], "buffer_s": [199, 293], "fit": [199, 241, 262, 293, 581, 717, 741, 1122, 1123, 1215], "signific": [199, 205, 293, 307, 511, 575, 741, 1071, 1111, 1215], "4x": [199, 293], "materialis": [199, 200, 230, 231, 232, 293], "rows_by_kei": [199, 231, 293], "iter_row": [200, 230, 231, 232, 293], "17_500": [200, 293], "klmnoopqrstuvwxyz": [200, 293], "__name__": [200, 293], "7500": [200, 293], "15_000": [200, 293], "record_batch": [200, 293], "to_arrow": [200, 293, 1215], "to_batch": [200, 293], "date32": [200, 293], "large_str": [200, 249, 255, 293], "15000": [200, 293], "2500": [200, 293], "left_on": [201, 202, 263, 293, 788, 789, 826, 853], "right_on": [201, 202, 263, 293, 788, 789, 826, 853], "suffix": [201, 202, 235, 268, 272, 293, 302, 329, 448, 450, 451, 452, 508, 531, 532, 534, 535, 543, 549, 559, 598, 625, 628, 741, 788, 789, 810, 829, 831, 834, 853, 856, 883, 1140, 1170], "_right": [201, 202, 293, 788, 789, 853], "joinvalid": [201, 293, 788, 853], "semi": [201, 293, 788, 853], "anti": [201, 293, 788, 841, 853, 1113, 1116, 1215], "cross": [201, 293, 788, 853], "many_to_mani": [201, 293, 788, 853], "one_to_on": [201, 293, 788, 853], "one_to_mani": [201, 293, 788, 853], "many_to_on": [201, 293, 788, 853], "join_asof": [201, 293, 788, 853], "other_df": [201, 293], "by_left": [202, 293, 789, 853], "by_right": [202, 293, 789, 853], "asofjoinstrategi": [202, 293, 789, 853], "allow_parallel": [202, 293, 788, 789, 853], "force_parallel": [202, 293, 788, 789, 853], "asof": [202, 293, 789, 853], "rather": [202, 293, 522, 551, 561, 637, 741, 789, 853, 1089, 1098, 1179, 1215], "asof_join": [202, 293], "distanc": [202, 293, 789, 853, 993, 1215], "plan": [202, 203, 293, 759, 763, 766, 770, 777, 788, 789, 805, 812, 816, 833, 853], "forc": [202, 205, 279, 293, 499, 788, 789, 841, 853, 1071, 1215], "gdp": [202, 293, 789, 853], "2016": [202, 293, 789, 853], "2017": [202, 293, 789, 853], "2018": [202, 293, 390, 789, 853, 952], "2019": [202, 293, 789, 853], "jan": [202, 293, 789, 853], "1st": [202, 293, 789, 853], "4164": [202, 293, 789, 853], "4411": [202, 293, 789, 853], "4566": [202, 293, 789, 853], "4696": [202, 293, 789, 853], "set_sort": [202, 229, 264, 293, 562, 741, 789, 808, 853, 1215], "popul": [202, 293, 789, 853], "12th": [202, 293, 789, 853], "82": [202, 293, 789, 853], "66": [202, 263, 293, 572, 657, 741, 789, 826, 853, 1105, 1215], "83": [202, 293, 789, 853], "52": [202, 268, 293, 406, 574, 741, 789, 829, 853], "request": [203, 293], "describe_plan": [203, 293], "unoptim": [203, 293], "describe_optimized_plan": [203, 293], "show_graph": [203, 293, 853], "un": [203, 293], "graphviz": [203, 293, 816, 853], "much": [205, 262, 279, 293, 355, 474, 497, 511, 605, 606, 706, 741, 841, 912, 1038, 1061, 1071, 1147, 1148, 1215], "intens": [205, 279, 293, 543, 741, 1071, 1215], "materi": [205, 279, 293, 763, 803, 841, 853, 856, 1071, 1215], "parallelis": [205, 279, 293, 1071, 1215], "achiev": [205, 279, 293, 511, 606, 741, 913, 1071, 1089, 1148, 1215], "best": [205, 279, 293, 511, 741, 1071, 1215], "black": [205, 293, 326, 328, 329, 330], "arbitrarili": [205, 293], "rearrang": [205, 293], "transform": [205, 293, 509, 633, 635, 636, 741], "lru_cach": [205, 293, 511, 741, 1071, 1215], "column_1": [205, 259, 293], "axi": [206, 208, 211, 213, 245, 293, 665, 666, 798, 853], "max_horizont": [206, 293, 707], "null_strategi": [208, 245, 293], "nullstrategi": [208, 245, 293], "mean_horizont": [208, 293], "propag": [208, 245, 293, 412, 536, 537, 539, 592, 741, 1080, 1081, 1134, 1215], "spam": [208, 293, 601, 1143], "ignore_nul": [209, 246, 263, 293, 303, 305, 413, 414, 415, 592, 658, 660, 741, 860, 861, 975, 976, 977, 1134, 1205, 1215], "id_var": [211, 293, 798, 853], "value_var": [211, 293, 798, 853], "variable_nam": [211, 293, 798, 853], "value_nam": [211, 293, 798, 853], "unpivot": [211, 293, 798, 853], "massag": [211, 293, 798, 853], "measur": [211, 293, 798, 853], "merg": [212, 293, 799, 853], "caller": [212, 293, 499, 794, 799, 836, 841, 853], "respons": [212, 293, 799, 853], "steve": [212, 293, 799, 853], "elis": [212, 293, 799, 853], "bob": [212, 293, 799, 853], "ag": [212, 293, 799, 853], "anna": [212, 293, 799, 853], "megan": [212, 293, 799, 853], "thoma": [212, 293, 799, 853], "min_horizont": [213, 293, 711, 720], "what": [216, 293, 1205, 1215], "pack": [216, 293], "expr_unique_subset": [216, 293], "df_nuniqu": [216, 293], "df_agg_nuniqu": [216, 293], "include_kei": [218, 232, 293], "offer": [219, 293, 547, 741, 802, 853], "fulli": [219, 233, 293], "cast_str_to_int": [219, 293, 802, 853], "col_nam": [219, 293, 802, 853], "tdf": [219, 293, 802, 853], "aggregate_funct": [220, 293], "pivotagg": [220, 293], "sort_column": [220, 293], "section": [220, 293, 593, 600, 601, 614, 685, 686, 688, 689, 728, 729, 1135, 1142, 1143, 1156], "predefin": [220, 293], "predict": [220, 223, 264, 293], "transpos": [220, 293], "discoveri": [220, 293], "col1": [220, 259, 293, 853, 1223], "col2": [220, 259, 293, 853, 1223], "col3": [220, 293, 1223], "tanh": [220, 293, 741, 1215], "998347": [220, 293], "964028": [220, 293], "999954": [220, 293], "unique_column_valu": [220, 293], "interpol": [222, 285, 293, 421, 514, 552, 569, 715, 741, 804, 847, 853, 1090, 1105, 1215], "rollinginterpolationmethod": [222, 285, 293, 552, 569, 715, 741, 804, 847, 853, 1090, 1105, 1215], "midpoint": [222, 285, 293, 552, 569, 715, 741, 804, 847, 853, 1090, 1105, 1215], "replace_column": [226, 293], "t_0": [229, 293, 562, 565, 566, 567, 568, 569, 571, 572, 573, 741, 808, 853], "t_1": [229, 293, 562, 565, 566, 567, 568, 569, 571, 572, 573, 741, 808, 853], "t_n": [229, 293, 562, 565, 566, 567, 568, 569, 571, 572, 573, 741, 808, 853], "43": [229, 293, 349, 562, 572, 741, 808, 853], "strptime": [229, 293, 390, 562, 741, 808, 853, 952], "2d": [229, 254, 293, 387, 562, 703, 741, 808, 853, 920, 926], "sum_a": [229, 293, 562, 741, 808, 853], "min_a": [229, 293, 562, 741, 808, 853], "max_a": [229, 293, 562, 741, 808, 853], "by_pred": [230, 293], "accord": [230, 293, 510, 551, 685, 686, 688, 689, 728, 729, 741, 933, 1089, 1215], "mutual": [230, 293], "exclus": [230, 293, 657, 664, 700, 701, 741], "clariti": [230, 293], "toomanyrowsreturnederror": [230, 293, 753], "norowsreturnederror": [230, 293, 753], "inherit": [230, 293], "rowserror": [230, 293, 753], "high": [232, 293, 551, 741, 1089, 1215], "cost": [232, 293], "reoconstruct": [232, 293], "defaultdict": [232, 293], "assum": [232, 293, 793, 794, 836, 841, 853], "with_replac": [233, 293, 486, 576, 741, 1050, 1112, 1215], "ordereddict": [234, 293, 723, 809, 853], "named_expr": [235, 236, 268, 269, 293, 720, 723, 810, 811, 829, 830, 853], "threshold": [235, 293, 810, 853], "set_auto_structifi": [235, 268, 293, 810, 829, 853], "auto_structifi": [235, 268, 293, 810, 829, 853], "is_odd": [235, 293, 810, 853], "_is_odd": [235, 293, 810, 853], "sequenti": [236, 269, 293, 811, 830, 853], "fill_valu": [239, 240, 262, 293, 579, 580, 741, 814, 815, 853, 1120, 1121, 1215], "opposit": [239, 293, 491, 579, 741, 814, 853, 1055, 1120, 1215], "lag": [239, 293, 491, 579, 671, 741, 814, 853, 1055, 1120, 1215], "shift": [240, 293, 358, 468, 544, 580, 671, 741, 815, 853, 915, 1032, 1085, 1121, 1215], "shrink": [241, 293, 581, 741, 1122, 1123, 1215], "hold": [241, 293], "ddof": [244, 265, 293, 571, 573, 591, 655, 673, 675, 718, 719, 722, 730, 741, 819, 827, 853, 1107, 1109, 1132, 1204, 1215], "deviat": [244, 293, 414, 571, 591, 722, 741, 819, 853, 976, 1132, 1215], "degre": [244, 265, 293, 553, 571, 573, 591, 655, 666, 673, 675, 718, 719, 722, 730, 741, 819, 827, 853, 1107, 1109, 1132, 1204, 1215], "freedom": [244, 265, 293, 571, 573, 591, 655, 673, 675, 718, 719, 722, 730, 741, 819, 827, 853, 1107, 1109, 1132, 1204, 1215], "divisor": [244, 265, 293, 571, 573, 591, 655, 673, 675, 718, 719, 722, 730, 741, 819, 827, 853, 1107, 1109, 1132, 1204, 1215], "816497": [244, 293], "gather_everi": [248, 293, 645, 741, 822, 853, 1188, 1215], "mostli": [249, 293, 422, 741], "categoricaltyp": [249, 293], "fruit": [250, 293, 559, 598, 622, 741, 1140, 1164], "car": [250, 293, 559, 741], "beetl": [250, 293, 559, 741], "audi": [250, 293, 559, 741], "28": [250, 293, 300, 390, 408, 741, 952, 970, 1223], "300": [250, 293, 1101, 1102, 1104, 1215], "drop_first": [252, 293], "dummi": [252, 293, 1192, 1215], "foo_1": [252, 293], "foo_2": [252, 293], "bar_3": [252, 293], "bar_4": [252, 293], "ham_a": [252, 293], "ham_b": [252, 293], "instantiat": [253, 293, 1194, 1215], "from_repr": [253, 293, 1194, 1215], "df_from_str_repr": [253, 293], "eval": [253, 293, 691, 1194, 1215], "indexord": [254, 293], "fortran": [254, 293], "downstream": [254, 293, 578, 741, 1118, 1215], "applic": [254, 293, 511, 565, 566, 567, 568, 569, 571, 572, 573, 741], "prevent": [254, 293, 302, 348, 349, 454, 530, 642, 741, 853, 906, 907, 1185, 1215], "reshap": [254, 293, 472, 741, 1036, 1215], "ll": [254, 293], "u1": [254, 293], "f4": [254, 293], "view": [254, 293, 511, 741, 1196, 1215], "recarrai": [254, 293], "rec": [254, 293], "use_pyarrow_extension_arrai": [255, 293, 1197, 1215], "extens": [255, 293, 1197, 1215], "trigger": [255, 293, 741, 1197, 1215], "sent": [255, 293, 1196, 1197, 1215], "pandas_df1": [255, 293], "pandas_df2": [255, 293], "pandas_df2_pa": [255, 293], "na": [255, 293, 622, 1197, 1215], "four": [257, 293], "five": [257, 293, 1223], "bottom_k": [258, 293, 649, 741, 823, 853, 1199, 1215], "header_nam": [259, 293], "column_nam": [259, 293], "perhap": [259, 293], "column_2": [259, 293], "name_gener": [259, 293], "base_nam": [259, 293], "my_column_": [259, 293], "my_column_0": [259, 293], "my_column_1": [259, 293], "my_column_2": [259, 293], "new_id": [259, 293], "uniquekeepstrategi": [260, 293, 824, 853], "kept": [260, 293, 824, 853], "decompos": [261, 293, 825, 853], "t_a": [261, 293, 825, 853], "t_b": [261, 293, 825, 853], "t_c": [261, 293, 825, 853], "t_d": [261, 293, 825, 853], "womp": [261, 293, 825, 853], "t_": [261, 293, 825, 853], "t_struct": [261, 293, 825, 853], "step": [262, 293, 664, 700, 701], "unstackdirect": [262, 293], "pivot": [262, 293], "phase": [262, 293], "subject": [262, 293], "ascii_uppercas": [262, 293], "h": [262, 293, 300, 394, 397, 581, 629, 631, 634, 741, 1171, 1173, 1176], "x_0": [262, 293, 413, 414, 415, 741, 975, 976, 977, 1215], "x_1": [262, 293], "y_0": [262, 293, 413, 414, 415, 741, 975, 976, 977, 1215], "y_1": [262, 293], "z_0": [262, 293], "z_1": [262, 293], "include_nul": [263, 293, 826, 853], "syntact": [263, 293, 658, 660, 678, 692, 693, 697, 702, 707, 711, 714, 715, 720, 724, 732, 826, 853, 1131, 1215], "sugar": [263, 293, 658, 660, 678, 692, 693, 697, 702, 707, 711, 714, 715, 720, 724, 732, 826, 853, 1131, 1215], "coalesc": [263, 293, 629, 826, 853, 1171], "400": [263, 293, 826, 853, 1101, 1102, 1104, 1215], "600": [263, 293, 826, 853, 856], "700": [263, 293, 826, 853], "new_df": [263, 293, 826, 853], "time_column": [264, 293], "frequenc": [264, 293], "date_rang": [264, 293, 368, 371, 388, 396, 407, 926, 944, 950, 951, 968, 969], "forward_fil": [264, 293, 346, 349, 741], "varianc": [265, 293, 415, 455, 573, 655, 730, 741, 827, 853, 977, 1020, 1109, 1204, 1215], "grow": [266, 293], "not_": [268, 293, 449, 741, 829, 853, 1215], "not_c": [268, 293, 829, 853], "diff": [268, 293, 398, 399, 400, 401, 402, 403, 404, 487, 741, 829, 853, 960, 961, 962, 963, 964, 965, 966, 1051, 1215], "_diff": [268, 293, 829, 853], "row_nr": [270, 293, 510, 565, 566, 568, 571, 572, 573, 741, 832, 853, 1113, 1215], "named_agg": [272, 834], "_sum": [272, 834], "_mean_squar": [272, 834], "b_sum": [272, 834], "c_mean_squar": [272, 834], "sub": [274, 279, 320, 321, 322, 741, 875, 876, 877], "map_group": [274, 662, 836], "deem": [275, 674, 837], "nr": [277, 287, 839, 849], "triangl": [279, 841], "group_df": [279, 841], "maxim": [280, 315, 741, 842, 870, 1215], "833333": [281, 843], "minim": [283, 316, 463, 581, 589, 741, 845, 871, 1027, 1075, 1122, 1215], "overview": [293, 741, 753, 853, 1215, 1223], "frameinittyp": [293, 853], "entri": [293, 853, 1222], "mydatafram": 293, "df4": 293, "df5": 293, "df6": 293, "approx_uniqu": [293, 853], "corr": 293, "drop_in_plac": 293, "drop_nul": [293, 360, 741, 853, 917, 1215], "estimated_s": [293, 1215], "explod": [293, 424, 543, 558, 741, 853, 1095, 1215], "find_idx_by_nam": 293, "fold": [293, 520, 670, 676, 677, 680, 681, 716], "frame_equ": [293, 405], "group_by_rol": [293, 853], "groupby_dynam": [293, 853], "groupby_rol": [293, 853], "hash_row": 293, "hstack": 293, "insert_at_idx": 293, "is_dupl": [293, 741, 1215], "is_empti": [293, 1215], "is_uniqu": [293, 741, 1215], "iter_slic": 293, "melt": [293, 853], "merge_sort": [293, 853], "n_uniqu": [293, 741, 1215], "pipe": [293, 741, 853], "quantil": [293, 551, 569, 741, 853, 1089, 1105, 1215], "replace_at_idx": 293, "select_seq": [293, 853], "shift_and_fil": [293, 741, 853, 1215], "shrink_to_fit": [293, 1215], "take_everi": [293, 741, 853, 1215], "to_dummi": [293, 1215], "to_numpi": [293, 509, 741, 1215], "to_panda": [293, 1215], "to_struct": [293, 601], "unnest": [293, 356, 551, 560, 601, 602, 620, 621, 639, 741, 853, 913, 1063, 1089, 1097, 1162, 1163, 1215], "unstack": 293, "with_columns_seq": [293, 853], "write_avro": 293, "write_databas": 293, "write_delta": 293, "write_excel": 293, "write_ipc_stream": 293, "write_json": [293, 853], "write_parquet": 293, "cum_prod": [300, 353, 741, 910, 1215], "ghi": [300, 601, 741, 856, 1143], "94": [301, 741], "to_uppercas": [302, 534, 602, 741], "confus": [303, 448, 450, 741], "kleen": [303, 305, 658, 660, 741, 860, 861, 1215], "bitwis": [304, 542, 657, 658, 659, 660, 661, 741], "upcast": [306, 741], "skip_nul": [307, 511, 741, 863, 1071, 1215], "pass_nam": [307, 511, 741], "mapelementsstrategi": [307, 511, 741], "thread_loc": [307, 511, 741], "map_el": [307, 509, 657, 741, 863, 1215], "unknown": [307, 510, 511, 600, 703, 741, 1142], "stage": [307, 741], "code": [307, 326, 328, 329, 330, 511, 578, 741, 772, 791, 853, 1118, 1215], "gil": [307, 511, 741], "invers": [309, 310, 311, 312, 313, 314, 741, 864, 865, 866, 867, 868, 869, 1215], "cosin": [309, 310, 341, 342, 509, 741, 864, 865, 901, 902, 1215], "570796": [309, 311, 741, 864, 866, 1215], "hyperbol": [310, 312, 314, 342, 585, 647, 741, 865, 867, 869, 902, 1127, 1190, 1215], "sine": [311, 312, 509, 584, 585, 741, 866, 867, 1126, 1127, 1215], "881374": [312, 741, 867, 1215], "tangent": [313, 314, 646, 647, 741, 868, 869, 1189, 1190, 1215], "785398": [313, 665, 666, 741, 868, 1215], "arg_wher": [318, 741], "i8": [323, 498, 581, 714, 717, 732, 741, 878, 915, 1062, 1096, 1202, 1215], "seen": [325, 427, 741], "substr": [326, 329, 330, 593, 598, 614, 615, 619, 620, 621, 622, 856, 880, 883, 884, 1135, 1140, 1156, 1157, 1161, 1162, 1163, 1164], "ends_with": [326, 330, 593, 622, 856, 1164], "yellow": [326, 328, 329, 330], "x00": [326, 328, 329, 330], "xff": [326, 328, 329, 330], "contains_with_lit": 326, "contains_with_expr": 326, "transferencod": [327, 328, 596, 597, 881, 882, 1138, 1139], "hex": [327, 328, 596, 597, 881, 882, 1138, 1139], "base64": [327, 328, 596, 597, 881, 882, 1138, 1139], "code_encoded_hex": 328, "000000": 328, "ffff00": 328, "0000ff": 328, "anywher": [329, 330, 629, 630, 631, 1171, 1172, 1173], "ends_with_lit": 329, "ends_with_expr": 329, "starts_with_lit": 330, "starts_with_expr": 330, "complex": [331, 355, 649, 741, 885, 912, 1199, 1215], "frac": [331, 413, 414, 415, 586, 649, 741, 885, 975, 976, 977, 1128, 1199, 1215], "supersed": [332, 741], "to_fram": [334, 371, 391, 396, 405, 629, 913, 1089, 1113, 1116, 1162, 1163, 1171, 1215], "categoricalord": [335, 890], "lexic": [335, 856, 890, 892], "259921": [336, 741, 893, 1215], "587401": [336, 741], "numericliter": [338, 339, 340, 741, 897, 898, 899, 1215], "temporalliter": [338, 339, 340, 741, 897, 898, 899, 1215], "outsid": [338, 741, 897, 1215], "clip": [339, 340, 741, 898, 899, 1215], "543081": [342, 741, 902, 1215], "cotang": [343, 741, 903, 1215], "cumul": [345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 676, 677, 678, 679, 680, 681, 682, 683, 741, 904, 905, 906, 907, 908, 909, 910, 911, 1215], "cum_count_revers": [345, 741], "cum_max_revers": [346, 741], "cum_max_all_fil": [346, 741], "cum_min_revers": [347, 741], "cum_prod_revers": [348, 741], "cum_sum_revers": [349, 741], "value_cum_sum": [349, 741], "value_cum_sum_all_fil": [349, 741], "cum_count": [350, 741], "cum_max": [351, 741, 908, 1215], "cum_min": [352, 741, 909, 1215], "cum_sum": [354, 437, 640, 679, 682, 741, 786, 853, 911, 1019, 1215], "min_period": [355, 413, 414, 415, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 718, 719, 741, 912, 975, 976, 977, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1215], "slide": [355, 741, 912, 1215], "slot": [355, 358, 468, 741, 912, 915, 1032, 1215], "realli": [355, 741, 912, 1215], "visit": [355, 741, 912, 1215], "left_clos": [356, 551, 741, 913, 1089, 1215], "include_break": [356, 551, 741, 913, 1089, 1215], "bin": [356, 551, 657, 734, 741, 913, 993, 1089, 1209, 1215], "discret": [356, 358, 410, 468, 487, 551, 741, 913, 915, 973, 993, 1032, 1051, 1089, 1215], "plu": [356, 504, 741, 913, 1068, 1089, 1215], "endpoint": [356, 551, 565, 566, 567, 568, 569, 571, 572, 573, 741, 913, 1089, 1215], "observ": [356, 413, 414, 415, 551, 741, 913, 975, 976, 977, 1089, 1215], "fall": [356, 551, 561, 741, 913, 997, 1089, 1098, 1215], "qcut": [356, 741, 913, 1215], "breakpoint": [356, 551, 741, 913, 1089, 1215], "brk": [356, 551, 741], "foo_bin": [356, 551, 741], "radian": [357, 665, 741], "720": [357, 553, 741], "540": [357, 553, 741], "360": [357, 553, 741], "180": [357, 553, 741], "null_behavior": [358, 468, 741, 915, 1032, 1215], "nullbehavior": [358, 468, 741, 915, 1032, 1215], "drop_nan": [361, 741, 918, 1215], "utc": [362, 365, 370, 390, 629, 631, 856, 920, 923, 928, 952, 1171, 1173], "usual": [362, 920], "vari": [362, 920, 1223], "rare": [362, 920], "countri": [362, 920], "switch": [362, 920], "samoa": [362, 920], "apia": [362, 920], "did": [362, 920], "2011": [362, 920], "dst_offset": [362, 920], "2012": [362, 920], "replace_time_zon": [362, 370, 924, 925, 957], "pacif": [362, 920], "11h": [362, 920], "13h": [362, 920], "lose": [363, 921], "time_unit_m": [363, 921], "time_unit_n": [363, 921], "naiv": [364, 922, 1173], "compon": [364, 392, 629, 631, 690, 922, 954, 1171, 1173], "resolv": 364, "tm": [364, 856], "456000": [364, 922], "101000": 364, "d1": 364, "d2": 364, "d3": 364, "europ": [365, 370, 390, 923, 928, 952], "london": [365, 370, 390, 923, 928, 952], "gmt": [365, 370, 390, 923, 928, 952], "bst": [365, 370, 390, 923, 928, 952], "weekdai": [368, 388], "ordinal_dai": [368, 407], "day_of_month": [368, 388, 407], "day_of_year": [368, 388, 407], "356": [368, 388, 407], "357": [368, 388, 407], "358": [368, 388, 407], "359": [368, 388, 407], "total_dai": [369, 927], "base_utc_offset": [370, 928], "0m": [370, 928], "epochtimeunit": [371, 696, 929], "unix": [371, 696, 929], "epoch_n": [371, 929], "epoch_": [371, 929], "978307200000000": [371, 396, 929, 958], "978307200": [371, 929], "978393600000000": [371, 396, 929, 958], "978393600": [371, 929], "978480000000000": [371, 396, 929, 958], "978480000": [371, 929], "2010": [372, 380, 856], "total_hour": [373, 931], "leap": [374, 387, 932, 949], "2002": [374, 387, 932, 949, 971], "iso": [375, 406, 407, 933, 968, 969], "1977": [375, 409], "1978": [375, 409], "1979": [375, 409], "calendar_year": [375, 409], "1976": [375, 409], "1_001": [376, 400, 401, 403], "002": [376, 400, 401, 403, 690, 962, 963, 965], "003": [376, 400, 401, 403], "3000": 376, "997": [376, 400, 401, 403], "997000": 376, "998": [376, 400, 401, 403], "998000": 376, "999": [376, 400, 401, 403, 856, 1223], "999000": [376, 856], "total_microsecond": [377, 938], "total_millisecond": [379, 940], "total_minut": [381, 943], "think": [383, 384, 945, 946], "vectoris": [383, 384, 945, 946], "tseri": [383, 384, 945, 946], "monthend": [383, 945], "rollforward": [383, 945], "monthbegin": [384, 946], "rollback": [384, 946], "total_nanosecond": [386, 948], "minu": [387, 949], "dictat": [387, 741, 949], "2005": [387, 949], "date_plus_1i": [387, 949], "1y2mo": [387, 949], "date_min": 387, "1998": [387, 949], "1999": [387, 856, 949], "2003": [387, 696, 949], "2004": [387, 949], "2006": [387, 949], "new_dat": 387, "ordin": [388, 554, 741, 950, 1091, 1215], "366": [388, 950], "use_earliest": [390, 405, 629, 631, 687, 952, 967, 1171, 1173], "ambigu": [390, 391, 405, 629, 631, 687, 952, 953, 967, 1171, 1173], "convert_time_zon": [390, 952], "london_timezon": [390, 952], "amsterdam": [390, 952], "london_to_amsterdam": [390, 952], "cet": [390, 952], "cest": [390, 952], "ts_local": [390, 952], "brussel": [390, 952], "half": [391, 413, 414, 415, 741, 953, 975, 976, 977, 1215], "localis": [391, 405, 953, 967], "dst": [391, 405, 953, 967], "cst": [391, 405, 953, 967], "cdt": [391, 405, 953, 967], "225": [391, 405], "10m": [391, 405, 953, 967], "milli": [392, 954], "micro": [392, 954], "456789": [392, 856, 954], "111110": [392, 954], "765431": [392, 954], "11111": [392, 954], "total_second": [393, 955], "to_str": [394, 956], "datetime_str": [394, 397], "timestamp_n": [396, 958], "timestamp_m": 396, "978307200000": 396, "978393600000": 396, "978480000000": 396, "strftime": [397, 959], "days_diff": 398, "hours_diff": 399, "microseconds_diff": 400, "milliseconds_diff": 401, "minutes_diff": 402, "1440": [402, 964], "nanoseconds_diff": 403, "seconds_diff": 404, "safe": [405, 556, 741, 953, 967, 1093, 1173, 1196, 1215], "53": [406, 968], "time_unit_u": 408, "32971": [408, 970], "32974": [408, 970], "32976": [408, 970], "iso_year": 409, "pk": [410, 741, 973, 1215], "probabl": [410, 551, 741, 973, 1089, 1215], "459148": [410, 741], "754888": [410, 741], "eq": [412, 741, 1215], "span": [413, 414, 415, 741, 975, 976, 977, 1215], "half_lif": [413, 414, 415, 741, 975, 976, 977, 1215], "adjust": [413, 414, 415, 586, 741, 975, 976, 977, 1128, 1215], "exponenti": [413, 414, 415, 417, 548, 741, 975, 976, 977, 978, 1215], "weight": [413, 414, 415, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 586, 741, 975, 976, 977, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1128, 1215], "decai": [413, 414, 415, 741, 975, 976, 977, 1215], "term": [413, 414, 415, 741, 975, 976, 977, 1215], "mass": [413, 414, 415, 741, 975, 976, 977, 1215], "gamma": [413, 414, 415, 741, 975, 976, 977, 1215], "foral": [413, 414, 415, 741, 975, 976, 977, 1215], "geq": [413, 414, 415, 741, 975, 976, 977, 1215], "theta": [413, 414, 415, 741, 975, 976, 977, 1215], "life": [413, 414, 415, 741, 975, 976, 977, 1215], "exp": [413, 414, 415, 741, 975, 976, 977, 1215], "ln": [413, 414, 415, 741, 975, 976, 977, 1215], "smooth": [413, 414, 415, 741, 975, 976, 977, 1215], "factor": [413, 414, 415, 648, 741, 975, 976, 977, 1198, 1215], "leq": [413, 414, 415, 741, 975, 976, 977, 1215], "imbal": [413, 414, 415, 741, 975, 976, 977, 1215], "ew": [413, 414, 415, 741, 975, 976, 977, 1215], "w_i": [413, 414, 415, 741, 975, 976, 977, 1215], "recurs": [413, 414, 415, 741, 975, 976, 977, 1215], "y_t": [413, 414, 415, 741, 975, 976, 977, 1215], "y_": [413, 414, 415, 741, 975, 976, 977, 1215], "x_t": [413, 414, 415, 741, 975, 976, 977, 1215], "x_2": [413, 414, 415, 741, 975, 976, 977, 1215], "428571": [413, 741, 975, 1215], "bia": [414, 415, 455, 570, 586, 741, 976, 977, 1020, 1106, 1128, 1215], "unbias": [414, 415, 741, 976, 977, 1215], "963624": [414, 741, 976, 1215], "928571": [415, 741, 977, 1215], "wildcard": [416, 676, 677, 680, 681, 694, 716, 741], "regex": [416, 517, 593, 594, 595, 598, 600, 601, 602, 614, 615, 622, 692, 741, 856, 1135, 1136, 1137, 1140, 1142, 1143, 1144, 1156, 1157, 1164], "aa": [416, 593, 692, 741, 1135], "ba": [416, 622, 692, 741, 856], "cc": [416, 692, 741], "718282": [417, 741], "389056": [417, 741], "54": [417, 741, 1223], "59815": [417, 741], "expand": [418, 516, 517, 557, 741, 856, 979, 1215], "pythonliter": [419, 741, 981, 1072, 1075, 1215], "extrem": [419, 564, 741, 981, 1100, 1215], "group_col": [422, 656, 741], "g1": [422, 656, 741], "g2": [422, 656, 741], "lt": [422, 656, 741, 1215], "gte": [422, 656, 741], "exprlistnamespac": [424, 741], "divis": [426, 650, 741], "truediv": [426, 741], "9774092659964970114": [434, 741], "13614470193936745724": [434, 741], "1101441246220388612": [434, 741], "11638928888656214026": [434, 741], "13382926553367784577": [434, 741], "interpolationmethod": [438, 741, 996, 1215], "regrid": [438, 741], "grid": [438, 741], "df_original_grid": [438, 741], "grid_point": [438, 741], "df_new_grid": [438, 741], "conflat": [439, 741], "finit": [441, 650, 673, 741, 1001, 1215], "occurr": [442, 443, 446, 447, 654, 741, 993, 1002, 1003, 1008, 1009, 1203, 1215], "is_first_distinct": [442, 741, 1002, 1215], "optional_memb": [444, 741, 1005, 1215], "infinit": [445, 650, 741, 1006, 1215], "is_last_distinct": [446, 741, 1008, 1215], "_isnan": [448, 741], "b_isnan": [448, 741], "negat": [449, 540, 741, 1083, 1215], "_is_not_nan": [450, 741], "b_is_not_nan": [450, 741], "_not_nul": [451, 741], "a_not_nul": [451, 741], "b_not_nul": [451, 741], "_isnul": [452, 741], "a_isnul": [452, 741], "b_isnul": [452, 741], "chain": [454, 530, 532, 533, 534, 535, 549, 641, 731, 741], "undo": [454, 523, 530, 532, 533, 549, 641, 741], "fisher": [455, 586, 741, 1020, 1128, 1215], "fourth": [455, 741, 1020, 1215], "subtract": [455, 640, 741, 1020, 1215], "distribut": [455, 586, 741, 1020, 1128, 1215], "elimin": [455, 741, 1020, 1215], "bias": [455, 586, 741, 1020, 1128, 1215], "scipi": [455, 586, 741, 1020, 1128, 1215], "stat": [455, 586, 741, 1020, 1128, 1215], "153061": [455, 741], "sublist": [462, 463, 465, 468, 473, 474, 475, 476, 478, 479, 487, 492, 496, 497, 499, 1005, 1026, 1027, 1029, 1032, 1037, 1038, 1039, 1040, 1042, 1043, 1051, 1056, 1060, 1061, 1063, 1215], "membership": [465, 1029], "number_of_two": 467, "set_differ": [469, 1033], "blindli": [471, 1035], "worth": [471, 1035], "enough": [471, 586, 741, 1035, 1128, 1215], "rank": [471, 673, 691, 741, 1035, 1215], "concat_list": [471, 691, 1035], "exprnamespac": 472, "flat": [472, 558, 741, 1036, 1095, 1215], "null_on_oob": [474, 497, 1038, 1061], "cheaper": [474, 497, 1038, 1061], "set_intersect": [477, 1041], "x_y": 478, "symmetr": [489, 495, 1053, 1059], "sdiff": 489, "taken": [492, 618, 1056, 1160], "set_symmetric_differ": [495, 1059], "n_field_strategi": [499, 1063], "tostructstrategi": [499, 1063], "first_non_nul": [499, 1063], "max_width": [499, 1063], "field_0": [499, 1063], "field_1": [499, 1063], "field_n": [499, 1063], "pre": [499, 511, 551, 714, 717, 732, 741, 1089, 1215], "obtain": 499, "ok": 499, "longest": 499, "n0": 499, "n1": 499, "set_union": [500, 1064], "logarithm": [502, 503, 504, 741, 1066, 1067, 1068, 1215], "584963": [502, 741], "30103": [503, 741], "60206": [503, 741], "natur": [504, 741, 1068, 1215], "693147": [504, 741], "098612": [504, 741], "386294": [504, 741], "lowest": [505, 741], "9223372036854775808": [505, 741], "agg_list": [507, 509, 741], "map_batch": [507, 704, 741, 793, 853], "keep_nam": [508, 741], "a_revers": [508, 531, 533, 559, 641, 741], "b_revers": [508, 531, 533, 559, 641, 741], "rstrip": [508, 531, 741], "_revers": [508, 531, 533, 559, 641, 741], "whole": [509, 588, 589, 600, 741, 841, 853, 1142], "elementwis": [509, 563, 564, 565, 566, 568, 572, 741, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1215], "third": [509, 741], "parti": [509, 741], "book": [509, 741], "bug": [509, 511, 741, 793, 794, 836, 841, 853, 1071, 1215], "map_dict": [509, 741, 1215], "func": [509, 741], "argmax": [509, 741], "remap": [510, 741, 1070, 1215], "lookup": [510, 737, 741, 1070, 1215], "country_code_dict": [510, 741], "ca": [510, 741], "canada": [510, 741], "de": [510, 741], "germani": [510, 741], "fr": [510, 741], "franc": [510, 741], "country_cod": [510, 741], "rest": [510, 741], "discourag": [511, 741], "loop": [511, 741], "a_times_2": [511, 741], "tip": [511, 741], "again": [511, 741], "behav": [511, 625, 626, 741, 862, 1215], "exprmetanamespac": [515, 518], "foo_bar2": [515, 518], "raise_if_undetermin": 519, "computeerror": [519, 613, 753, 1155], "e_filt": [519, 521], "e_sum_ov": [519, 521], "e_sum_slic": [519, 521], "tree": 522, "modulu": [526, 741], "xlog2": [528, 548, 741], "reverse_": [532, 549, 741], "reverse_a": [532, 549, 741], "reverse_b": [532, 549, 741], "lowercas": [534, 633, 1175], "uppercas": [535, 636, 1178], "to_lowercas": 535, "poison": [536, 537, 741, 1080, 1081, 1215], "nanmax": [536, 537, 741, 1080, 1081, 1215], "inequ": [538, 741], "ne": [539, 741, 1215], "more_expr": [543, 667, 670, 671, 672, 741], "mapping_strategi": [543, 741], "windowmappingstrategi": [543, 741], "group_to_row": [543, 741], "outcom": [543, 741], "group_dtyp": [543, 741], "warn": [543, 741], "flatten": [543, 741], "_max": [543, 741], "c_max": [543, 741], "_min": [543, 741], "c_min": [543, 741], "percent": [544, 741, 1085, 1215], "090909": [544, 741], "peak": [545, 546, 741, 1086, 1087, 1215], "extract_numb": [547, 741], "digit": [547, 574, 575, 601, 741, 1110, 1111, 1137, 1143, 1215, 1223], "scale_negative_even": [547, 741], "expon": [548, 741, 1215], "allow_dupl": [551, 741, 1089, 1215], "duplicateerror": [551, 741, 753, 1089, 1215], "happen": [551, 741, 1089, 1215], "cut": [551, 741, 1089, 1215], "566371": [553, 741], "424778": [553, 741], "283185": [553, 741], "141593": [553, 741, 864, 1215], "rankmethod": [554, 741, 1091, 1215], "ti": [554, 741, 1091, 1215], "competit": [554, 741, 1091, 1215], "highest": [554, 653, 673, 741, 853, 1091, 1215], "immedi": [554, 664, 668, 685, 686, 688, 689, 700, 701, 714, 717, 723, 728, 729, 732, 741, 1091, 1215], "fruits_revers": [559, 741], "cars_revers": [559, 741], "rle": [561, 741, 1098, 1215], "themselv": [561, 741, 1098, 1215], "a_r": [561, 741], "ab_r": [561, 741], "window_s": [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 718, 719, 741, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1215], "rolling_map": [563, 741, 1099, 1215], "multipli": [563, 564, 565, 566, 568, 571, 572, 573, 741, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1215], "rolling_sum": [564, 741, 1100, 1215], "nansum": [564, 741, 1100, 1215], "travers": [565, 566, 568, 572, 741, 1101, 1102, 1104, 1107, 1108, 1109, 1215], "vector": [565, 566, 568, 572, 741, 1101, 1102, 1104, 1107, 1108, 1109, 1215], "5h": [565, 566, 567, 568, 569, 571, 572, 573, 741], "df_tempor": [565, 566, 568, 571, 572, 573, 741], "closur": [565, 566, 571, 572, 573, 741], "rolling_row_max": [565, 741], "2h": [565, 566, 568, 571, 572, 573, 741], "rolling_row_mean": [566, 741], "rolling_row_min": [568, 741], "625": [569, 741], "skew": [570, 741, 1106, 1215], "381802": [570, 741, 1106, 1215], "47033": [570, 741, 1106, 1215], "38180177416060584": [570, 741, 1106, 1215], "47033046033698594": [570, 741, 1106, 1215], "433013": [571, 741, 819, 853], "rolling_row_std": [571, 741], "rolling_row_sum": [572, 741], "39": [572, 696, 741], "63": [572, 741], "69": [572, 741], "1875": [573, 741, 827, 853], "rolling_row_var": [573, 741], "figur": [575, 741, 816, 853, 1111, 1215], "01234": [575, 741, 1111, 1215], "012": [575, 741, 1111, 1215], "1200": [575, 741, 1111, 1215], "searchsortedsid": [577, 741, 1114, 1215], "leftmost": [577, 741, 1114, 1215], "rightmost": [577, 741, 1114, 1215], "six": [577, 741], "extrema": [581, 741, 1122, 1215], "112": [581, 741, 1223], "129": [581, 741], "8589934592": [581, 741], "1073741824": [581, 741], "175201": [585, 741, 1127, 1215], "unimod": [586, 741, 1128, 1215], "skewtest": [586, 741, 1128, 1215], "speak": [586, 741, 1128, 1215], "g_1": [586, 741, 1128, 1215], "m_3": [586, 741, 1128, 1215], "m_2": [586, 741, 1128, 1215], "m_i": [586, 741, 1128, 1215], "sum_": [586, 741, 1128, 1215], "texttt": [586, 741, 1128, 1215], "k_3": [586, 741, 1128, 1215], "k_2": [586, 741, 1128, 1215], "sqrt": [586, 665, 666, 741, 1128, 1215], "343622": [586, 741], "value1": [589, 741], "value2": [589, 741], "attain": [589, 741], "414214": [590, 741, 1131, 1215], "sensit": [593, 601, 614, 1135, 1143, 1156], "ilmsuxu": [593, 600, 601, 614, 1135, 1142, 1143, 1156], "default_match": 593, "insensitive_match": 593, "crab": [593, 1135], "dog": [593, 633, 636, 672, 1135, 1175, 1178], "rab": [593, 1135], "success": [594, 595, 601, 1136, 1137, 1143], "overlap": [594, 595, 601, 1136, 1137, 1143], "bla": [595, 601, 1137, 1143], "asd": [595, 601, 1137, 1143], "678": [595, 601, 1137, 1143], "910t": [595, 601, 1137, 1143], "count_digit": 595, "dbc": [595, 1137], "3xy": [595, 1137], "1zy3": [595, 1137], "strings_hex": 597, "666f6f": [597, 1139], "626172": [597, 1139], "mango": [598, 622, 1140, 1164], "has_suffix": 598, "le": [598, 741, 1215], "nu": 598, "group_index": [600, 1142], "captur": [600, 602, 1142, 1144], "nthose": [600, 1142], "nodd": [600, 1142], "nthe": [600, 1142], "odd": 600, "vote": [600, 602, 1142, 1144], "ballon_dor": [600, 602, 1142, 1144], "404": [600, 602, 1142, 1144], "ref": [600, 602, 1142, 1144], "candid": [600, 602, 1142, 1144], "messi": [600, 602, 1142, 1144], "ronaldo": [600, 1142], "haystack": [601, 1143], "email": [601, 1143], "real": [601, 1143], "some_account": [601, 1143], "somewher": [601, 1143], "net": [601, 1143], "jkl": [601, 1143], "uvw": [601, 1143], "co": [601, 741, 1143, 1215], "uk": [601, 1143], "address": 601, "xi": [601, 1143], "insensit": [601, 614, 856, 1135, 1143, 1156], "quantifi": [601, 1143], "email_part": [601, 1143], "extracted_nr": 601, "910": [601, 1143], "unnam": [602, 1144], "weghorst": [602, 1144], "candi": 602, "json_path_match": [603, 1145], "jsonpath": [603, 604, 1145, 1146], "json_path": [604, 1146], "json_val": [604, 1146], "len_char": [605, 610, 1147, 1152], "_o": [605, 606, 1147, 1148], "caf\u00e9": [605, 606, 1147, 1148], "345": [605, 606, 1147, 1148], "\u6771\u4eac": [605, 606, 1147, 1148], "n_byte": [605, 606], "n_char": [605, 606], "fill_char": [608, 611, 612, 616, 1150, 1153, 1154, 1158], "justifi": [608, 616, 1150, 1158], "pad_end": [608, 612, 1150, 1154], "strip_chars_start": [609, 625, 627, 1151], "pad": [611, 612, 637, 1153, 1154, 1179], "reach": [611, 612, 637, 1153, 1154, 1179], "pad_start": [611, 616, 637, 1153, 1158, 1179], "cow": [611, 612, 1153, 1154], "monkei": [611, 612, 1153, 1154], "hippopotamu": [611, 612, 1153, 1154], "zfill": [612, 657, 741, 1154], "radix": [613, 1155], "parseerror": [613, 1155], "becom": 613, "to_integ": [613, 1155], "silent": [613, 1155], "replace_al": [614, 1156], "citi": 614, "philadelphia": 614, "season": 614, "spring": 614, "summer": 614, "autumn": 614, "winter": 614, "weather": [614, 1156], "raini": [614, 1156], "sunni": [614, 1156], "cloudi": 614, "snowi": 614, "foggi": [614, 1156], "123abc": [614, 1156], "abc456": [614, 1156], "abcabc": [615, 1157], "123a123": [615, 1157], "bc": [615, 724, 1157], "strip_chars_end": [617, 626, 628, 1159], "subslic": [618, 1160], "pear": [618, 1160], "papaya": [618, 1160], "dragonfruit": [618, 1160], "s_slice": 618, "ear": [618, 1160], "aya": [618, 1160], "uit": [618, 1160], "ya": [618, 1160], "onf": [618, 1160], "foo_bar_baz": 619, "split_inclus": 619, "foo_": [619, 695], "bar_": 619, "a_1": [620, 1162, 1192, 1215], "d_4": [620, 1162], "rename_field": [620, 621, 913, 1089, 1162, 1163, 1215], "first_part": [620, 621, 1162, 1163], "second_part": [620, 621, 1162, 1163], "remaind": [621, 1163], "app": [622, 1164], "has_prefix": 622, "strip_char": [623, 1165], "nworld": 624, "foo_strip": 624, "ow": 624, "hell": [624, 1166], "rld": [624, 626, 1168], "word": [625, 626], "strip_suffix": [625, 627], "foo_strip_end": 625, "oldw": 625, "he": 625, "abcdeff": 625, "fed": 625, "strip_prefix": [626, 628], "tworld": [626, 1166, 1168], "foo_strip_start": 626, "wod": [626, 1168], "aabcdef": 626, "cba": 626, "foobar": [627, 628, 1169, 1170], "foofoobar": [627, 1169], "foobarbar": [628, 1170], "polarstemporaltyp": [629, 1171], "penalti": [629, 630, 631, 1171, 1172, 1173], "clean": [629, 630, 631, 1171, 1172, 1173], "beforehand": [629, 630, 631, 1171, 1172, 1173], "certainli": [629, 630, 631, 1171, 1172, 1173], "3f": [629, 631, 1171, 1173], "00z": [629, 631, 1171, 1173], "sun": [629, 1171], "jul": [629, 1171], "34": [629, 1171], "inference_length": [632, 1174], "3420": [632, 1174], "120134": [632, 1174], "3212": [632, 1174], "90": [632, 1174], "143": [632, 1174, 1223], "numbers_decim": 632, "variant": [633, 635, 636, 1007, 1215], "foo_low": 633, "titlecas": [635, 1177], "sing": [635, 1177], "welcom": [635, 1177], "THERE": [635, 1177], "NO": [635, 856, 1177], "foo_titl": 635, "There": [635, 1177], "foo_upp": 636, "999999": [637, 687, 727, 728, 729, 856, 1179], "0123": [637, 1179], "cd": [638, 639], "struct_col": [638, 639], "www": 639, "xxx": 639, "yyi": 639, "zzz": 639, "obvious": 639, "structfieldnotfounderror": [639, 753], "761594": [647, 741, 1190, 1215], "replic": [648, 741, 1198, 1215], "vals_phys": [648, 741], "floordiv": [650, 741], "ieee": [650, 741], "754": [650, 741], "mathemat": [650, 691, 741], "undefin": [650, 741], "On": [650, 741], "operand": [650, 741], "infin": [650, 741], "value_count": [652, 741, 1215], "9223372036854775807": [653, 741], "binary_str": [657, 741], "250": [657, 741, 1102, 1215, 1223], "bin_x": [657, 741], "bin_i": [657, 741], "xor_xi": [657, 741], "bin_xor_xi": [657, 741], "00001010": [657, 741], "00001011": [657, 741], "00001000": [657, 741], "00000010": [657, 741], "11111010": [657, 741], "00000011": [657, 741], "249": [657, 741], "11111001": [657, 741], "01000010": [657, 741], "00000100": [657, 741], "70": [657, 741], "01000110": [657, 741], "AND": [658, 659, 856, 1196, 1215], "OR": [660, 661, 775, 853, 856], "any_horizont": 660, "returns_scalar": [662, 706, 741], "polarsintegertyp": [664, 700, 701], "arctan": [665, 666, 741, 1215], "angl": [665, 666], "plane": [665, 666], "rai": [665, 666], "tworoottwo": [665, 666], "arctan2d": 665, "atan2d": [665, 666], "atan2": [665, 666], "135": [665, 666], "356194": [665, 666], "arctan2": 666, "arg_tru": [668, 741, 1215], "mimic": 671, "a_lag_": 671, "a_rol": 671, "swim": 672, "walk": 672, "full_sent": 672, "correlationmethod": 673, "propagate_nan": 673, "spearman": 673, "544705": 673, "covari": [675, 719, 741], "acc": [676, 677, 680, 681, 694, 716], "include_init": [676, 680], "accumul": [676, 677, 680, 681, 694, 716], "fn": [676, 677, 680, 681, 694, 716], "new_valu": [676, 677, 680, 681, 694, 716], "cum_reduc": 676, "cumsum_horizont": 678, "cum_sum_horizont": 683, "granular": 685, "finer": 685, "permut": 685, "1985": [685, 688], "america": 688, "new_york": 688, "est": 688, "contrast": 690, "offset_bi": 690, "sometim": [690, 740], "tbl_width_char": 690, "120": 690, "add_week": 690, "add_dai": 690, "add_second": 690, "add_milli": 690, "add_hour": 690, "add_calendar_dai": 690, "add_calendar_month": 690, "mo": 690, "add_calendar_year": 690, "2024": [690, 856], "a_b_doubl": 691, "f_string": 695, "placehold": 695, "hello_": 695, "_world": 695, "_bar_": 695, "foo_a_bar_1": 695, "foo_b_bar_2": 695, "foo_c_bar_3": 695, "epoch": 696, "timestep": 696, "1666683077": 696, "1666683099": 696, "12345": [696, 894, 986, 1110, 1215], "12346": 696, "agg_group": [697, 741], "allow_object": 703, "valueexcept": 703, "test_func": 705, "list_of_seri": 706, "my_custom_aggreg": 706, "understood": 706, "power": [721, 1215], "a_a": 721, "a_txt": 721, "605551": 722, "605551275463989": 722, "my_struct": 723, "thens": 731, "elif": 731, "pick": 731, "own": [731, 1223], "isn": 731, "arr": [733, 1196, 1207, 1215], "technic": 737, "further": [737, 1197, 1215], "columnfactori": 737, "more_nam": 737, "__call__": 737, "helper": 737, "__getattr__": 737, "idiomat": [737, 841], "quick": [737, 914, 1215, 1223], "prototyp": 737, "keystrok": 737, "drawback": 737, "readabl": 737, "modul": [740, 856, 1223], "and_": 741, "arcco": [741, 1215], "arccosh": [741, 1215], "arcsin": [741, 1215], "arcsinh": [741, 1215], "arctanh": [741, 1215], "arg_max": [741, 1215], "arg_min": [741, 1215], "arg_sort": [741, 1215], "arg_uniqu": [741, 1215], "backward_fil": 741, "cbrt": [741, 1215], "clip_max": [741, 1215], "clip_min": [741, 1215], "cosh": [741, 1215], "cot": [741, 1215], "cumcount": 741, "cummax": [741, 1215], "cummin": [741, 1215], "cumprod": [741, 1215], "cumsum": [741, 1215], "cumulative_ev": [741, 1215], "entropi": [741, 1215], "eq_miss": [741, 1215], "ewm_mean": [741, 1215], "ewm_std": [741, 1215], "ewm_var": [741, 1215], "extend_const": [741, 1215], "from_json": [741, 853], "ge": [741, 1215], "gt": [741, 1215], "implod": [741, 1215], "inspect": [741, 853], "is_between": [741, 1215], "is_finit": [741, 1215], "is_first": [741, 1215], "is_infinit": [741, 1215], "is_last": [741, 1215], "is_nan": [741, 1215], "is_not": 741, "is_not_nan": [741, 1215], "is_not_nul": [741, 1215], "kurtosi": [741, 1215], "log10": [741, 1215], "log1p": [741, 1215], "map_alia": 741, "mod": 741, "mul": 741, "nan_max": [741, 1215], "nan_min": [741, 1215], "ne_miss": [741, 1215], "or_": 741, "pct_chang": [741, 1215], "peak_max": [741, 1215], "peak_min": [741, 1215], "pow": [741, 1215], "register_plugin": 741, "lib": [741, 1191, 1215], "is_elementwis": 741, "input_wildcard_expans": 741, "cast_to_supertyp": 741, "pass_name_to_appli": 741, "changes_length": 741, "plugin": 741, "highli": 741, "unsaf": 741, "unstabl": 741, "serializ": 741, "ran": 741, "reinterpret": [741, 1215], "repeat_bi": 741, "rle_id": [741, 1215], "rolling_appli": [741, 1215], "rolling_max": [741, 1215], "rolling_mean": [741, 1215], "rolling_median": [741, 1215], "rolling_min": [741, 1215], "rolling_quantil": [741, 1215], "rolling_skew": [741, 1215], "rolling_std": [741, 1215], "rolling_var": [741, 1215], "round_sig_fig": [741, 1215], "search_sort": [741, 1215], "shrink_dtyp": [741, 1215], "sin": [741, 1215], "sinh": [741, 1215], "sort_bi": 741, "tan": [741, 1215], "to_phys": [741, 891, 1215], "unique_count": [741, 1215], "xor": 741, "expos": 753, "miscellan": 753, "arrowerror": 753, "columnnotfounderror": 753, "invalidoperationerror": 753, "polarspanicerror": 753, "schemaerror": 753, "schemafieldnotfounderror": 753, "shapeerror": 753, "parametr": 753, "build_info": 753, "get_index_typ": 753, "show_vers": 753, "threadpool_s": 753, "sqlcontext": [753, 1222], "hit": [759, 853], "node": [759, 763, 786, 793, 794, 798, 803, 806, 853], "_eager": [763, 853], "explain": [763, 853], "purpos": [763, 772, 853], "set_streaming_chunk_s": [763, 853], "collect_all_async": [764, 853], "async": [764, 853], "stringio": [766, 777, 812, 853], "snippet": [768, 853], "Be": [772, 853], "fewer": [772, 853], "suscept": [772, 853], "deseri": [777, 805, 812, 853], "lazygroupbi": [779, 780, 781, 782, 783, 784, 808, 853], "other_lf": [788, 853], "validate_output_schema": [793, 794, 853], "streamabl": [793, 794, 798, 853], "past": [793, 794, 853], "paramount": [793, 794, 853], "elig": [793, 794, 853], "invari": [794, 853], "upheld": [794, 853], "100_000": [794, 853], "200000": [794, 853], "199998": [794, 853], "199996": [794, 853], "199994": [794, 853], "199992": [794, 853], "show_plot": [803, 853], "truncate_nod": [803, 853], "figsiz": [803, 816, 853], "gantt": [803, 853], "plot": [803, 816, 853], "group_by_partit": [803, 853], "470": [803, 853], "475": [803, 853], "1964": [803, 853], "swap": [806, 853], "dynamic_group_bi": [808, 853], "dataframescan": [812, 853], "output_schema": [812, 853], "run_parallel": [812, 853], "duplicate_check": [812, 853], "later": [812, 853], "output_path": [816, 853], "raw_output": [816, 853], "290994": [819, 853], "118034": [819, 853], "implicit": [826, 853], "new_lf": [826, 853], "extern": [831, 853], "lf_other": [831, 853], "afoo": [831, 853], "cfoo": [831, 853], "train_lf": [831, 853], "feature_0": [831, 853], "feature_1": [831, 853], "test_lf": [831, 853], "_train": [831, 853], "feature_0_train": [831, 853], "opaqu": 841, "my_column": 841, "lf5": 853, "lf6": 853, "read_json": 853, "sink_csv": 853, "sink_ipc": 853, "sink_parquet": 853, "with_context": 853, "intuit": 856, "broadcast": 856, "emploi": 856, "complement": 856, "plenti": 856, "cde": 856, "fgg": 856, "jjk": 856, "lmn": 856, "opp": 856, "qqr": 856, "by_dtyp": 856, "as_expr": 856, "dispatch": 856, "1_234_500": 856, "5_000_555": 856, "1234500": 856, "5000555": 856, "by_nam": 856, "4_500_000": 856, "4500000": 856, "3265500": 856, "zap": 856, "2031": 856, "tstamp_tokyo": 856, "123465": 856, "tstamp_utc": 856, "2025": 856, "666000": 856, "tstamp": 856, "600000": 856, "123000": 856, "666": 856, "td1": 856, "987000": 856, "td2": 856, "td3": 856, "2m": [856, 942], "456m": 856, "7d": 856, "456789\u00b5": 856, "18d": 856, "999999\u00b5": 856, "23h": 856, "987m": 856, "14d": 856, "16h": 856, "39m": 856, "21d": 856, "456001\u00b5": 856, "expand_selector": 856, "colz": [856, 1223], "everyth": 856, "signed_integ": 856, "unsigned_integ": 856, "is_selector": 856, "obj": 856, "_selector_proxy_": 856, "include_categor": 856, "set_ord": [856, 892], "2345": 856, "3456": 856, "append_chunk": [862, 1215], "super": [862, 1215], "292432": [865, 1215], "549306": [869, 1215], "catnamespac": 887, "56789": [894, 986, 1110, 1215], "901234": [894, 986, 1110, 1215], "1232e": [901, 903, 1215], "1656e15": [903, 1215], "break_point_label": [913, 1089, 1215], "break_point": [913, 993, 1089, 1215], "category_label": [913, 1089, 1215], "series_num": [914, 1215], "581139": [914, 1215], "series_str": [914, 1215], "datetimeindex": [916, 1215], "datetimenamespac": 919, "ser": [924, 925, 957], "kathmandu": [924, 925, 957], "0545": [924, 925, 957], "500m": [937, 939, 947], "500000": 937, "500000000": 947, "date_minus_1y_2mon": 949, "165": [953, 967], "series_equ": [953, 1215], "timestamp_u": 958, "978307200000000000": 958, "978393600000000000": 958, "978480000000000000": 958, "005": [973, 1215], "06293300616044681": [973, 1215], "65": [973, 1215], "8568409950394724": [973, 1215], "4000000": [974, 1215], "814697265625": [974, 1215], "bitmask": [990, 1215], "absenc": [990, 1215], "presenc": [990, 1196, 1215], "confirm": [990, 1215], "10734580197236529959": [991, 1215], "3022416320763508302": [991, 1215], "13756996518000038261": [991, 1215], "bin_count": [993, 1215], "a_count": [993, 1215], "is_signed_integ": [1007, 1215], "is_unsigned_integ": [1007, 1215], "is_float": [1014, 1215], "listnamespac": 1023, "field_2": 1063, "n00": 1063, "n01": 1063, "n02": 1063, "2147483648": [1069, 1215], "iso3166": [1070, 1215], "tur": [1070, 1177, 1215], "jpn": [1070, 1215], "nld": [1070, 1215], "country_lookup": [1070, 1215], "japan": [1070, 1215], "t\u00fcrkiy": [1070, 1215], "netherland": [1070, 1215], "unrecognis": [1070, 1215], "unspecifi": [1070, 1215], "country_nam": [1070, 1215], "166667": [1085, 1215], "142857": [1085, 1215], "200": [1101, 1102, 1104, 1215], "150": [1102, 1215], "350": [1102, 1215], "450": [1102, 1215], "dev": [1107, 1215], "527525": [1107, 1215], "57": [1110, 1215, 1223], "frequent": [1113, 1116, 1215], "scatter": [1117, 1215], "2246e": [1126, 1189, 1215], "stringnamespac": 1133, "orld": 1167, "6331e16": [1189, 1215], "int64arrai": [1191, 1215], "a_2": [1192, 1215], "a_3": [1192, 1215], "s_from_str_repr": [1194, 1215], "zero_copy_onli": [1196, 1215], "writabl": [1196, 1215], "immut": [1196, 1215], "127": [1202, 1215], "seriesview": [1205, 1215], "arraylik": 1215, "dtype_if_empti": 1215, "position": 1215, "scenario": 1215, "chunk_length": 1215, "get_chunk": 1215, "has_valid": 1215, "hist": 1215, "is_boolean": 1215, "is_integ": 1215, "is_numer": [1215, 1223], "is_sort": 1215, "is_tempor": 1215, "is_utf8": 1215, "new_from_index": 1215, "set_at_idx": 1215, "two_a": 1222, "__enter__": 1222, "__exit__": 1222, "exc_typ": 1222, "baseexcept": 1222, "exc_val": 1222, "exc_tb": 1222, "tracebacktyp": 1222, "primari": 1223, "guid": 1223, "machin": 1223, "xdist": 1223, "hardwar": 1223, "setup": 1223, "sec": 1223, "numeric_dtyp": 1223, "null_probabililti": 1223, "test_numer": 1223, "col0": 1223, "col4": 1223, "29096": 1223, "485": 1223, "2147483647": 1223, "8257e14": 1223, "7508": 1223, "37338": 1223, "7264": 1223, "16996": 1223, "121": 1223, "361": 1223, "63204": 1223, "1443e235": 1223, "conform": 1223, "ascii_lett": 1223, "id_char": 1223, "alphabet": 1223, "price": 1223, "min_valu": 1223, "max_valu": 1223, "test_price_calcul": 1223, "a101": 1223, "8nin": 1223, "qhoo": 1223, "714": 1223, "544": 1223, "i0e0": 1223, "0000": 1223, "test_miscellan": 1223, "235": 1223, "87": 1223, "186": 1223, "174": 1223, "179": 1223, "213": 1223, "221": 1223, "86": 1223, "255": 1223}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Float32"], [52, 0, 1, "", "Float64"], [53, 0, 1, "", "Int16"], [54, 0, 1, "", "Int32"], [55, 0, 1, "", "Int64"], [56, 0, 1, "", "Int8"], [60, 0, 1, "", "List"], [61, 0, 1, "", "Null"], [62, 0, 1, "", "Object"], [1222, 0, 1, "", "SQLContext"], [69, 0, 1, "", "StringCache"], [70, 0, 1, "", "Struct"], [71, 0, 1, "", "Time"], [72, 0, 1, "", "UInt16"], [73, 0, 1, "", "UInt32"], [74, 0, 1, "", "UInt64"], [75, 0, 1, "", "UInt8"], [76, 0, 1, "", "Unknown"], [77, 0, 1, "", "Utf8"], [78, 4, 1, "", "align_frames"], [658, 4, 1, "", "all"], [659, 4, 1, "", "all_horizontal"], [660, 4, 1, "", "any"], [661, 4, 1, "", "any_horizontal"], [662, 4, 1, "", "apply"], [663, 4, 1, "", "approx_n_unique"], [664, 4, 1, "", "arange"], [665, 4, 1, "", "arctan2"], [666, 4, 1, "", "arctan2d"], [667, 4, 1, "", "arg_sort_by"], [668, 4, 1, "", "arg_where"], [669, 4, 1, "", "avg"], [83, 4, 1, "", "build_info"], [670, 4, 1, "", "coalesce"], [84, 4, 1, "", "collect_all"], [85, 4, 1, "", "collect_all_async"], [86, 4, 1, "", "concat"], [671, 4, 1, "", "concat_list"], [672, 4, 1, "", "concat_str"], [673, 4, 1, "", "corr"], [674, 4, 1, "", "count"], [675, 4, 1, "", "cov"], [676, 4, 1, "", "cum_fold"], [677, 4, 1, "", "cum_reduce"], [678, 4, 1, "", "cum_sum"], [679, 4, 1, "", "cum_sum_horizontal"], [680, 4, 1, "", "cumfold"], [681, 4, 1, "", "cumreduce"], [682, 4, 1, "", "cumsum"], [683, 4, 1, "", "cumsum_horizontal"], [684, 4, 1, "", "date"], [685, 4, 1, "", "date_range"], [686, 4, 1, "", "date_ranges"], [687, 4, 1, "", "datetime"], [688, 4, 1, "", "datetime_range"], [689, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [690, 4, 1, "", "duration"], [691, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [692, 4, 1, "", "exclude"], [693, 4, 1, "", "first"], [694, 4, 1, "", "fold"], [695, 4, 1, "", "format"], [103, 4, 1, "", "from_arrow"], [104, 4, 1, "", "from_dataframe"], [105, 4, 1, "", "from_dict"], [106, 4, 1, "", "from_dicts"], [696, 4, 1, "", "from_epoch"], [107, 4, 1, "", "from_numpy"], [108, 4, 1, "", "from_pandas"], [109, 4, 1, "", "from_records"], [110, 4, 1, "", "from_repr"], [111, 4, 1, "", "get_index_type"], [697, 4, 1, "", "groups"], [698, 4, 1, "", "head"], [699, 4, 1, "", "implode"], [700, 4, 1, "", "int_range"], [701, 4, 1, "", "int_ranges"], [702, 4, 1, "", "last"], [703, 4, 1, "", "lit"], [704, 4, 1, "", "map"], [705, 4, 1, "", "map_batches"], [706, 4, 1, "", "map_groups"], [707, 4, 1, "", "max"], [708, 4, 1, "", "max_horizontal"], [709, 4, 1, "", "mean"], [710, 4, 1, "", "median"], [711, 4, 1, "", "min"], [712, 4, 1, "", "min_horizontal"], [713, 4, 1, "", "n_unique"], [714, 4, 1, "", "ones"], [715, 4, 1, "", "quantile"], [113, 4, 1, "", "read_avro"], [114, 4, 1, "", "read_csv"], [115, 4, 1, "", "read_csv_batched"], [116, 4, 1, "", "read_database"], [117, 4, 1, "", "read_database_uri"], [118, 4, 1, "", "read_delta"], [119, 4, 1, "", "read_excel"], [120, 4, 1, "", "read_ipc"], [121, 4, 1, "", "read_ipc_schema"], [122, 4, 1, "", "read_ipc_stream"], [123, 4, 1, "", "read_json"], [124, 4, 1, "", "read_ndjson"], [125, 4, 1, "", "read_ods"], [126, 4, 1, "", "read_parquet"], [127, 4, 1, "", "read_parquet_schema"], [716, 4, 1, "", "reduce"], [717, 4, 1, "", "repeat"], [718, 4, 1, "", "rolling_corr"], [719, 4, 1, "", "rolling_cov"], [128, 4, 1, "", "scan_csv"], [129, 4, 1, "", "scan_delta"], [130, 4, 1, "", "scan_iceberg"], [131, 4, 1, "", "scan_ipc"], [132, 4, 1, "", "scan_ndjson"], [133, 4, 1, "", "scan_parquet"], [134, 4, 1, "", "scan_pyarrow_dataset"], [720, 4, 1, "", "select"], [856, 6, 0, "-", "selectors"], [135, 4, 1, "", "set_random_seed"], [136, 4, 1, "", "show_versions"], [721, 4, 1, "", "sql_expr"], [722, 4, 1, "", "std"], [723, 4, 1, "", "struct"], [724, 4, 1, "", "sum"], [725, 4, 1, "", "sum_horizontal"], [726, 4, 1, "", "tail"], [148, 4, 1, "", "threadpool_size"], [727, 4, 1, "", "time"], [728, 4, 1, "", "time_range"], [729, 4, 1, "", "time_ranges"], [149, 4, 1, "", "using_string_cache"], [730, 4, 1, "", "var"], [731, 4, 1, "", "when"], [732, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[152, 1, 1, "", "__dataframe__"], [153, 1, 1, "", "apply"], [154, 1, 1, "", "approx_n_unique"], [155, 1, 1, "", "approx_unique"], [156, 1, 1, "", "bottom_k"], [157, 1, 1, "", "cast"], [158, 1, 1, "", "clear"], [159, 1, 1, "", "clone"], [160, 2, 1, "", "columns"], [161, 1, 1, "", "corr"], [162, 1, 1, "", "describe"], [163, 1, 1, "", "drop"], [164, 1, 1, "", "drop_in_place"], [165, 1, 1, "", "drop_nulls"], [166, 2, 1, "", "dtypes"], [167, 1, 1, "", "estimated_size"], [168, 1, 1, "", "explode"], [169, 1, 1, "", "extend"], [170, 1, 1, "", "fill_nan"], [171, 1, 1, "", "fill_null"], [172, 1, 1, "", "filter"], [173, 1, 1, "", "find_idx_by_name"], [174, 2, 1, "", "flags"], [175, 1, 1, "", "fold"], [176, 1, 1, "", "frame_equal"], [177, 1, 1, "", "gather_every"], [178, 1, 1, "", "get_column"], [179, 1, 1, "", "get_column_index"], [180, 1, 1, "", "get_columns"], [181, 1, 1, "", "glimpse"], [182, 1, 1, "", "group_by"], [183, 1, 1, "", "group_by_dynamic"], [184, 1, 1, "", "group_by_rolling"], [185, 1, 1, "", "groupby"], [186, 1, 1, "", "groupby_dynamic"], [187, 1, 1, "", "groupby_rolling"], [188, 1, 1, "", "hash_rows"], [189, 1, 1, "", "head"], [190, 2, 1, "", "height"], [191, 1, 1, "", "hstack"], [192, 1, 1, "", "insert_at_idx"], [193, 1, 1, "", "insert_column"], [194, 1, 1, "", "interpolate"], [195, 1, 1, "", "is_duplicated"], [196, 1, 1, "", "is_empty"], [197, 1, 1, "", "is_unique"], [198, 1, 1, "", "item"], [199, 1, 1, "", "iter_rows"], [200, 1, 1, "", "iter_slices"], [201, 1, 1, "", "join"], [202, 1, 1, "", "join_asof"], [203, 1, 1, "", "lazy"], [204, 1, 1, "", "limit"], [205, 1, 1, "", "map_rows"], [206, 1, 1, "", "max"], [207, 1, 1, "", "max_horizontal"], [208, 1, 1, "", "mean"], [209, 1, 1, "", "mean_horizontal"], [210, 1, 1, "", "median"], [211, 1, 1, "", "melt"], [212, 1, 1, "", "merge_sorted"], [213, 1, 1, "", "min"], [214, 1, 1, "", "min_horizontal"], [215, 1, 1, "", "n_chunks"], [216, 1, 1, "", "n_unique"], [217, 1, 1, "", "null_count"], [218, 1, 1, "", "partition_by"], [219, 1, 1, "", "pipe"], [220, 1, 1, "", "pivot"], [221, 1, 1, "", "product"], [222, 1, 1, "", "quantile"], [223, 1, 1, "", "rechunk"], [224, 1, 1, "", "rename"], [225, 1, 1, "", "replace"], [226, 1, 1, "", "replace_at_idx"], [227, 1, 1, "", "replace_column"], [228, 1, 1, "", "reverse"], [229, 1, 1, "", "rolling"], [230, 1, 1, "", "row"], [231, 1, 1, "", "rows"], [232, 1, 1, "", "rows_by_key"], [233, 1, 1, "", "sample"], [234, 2, 1, "", "schema"], [235, 1, 1, "", "select"], [236, 1, 1, "", "select_seq"], [237, 1, 1, "", "set_sorted"], [238, 2, 1, "", "shape"], [239, 1, 1, "", "shift"], [240, 1, 1, "", "shift_and_fill"], [241, 1, 1, "", "shrink_to_fit"], [242, 1, 1, "", "slice"], [243, 1, 1, "", "sort"], [244, 1, 1, "", "std"], [245, 1, 1, "", "sum"], [246, 1, 1, "", "sum_horizontal"], [247, 1, 1, "", "tail"], [248, 1, 1, "", "take_every"], [249, 1, 1, "", "to_arrow"], [250, 1, 1, "", "to_dict"], [251, 1, 1, "", "to_dicts"], [252, 1, 1, "", "to_dummies"], [253, 1, 1, "", "to_init_repr"], [254, 1, 1, "", "to_numpy"], [255, 1, 1, "", "to_pandas"], [256, 1, 1, "", "to_series"], [257, 1, 1, "", "to_struct"], [258, 1, 1, "", "top_k"], [259, 1, 1, "", "transpose"], [260, 1, 1, "", "unique"], [261, 1, 1, "", "unnest"], [262, 1, 1, "", "unstack"], [263, 1, 1, "", "update"], [264, 1, 1, "", "upsample"], [265, 1, 1, "", "var"], [266, 1, 1, "", "vstack"], [267, 2, 1, "", "width"], [268, 1, 1, "", "with_columns"], [269, 1, 1, "", "with_columns_seq"], [270, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Expr": [[299, 1, 1, "", "abs"], [300, 1, 1, "", "add"], [301, 1, 1, "", "agg_groups"], [302, 1, 1, "", "alias"], [303, 1, 1, "", "all"], [304, 1, 1, "", "and_"], [305, 1, 1, "", "any"], [306, 1, 1, "", "append"], [307, 1, 1, "", "apply"], [308, 1, 1, "", "approx_n_unique"], [309, 1, 1, "", "arccos"], [310, 1, 1, "", "arccosh"], [311, 1, 1, "", "arcsin"], [312, 1, 1, "", "arcsinh"], [313, 1, 1, "", "arctan"], [314, 1, 1, "", "arctanh"], [315, 1, 1, "", "arg_max"], [316, 1, 1, "", "arg_min"], [317, 1, 1, "", "arg_sort"], [318, 1, 1, "", "arg_true"], [319, 1, 1, "", "arg_unique"], [325, 1, 1, "", "backward_fill"], [331, 1, 1, "", "bottom_k"], [332, 1, 1, "", "cache"], [333, 1, 1, "", "cast"], [336, 1, 1, "", "cbrt"], [337, 1, 1, "", "ceil"], [338, 1, 1, "", "clip"], [339, 1, 1, "", "clip_max"], [340, 1, 1, "", "clip_min"], [341, 1, 1, "", "cos"], [342, 1, 1, "", "cosh"], [343, 1, 1, "", "cot"], [344, 1, 1, "", "count"], [345, 1, 1, "", "cum_count"], [346, 1, 1, "", "cum_max"], [347, 1, 1, "", "cum_min"], [348, 1, 1, "", "cum_prod"], [349, 1, 1, "", "cum_sum"], [350, 1, 1, "", "cumcount"], [351, 1, 1, "", "cummax"], [352, 1, 1, "", "cummin"], [353, 1, 1, "", "cumprod"], [354, 1, 1, "", "cumsum"], [355, 1, 1, "", "cumulative_eval"], [356, 1, 1, "", "cut"], [357, 1, 1, "", "degrees"], [358, 1, 1, "", "diff"], [359, 1, 1, "", "dot"], [360, 1, 1, "", "drop_nans"], [361, 1, 1, "", "drop_nulls"], [410, 1, 1, "", "entropy"], [411, 1, 1, "", "eq"], [412, 1, 1, "", "eq_missing"], [413, 1, 1, "", "ewm_mean"], [414, 1, 1, "", "ewm_std"], [415, 1, 1, "", "ewm_var"], [416, 1, 1, "", "exclude"], [417, 1, 1, "", "exp"], [418, 1, 1, "", "explode"], [419, 1, 1, "", "extend_constant"], [420, 1, 1, "", "fill_nan"], [421, 1, 1, "", "fill_null"], [422, 1, 1, "", "filter"], [423, 1, 1, "", "first"], [424, 1, 1, "", "flatten"], [425, 1, 1, "", "floor"], [426, 1, 1, "", "floordiv"], [427, 1, 1, "", "forward_fill"], [428, 1, 1, "", "from_json"], [429, 1, 1, "", "gather"], [430, 1, 1, "", "gather_every"], [431, 1, 1, "", "ge"], [432, 1, 1, "", "get"], [433, 1, 1, "", "gt"], [434, 1, 1, "", "hash"], [435, 1, 1, "", "head"], [436, 1, 1, "", "implode"], [437, 1, 1, "", "inspect"], [438, 1, 1, "", "interpolate"], [439, 1, 1, "", "is_between"], [440, 1, 1, "", "is_duplicated"], [441, 1, 1, "", "is_finite"], [442, 1, 1, "", "is_first"], [443, 1, 1, "", "is_first_distinct"], [444, 1, 1, "", "is_in"], [445, 1, 1, "", "is_infinite"], [446, 1, 1, "", "is_last"], [447, 1, 1, "", "is_last_distinct"], [448, 1, 1, "", "is_nan"], [449, 1, 1, "", "is_not"], [450, 1, 1, "", "is_not_nan"], [451, 1, 1, "", "is_not_null"], [452, 1, 1, "", "is_null"], [453, 1, 1, "", "is_unique"], [454, 1, 1, "", "keep_name"], [455, 1, 1, "", "kurtosis"], [456, 1, 1, "", "last"], [457, 1, 1, "", "le"], [458, 1, 1, "", "len"], [459, 1, 1, "", "limit"], [502, 1, 1, "", "log"], [503, 1, 1, "", "log10"], [504, 1, 1, "", "log1p"], [505, 1, 1, "", "lower_bound"], [506, 1, 1, "", "lt"], [507, 1, 1, "", "map"], [508, 1, 1, "", "map_alias"], [509, 1, 1, "", "map_batches"], [510, 1, 1, "", "map_dict"], [511, 1, 1, "", "map_elements"], [512, 1, 1, "", "max"], [513, 1, 1, "", "mean"], [514, 1, 1, "", "median"], [525, 1, 1, "", "min"], [526, 1, 1, "", "mod"], [527, 1, 1, "", "mode"], [528, 1, 1, "", "mul"], [529, 1, 1, "", "n_unique"], [536, 1, 1, "", "nan_max"], [537, 1, 1, "", "nan_min"], [538, 1, 1, "", "ne"], [539, 1, 1, "", "ne_missing"], [540, 1, 1, "", "not_"], [541, 1, 1, "", "null_count"], [542, 1, 1, "", "or_"], [543, 1, 1, "", "over"], [544, 1, 1, "", "pct_change"], [545, 1, 1, "", "peak_max"], [546, 1, 1, "", "peak_min"], [547, 1, 1, "", "pipe"], [548, 1, 1, "", "pow"], [549, 1, 1, "", "prefix"], [550, 1, 1, "", "product"], [551, 1, 1, "", "qcut"], [552, 1, 1, "", "quantile"], [553, 1, 1, "", "radians"], [554, 1, 1, "", "rank"], [555, 1, 1, "", "rechunk"], [556, 1, 1, "", "reinterpret"], [557, 1, 1, "", "repeat_by"], [558, 1, 1, "", "reshape"], [559, 1, 1, "", "reverse"], [560, 1, 1, "", "rle"], [561, 1, 1, "", "rle_id"], [562, 1, 1, "", "rolling"], [563, 1, 1, "", "rolling_apply"], [564, 1, 1, "", "rolling_map"], [565, 1, 1, "", "rolling_max"], [566, 1, 1, "", "rolling_mean"], [567, 1, 1, "", "rolling_median"], [568, 1, 1, "", "rolling_min"], [569, 1, 1, "", "rolling_quantile"], [570, 1, 1, "", "rolling_skew"], [571, 1, 1, "", "rolling_std"], [572, 1, 1, "", "rolling_sum"], [573, 1, 1, "", "rolling_var"], [574, 1, 1, "", "round"], [575, 1, 1, "", "round_sig_figs"], [576, 1, 1, "", "sample"], [577, 1, 1, "", "search_sorted"], [578, 1, 1, "", "set_sorted"], [579, 1, 1, "", "shift"], [580, 1, 1, "", "shift_and_fill"], [581, 1, 1, "", "shrink_dtype"], [582, 1, 1, "", "shuffle"], [583, 1, 1, "", "sign"], [584, 1, 1, "", "sin"], [585, 1, 1, "", "sinh"], [586, 1, 1, "", "skew"], [587, 1, 1, "", "slice"], [588, 1, 1, "", "sort"], [589, 1, 1, "", "sort_by"], [590, 1, 1, "", "sqrt"], [591, 1, 1, "", "std"], [640, 1, 1, "", "sub"], [641, 1, 1, "", "suffix"], [642, 1, 1, "", "sum"], [643, 1, 1, "", "tail"], [644, 1, 1, "", "take"], [645, 1, 1, "", "take_every"], [646, 1, 1, "", "tan"], [647, 1, 1, "", "tanh"], [648, 1, 1, "", "to_physical"], [649, 1, 1, "", "top_k"], [650, 1, 1, "", "truediv"], [651, 1, 1, "", "unique"], [652, 1, 1, "", "unique_counts"], [653, 1, 1, "", "upper_bound"], [654, 1, 1, "", "value_counts"], [655, 1, 1, "", "var"], [656, 1, 1, "", "where"], [657, 1, 1, "", "xor"]], "polars.Expr.arr": [[320, 1, 1, "", "max"], [321, 1, 1, "", "min"], [322, 1, 1, "", "sum"], [323, 1, 1, "", "to_list"], [324, 1, 1, "", "unique"]], "polars.Expr.bin": [[326, 1, 1, "", "contains"], [327, 1, 1, "", "decode"], [328, 1, 1, "", "encode"], [329, 1, 1, "", "ends_with"], [330, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[334, 1, 1, "", "get_categories"], [335, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[362, 1, 1, "", "base_utc_offset"], [363, 1, 1, "", "cast_time_unit"], [364, 1, 1, "", "combine"], [365, 1, 1, "", "convert_time_zone"], [366, 1, 1, "", "date"], [367, 1, 1, "", "datetime"], [368, 1, 1, "", "day"], [369, 1, 1, "", "days"], [370, 1, 1, "", "dst_offset"], [371, 1, 1, "", "epoch"], [372, 1, 1, "", "hour"], [373, 1, 1, "", "hours"], [374, 1, 1, "", "is_leap_year"], [375, 1, 1, "", "iso_year"], [376, 1, 1, "", "microsecond"], [377, 1, 1, "", "microseconds"], [378, 1, 1, "", "millisecond"], [379, 1, 1, "", "milliseconds"], [380, 1, 1, "", "minute"], [381, 1, 1, "", "minutes"], [382, 1, 1, "", "month"], [383, 1, 1, "", "month_end"], [384, 1, 1, "", "month_start"], [385, 1, 1, "", "nanosecond"], [386, 1, 1, "", "nanoseconds"], [387, 1, 1, "", "offset_by"], [388, 1, 1, "", "ordinal_day"], [389, 1, 1, "", "quarter"], [390, 1, 1, "", "replace_time_zone"], [391, 1, 1, "", "round"], [392, 1, 1, "", "second"], [393, 1, 1, "", "seconds"], [394, 1, 1, "", "strftime"], [395, 1, 1, "", "time"], [396, 1, 1, "", "timestamp"], [397, 1, 1, "", "to_string"], [398, 1, 1, "", "total_days"], [399, 1, 1, "", "total_hours"], [400, 1, 1, "", "total_microseconds"], [401, 1, 1, "", "total_milliseconds"], [402, 1, 1, "", "total_minutes"], [403, 1, 1, "", "total_nanoseconds"], [404, 1, 1, "", "total_seconds"], [405, 1, 1, "", "truncate"], [406, 1, 1, "", "week"], [407, 1, 1, "", "weekday"], [408, 1, 1, "", "with_time_unit"], [409, 1, 1, "", "year"]], "polars.Expr.list": [[460, 1, 1, "", "all"], [461, 1, 1, "", "any"], [462, 1, 1, "", "arg_max"], [463, 1, 1, "", "arg_min"], [464, 1, 1, "", "concat"], [465, 1, 1, "", "contains"], [466, 1, 1, "", "count_match"], [467, 1, 1, "", "count_matches"], [468, 1, 1, "", "diff"], [469, 1, 1, "", "difference"], [470, 1, 1, "", "drop_nulls"], [471, 1, 1, "", "eval"], [472, 1, 1, "", "explode"], [473, 1, 1, "", "first"], [474, 1, 1, "", "gather"], [475, 1, 1, "", "get"], [476, 1, 1, "", "head"], [477, 1, 1, "", "intersection"], [478, 1, 1, "", "join"], [479, 1, 1, "", "last"], [480, 1, 1, "", "len"], [481, 1, 1, "", "lengths"], [482, 1, 1, "", "max"], [483, 1, 1, "", "mean"], [484, 1, 1, "", "min"], [485, 1, 1, "", "reverse"], [486, 1, 1, "", "sample"], [487, 1, 1, "", "set_difference"], [488, 1, 1, "", "set_intersection"], [489, 1, 1, "", "set_symmetric_difference"], [490, 1, 1, "", "set_union"], [491, 1, 1, "", "shift"], [492, 1, 1, "", "slice"], [493, 1, 1, "", "sort"], [494, 1, 1, "", "sum"], [495, 1, 1, "", "symmetric_difference"], [496, 1, 1, "", "tail"], [497, 1, 1, "", "take"], [498, 1, 1, "", "to_array"], [499, 1, 1, "", "to_struct"], [500, 1, 1, "", "union"], [501, 1, 1, "", "unique"]], "polars.Expr.meta": [[515, 1, 1, "", "eq"], [516, 1, 1, "", "has_multiple_outputs"], [517, 1, 1, "", "is_regex_projection"], [518, 1, 1, "", "ne"], [519, 1, 1, "", "output_name"], [520, 1, 1, "", "pop"], [521, 1, 1, "", "root_names"], [522, 1, 1, "", "tree_format"], [523, 1, 1, "", "undo_aliases"], [524, 1, 1, "", "write_json"]], "polars.Expr.name": [[530, 1, 1, "", "keep"], [531, 1, 1, "", "map"], [532, 1, 1, "", "prefix"], [533, 1, 1, "", "suffix"], [534, 1, 1, "", "to_lowercase"], [535, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[592, 1, 1, "", "concat"], [593, 1, 1, "", "contains"], [594, 1, 1, "", "count_match"], [595, 1, 1, "", "count_matches"], [596, 1, 1, "", "decode"], [597, 1, 1, "", "encode"], [598, 1, 1, "", "ends_with"], [599, 1, 1, "", "explode"], [600, 1, 1, "", "extract"], [601, 1, 1, "", "extract_all"], [602, 1, 1, "", "extract_groups"], [603, 1, 1, "", "json_extract"], [604, 1, 1, "", "json_path_match"], [605, 1, 1, "", "len_bytes"], [606, 1, 1, "", "len_chars"], [607, 1, 1, "", "lengths"], [608, 1, 1, "", "ljust"], [609, 1, 1, "", "lstrip"], [610, 1, 1, "", "n_chars"], [611, 1, 1, "", "pad_end"], [612, 1, 1, "", "pad_start"], [613, 1, 1, "", "parse_int"], [614, 1, 1, "", "replace"], [615, 1, 1, "", "replace_all"], [616, 1, 1, "", "rjust"], [617, 1, 1, "", "rstrip"], [618, 1, 1, "", "slice"], [619, 1, 1, "", "split"], [620, 1, 1, "", "split_exact"], [621, 1, 1, "", "splitn"], [622, 1, 1, "", "starts_with"], [623, 1, 1, "", "strip"], [624, 1, 1, "", "strip_chars"], [625, 1, 1, "", "strip_chars_end"], [626, 1, 1, "", "strip_chars_start"], [627, 1, 1, "", "strip_prefix"], [628, 1, 1, "", "strip_suffix"], [629, 1, 1, "", "strptime"], [630, 1, 1, "", "to_date"], [631, 1, 1, "", "to_datetime"], [632, 1, 1, "", "to_decimal"], [633, 1, 1, "", "to_lowercase"], [634, 1, 1, "", "to_time"], [635, 1, 1, "", "to_titlecase"], [636, 1, 1, "", "to_uppercase"], [637, 1, 1, "", "zfill"]], "polars.Expr.struct": [[638, 1, 1, "", "field"], [639, 1, 1, "", "rename_fields"]], "polars.Float32": [[51, 1, 1, "", "__init__"]], "polars.Float64": [[52, 1, 1, "", "__init__"]], "polars.Int16": [[53, 1, 1, "", "__init__"]], "polars.Int32": [[54, 1, 1, "", "__init__"]], "polars.Int64": [[55, 1, 1, "", "__init__"]], "polars.Int8": [[56, 1, 1, "", "__init__"]], "polars.LazyFrame": [[756, 1, 1, "", "approx_n_unique"], [757, 1, 1, "", "approx_unique"], [758, 1, 1, "", "bottom_k"], [759, 1, 1, "", "cache"], [760, 1, 1, "", "cast"], [761, 1, 1, "", "clear"], [762, 1, 1, "", "clone"], [763, 1, 1, "", "collect"], [764, 1, 1, "", "collect_async"], [765, 2, 1, "", "columns"], [766, 1, 1, "", "deserialize"], [767, 1, 1, "", "drop"], [768, 1, 1, "", "drop_nulls"], [769, 2, 1, "", "dtypes"], [770, 1, 1, "", "explain"], [771, 1, 1, "", "explode"], [772, 1, 1, "", "fetch"], [773, 1, 1, "", "fill_nan"], [774, 1, 1, "", "fill_null"], [775, 1, 1, "", "filter"], [776, 1, 1, "", "first"], [777, 1, 1, "", "from_json"], [778, 1, 1, "", "gather_every"], [779, 1, 1, "", "group_by"], [780, 1, 1, "", "group_by_dynamic"], [781, 1, 1, "", "group_by_rolling"], [782, 1, 1, "", "groupby"], [783, 1, 1, "", "groupby_dynamic"], [784, 1, 1, "", "groupby_rolling"], [785, 1, 1, "", "head"], [786, 1, 1, "", "inspect"], [787, 1, 1, "", "interpolate"], [788, 1, 1, "", "join"], [789, 1, 1, "", "join_asof"], [790, 1, 1, "", "last"], [791, 1, 1, "", "lazy"], [792, 1, 1, "", "limit"], [793, 1, 1, "", "map"], [794, 1, 1, "", "map_batches"], [795, 1, 1, "", "max"], [796, 1, 1, "", "mean"], [797, 1, 1, "", "median"], [798, 1, 1, "", "melt"], [799, 1, 1, "", "merge_sorted"], [800, 1, 1, "", "min"], [801, 1, 1, "", "null_count"], [802, 1, 1, "", "pipe"], [803, 1, 1, "", "profile"], [804, 1, 1, "", "quantile"], [805, 1, 1, "", "read_json"], [806, 1, 1, "", "rename"], [807, 1, 1, "", "reverse"], [808, 1, 1, "", "rolling"], [809, 2, 1, "", "schema"], [810, 1, 1, "", "select"], [811, 1, 1, "", "select_seq"], [812, 1, 1, "", "serialize"], [813, 1, 1, "", "set_sorted"], [814, 1, 1, "", "shift"], [815, 1, 1, "", "shift_and_fill"], [816, 1, 1, "", "show_graph"], [57, 1, 1, "", "sink_csv"], [58, 1, 1, "", "sink_ipc"], [59, 1, 1, "", "sink_parquet"], [817, 1, 1, "", "slice"], [818, 1, 1, "", "sort"], [819, 1, 1, "", "std"], [820, 1, 1, "", "sum"], [821, 1, 1, "", "tail"], [822, 1, 1, "", "take_every"], [823, 1, 1, "", "top_k"], [824, 1, 1, "", "unique"], [825, 1, 1, "", "unnest"], [826, 1, 1, "", "update"], [827, 1, 1, "", "var"], [828, 2, 1, "", "width"], [829, 1, 1, "", "with_columns"], [830, 1, 1, "", "with_columns_seq"], [831, 1, 1, "", "with_context"], [832, 1, 1, "", "with_row_count"], [833, 1, 1, "", "write_json"]], "polars.List": [[60, 1, 1, "", "__init__"]], "polars.Null": [[61, 1, 1, "", "__init__"]], "polars.Object": [[62, 1, 1, "", "__init__"]], "polars.SQLContext": [[1222, 1, 1, "", "__enter__"], [1222, 1, 1, "", "__exit__"], [1222, 1, 1, "", "__init__"], [63, 1, 1, "", "execute"], [64, 1, 1, "", "register"], [65, 1, 1, "", "register_globals"], [66, 1, 1, "", "register_many"], [67, 1, 1, "", "tables"], [68, 1, 1, "", "unregister"]], "polars.Series": [[858, 1, 1, "", "abs"], [859, 1, 1, "", "alias"], [860, 1, 1, "", "all"], [861, 1, 1, "", "any"], [862, 1, 1, "", "append"], [863, 1, 1, "", "apply"], [864, 1, 1, "", "arccos"], [865, 1, 1, "", "arccosh"], [866, 1, 1, "", "arcsin"], [867, 1, 1, "", "arcsinh"], [868, 1, 1, "", "arctan"], [869, 1, 1, "", "arctanh"], [870, 1, 1, "", "arg_max"], [871, 1, 1, "", "arg_min"], [872, 1, 1, "", "arg_sort"], [873, 1, 1, "", "arg_true"], [874, 1, 1, "", "arg_unique"], [885, 1, 1, "", "bottom_k"], [886, 1, 1, "", "cast"], [887, 3, 1, "", "cat"], [893, 1, 1, "", "cbrt"], [894, 1, 1, "", "ceil"], [895, 1, 1, "", "chunk_lengths"], [896, 1, 1, "", "clear"], [897, 1, 1, "", "clip"], [898, 1, 1, "", "clip_max"], [899, 1, 1, "", "clip_min"], [900, 1, 1, "", "clone"], [901, 1, 1, "", "cos"], [902, 1, 1, "", "cosh"], [903, 1, 1, "", "cot"], [904, 1, 1, "", "cum_max"], [905, 1, 1, "", "cum_min"], [906, 1, 1, "", "cum_prod"], [907, 1, 1, "", "cum_sum"], [908, 1, 1, "", "cummax"], [909, 1, 1, "", "cummin"], [910, 1, 1, "", "cumprod"], [911, 1, 1, "", "cumsum"], [912, 1, 1, "", "cumulative_eval"], [913, 1, 1, "", "cut"], [914, 1, 1, "", "describe"], [915, 1, 1, "", "diff"], [916, 1, 1, "", "dot"], [917, 1, 1, "", "drop_nans"], [918, 1, 1, "", "drop_nulls"], [919, 3, 1, "", "dt"], [972, 3, 1, "", "dtype"], [973, 1, 1, "", "entropy"], [974, 1, 1, "", "estimated_size"], [975, 1, 1, "", "ewm_mean"], [976, 1, 1, "", "ewm_std"], [977, 1, 1, "", "ewm_var"], [978, 1, 1, "", "exp"], [979, 1, 1, "", "explode"], [980, 1, 1, "", "extend"], [981, 1, 1, "", "extend_constant"], [982, 1, 1, "", "fill_nan"], [983, 1, 1, "", "fill_null"], [984, 1, 1, "", "filter"], [985, 3, 1, "", "flags"], [986, 1, 1, "", "floor"], [987, 1, 1, "", "gather"], [988, 1, 1, "", "gather_every"], [989, 1, 1, "", "get_chunks"], [990, 1, 1, "", "has_validity"], [991, 1, 1, "", "hash"], [992, 1, 1, "", "head"], [993, 1, 1, "", "hist"], [994, 1, 1, "", "implode"], [995, 3, 1, "", "inner_dtype"], [996, 1, 1, "", "interpolate"], [997, 1, 1, "", "is_between"], [998, 1, 1, "", "is_boolean"], [999, 1, 1, "", "is_duplicated"], [1000, 1, 1, "", "is_empty"], [1001, 1, 1, "", "is_finite"], [1002, 1, 1, "", "is_first"], [1003, 1, 1, "", "is_first_distinct"], [1004, 1, 1, "", "is_float"], [1005, 1, 1, "", "is_in"], [1006, 1, 1, "", "is_infinite"], [1007, 1, 1, "", "is_integer"], [1008, 1, 1, "", "is_last"], [1009, 1, 1, "", "is_last_distinct"], [1010, 1, 1, "", "is_nan"], [1011, 1, 1, "", "is_not_nan"], [1012, 1, 1, "", "is_not_null"], [1013, 1, 1, "", "is_null"], [1014, 1, 1, "", "is_numeric"], [1015, 1, 1, "", "is_sorted"], [1016, 1, 1, "", "is_temporal"], [1017, 1, 1, "", "is_unique"], [1018, 1, 1, "", "is_utf8"], [1019, 1, 1, "", "item"], [1020, 1, 1, "", "kurtosis"], [1021, 1, 1, "", "len"], [1022, 1, 1, "", "limit"], [1023, 3, 1, "", "list"], [1066, 1, 1, "", "log"], [1067, 1, 1, "", "log10"], [1068, 1, 1, "", "log1p"], [1069, 1, 1, "", "lower_bound"], [1070, 1, 1, "", "map_dict"], [1071, 1, 1, "", "map_elements"], [1072, 1, 1, "", "max"], [1073, 1, 1, "", "mean"], [1074, 1, 1, "", "median"], [1075, 1, 1, "", "min"], [1076, 1, 1, "", "mode"], [1077, 1, 1, "", "n_chunks"], [1078, 1, 1, "", "n_unique"], [1079, 3, 1, "", "name"], [1080, 1, 1, "", "nan_max"], [1081, 1, 1, "", "nan_min"], [1082, 1, 1, "", "new_from_index"], [1083, 1, 1, "", "not_"], [1084, 1, 1, "", "null_count"], [1085, 1, 1, "", "pct_change"], [1086, 1, 1, "", "peak_max"], [1087, 1, 1, "", "peak_min"], [1088, 1, 1, "", "product"], [1089, 1, 1, "", "qcut"], [1090, 1, 1, "", "quantile"], [1091, 1, 1, "", "rank"], [1092, 1, 1, "", "rechunk"], [1093, 1, 1, "", "reinterpret"], [1094, 1, 1, "", "rename"], [1095, 1, 1, "", "reshape"], [1096, 1, 1, "", "reverse"], [1097, 1, 1, "", "rle"], [1098, 1, 1, "", "rle_id"], [1099, 1, 1, "", "rolling_apply"], [1100, 1, 1, "", "rolling_map"], [1101, 1, 1, "", "rolling_max"], [1102, 1, 1, "", "rolling_mean"], [1103, 1, 1, "", "rolling_median"], [1104, 1, 1, "", "rolling_min"], [1105, 1, 1, "", "rolling_quantile"], [1106, 1, 1, "", "rolling_skew"], [1107, 1, 1, "", "rolling_std"], [1108, 1, 1, "", "rolling_sum"], [1109, 1, 1, "", "rolling_var"], [1110, 1, 1, "", "round"], [1111, 1, 1, "", "round_sig_figs"], [1112, 1, 1, "", "sample"], [1113, 1, 1, "", "scatter"], [1114, 1, 1, "", "search_sorted"], [1115, 1, 1, "", "series_equal"], [1116, 1, 1, "", "set"], [1117, 1, 1, "", "set_at_idx"], [1118, 1, 1, "", "set_sorted"], [1119, 3, 1, "", "shape"], [1120, 1, 1, "", "shift"], [1121, 1, 1, "", "shift_and_fill"], [1122, 1, 1, "", "shrink_dtype"], [1123, 1, 1, "", "shrink_to_fit"], [1124, 1, 1, "", "shuffle"], [1125, 1, 1, "", "sign"], [1126, 1, 1, "", "sin"], [1127, 1, 1, "", "sinh"], [1128, 1, 1, "", "skew"], [1129, 1, 1, "", "slice"], [1130, 1, 1, "", "sort"], [1131, 1, 1, "", "sqrt"], [1132, 1, 1, "", "std"], [1133, 3, 1, "", "str"], [1185, 1, 1, "", "sum"], [1186, 1, 1, "", "tail"], [1187, 1, 1, "", "take"], [1188, 1, 1, "", "take_every"], [1189, 1, 1, "", "tan"], [1190, 1, 1, "", "tanh"], [1191, 1, 1, "", "to_arrow"], [1192, 1, 1, "", "to_dummies"], [1193, 1, 1, "", "to_frame"], [1194, 1, 1, "", "to_init_repr"], [1195, 1, 1, "", "to_list"], [1196, 1, 1, "", "to_numpy"], [1197, 1, 1, "", "to_pandas"], [1198, 1, 1, "", "to_physical"], [1199, 1, 1, "", "top_k"], [1200, 1, 1, "", "unique"], [1201, 1, 1, "", "unique_counts"], [1202, 1, 1, "", "upper_bound"], [1203, 1, 1, "", "value_counts"], [1204, 1, 1, "", "var"], [1205, 1, 1, "", "view"], [1206, 1, 1, "", "zip_with"]], "polars.Series.arr": [[875, 1, 1, "", "max"], [876, 1, 1, "", "min"], [877, 1, 1, "", "sum"], [878, 1, 1, "", "to_list"], [879, 1, 1, "", "unique"]], "polars.Series.bin": [[880, 1, 1, "", "contains"], [881, 1, 1, "", "decode"], [882, 1, 1, "", "encode"], [883, 1, 1, "", "ends_with"], [884, 1, 1, "", "starts_with"]], "polars.Series.cat": [[888, 1, 1, "", "get_categories"], [889, 1, 1, "", "is_local"], [890, 1, 1, "", "set_ordering"], [891, 1, 1, "", "to_local"], [892, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[920, 1, 1, "", "base_utc_offset"], [921, 1, 1, "", "cast_time_unit"], [922, 1, 1, "", "combine"], [923, 1, 1, "", "convert_time_zone"], [924, 1, 1, "", "date"], [925, 1, 1, "", "datetime"], [926, 1, 1, "", "day"], [927, 1, 1, "", "days"], [928, 1, 1, "", "dst_offset"], [929, 1, 1, "", "epoch"], [930, 1, 1, "", "hour"], [931, 1, 1, "", "hours"], [932, 1, 1, "", "is_leap_year"], [933, 1, 1, "", "iso_year"], [934, 1, 1, "", "max"], [935, 1, 1, "", "mean"], [936, 1, 1, "", "median"], [937, 1, 1, "", "microsecond"], [938, 1, 1, "", "microseconds"], [939, 1, 1, "", "millisecond"], [940, 1, 1, "", "milliseconds"], [941, 1, 1, "", "min"], [942, 1, 1, "", "minute"], [943, 1, 1, "", "minutes"], [944, 1, 1, "", "month"], [945, 1, 1, "", "month_end"], [946, 1, 1, "", "month_start"], [947, 1, 1, "", "nanosecond"], [948, 1, 1, "", "nanoseconds"], [949, 1, 1, "", "offset_by"], [950, 1, 1, "", "ordinal_day"], [951, 1, 1, "", "quarter"], [952, 1, 1, "", "replace_time_zone"], [953, 1, 1, "", "round"], [954, 1, 1, "", "second"], [955, 1, 1, "", "seconds"], [956, 1, 1, "", "strftime"], [957, 1, 1, "", "time"], [958, 1, 1, "", "timestamp"], [959, 1, 1, "", "to_string"], [960, 1, 1, "", "total_days"], [961, 1, 1, "", "total_hours"], [962, 1, 1, "", "total_microseconds"], [963, 1, 1, "", "total_milliseconds"], [964, 1, 1, "", "total_minutes"], [965, 1, 1, "", "total_nanoseconds"], [966, 1, 1, "", "total_seconds"], [967, 1, 1, "", "truncate"], [968, 1, 1, "", "week"], [969, 1, 1, "", "weekday"], [970, 1, 1, "", "with_time_unit"], [971, 1, 1, "", "year"]], "polars.Series.list": [[1024, 1, 1, "", "all"], [1025, 1, 1, "", "any"], [1026, 1, 1, "", "arg_max"], [1027, 1, 1, "", "arg_min"], [1028, 1, 1, "", "concat"], [1029, 1, 1, "", "contains"], [1030, 1, 1, "", "count_match"], [1031, 1, 1, "", "count_matches"], [1032, 1, 1, "", "diff"], [1033, 1, 1, "", "difference"], [1034, 1, 1, "", "drop_nulls"], [1035, 1, 1, "", "eval"], [1036, 1, 1, "", "explode"], [1037, 1, 1, "", "first"], [1038, 1, 1, "", "gather"], [1039, 1, 1, "", "get"], [1040, 1, 1, "", "head"], [1041, 1, 1, "", "intersection"], [1042, 1, 1, "", "join"], [1043, 1, 1, "", "last"], [1044, 1, 1, "", "len"], [1045, 1, 1, "", "lengths"], [1046, 1, 1, "", "max"], [1047, 1, 1, "", "mean"], [1048, 1, 1, "", "min"], [1049, 1, 1, "", "reverse"], [1050, 1, 1, "", "sample"], [1051, 1, 1, "", "set_difference"], [1052, 1, 1, "", "set_intersection"], [1053, 1, 1, "", "set_symmetric_difference"], [1054, 1, 1, "", "set_union"], [1055, 1, 1, "", "shift"], [1056, 1, 1, "", "slice"], [1057, 1, 1, "", "sort"], [1058, 1, 1, "", "sum"], [1059, 1, 1, "", "symmetric_difference"], [1060, 1, 1, "", "tail"], [1061, 1, 1, "", "take"], [1062, 1, 1, "", "to_array"], [1063, 1, 1, "", "to_struct"], [1064, 1, 1, "", "union"], [1065, 1, 1, "", "unique"]], "polars.Series.str": [[1134, 1, 1, "", "concat"], [1135, 1, 1, "", "contains"], [1136, 1, 1, "", "count_match"], [1137, 1, 1, "", "count_matches"], [1138, 1, 1, "", "decode"], [1139, 1, 1, "", "encode"], [1140, 1, 1, "", "ends_with"], [1141, 1, 1, "", "explode"], [1142, 1, 1, "", "extract"], [1143, 1, 1, "", "extract_all"], [1144, 1, 1, "", "extract_groups"], [1145, 1, 1, "", "json_extract"], [1146, 1, 1, "", "json_path_match"], [1147, 1, 1, "", "len_bytes"], [1148, 1, 1, "", "len_chars"], [1149, 1, 1, "", "lengths"], [1150, 1, 1, "", "ljust"], [1151, 1, 1, "", "lstrip"], [1152, 1, 1, "", "n_chars"], [1153, 1, 1, "", "pad_end"], [1154, 1, 1, "", "pad_start"], [1155, 1, 1, "", "parse_int"], [1156, 1, 1, "", "replace"], [1157, 1, 1, "", "replace_all"], [1158, 1, 1, "", "rjust"], [1159, 1, 1, "", "rstrip"], [1160, 1, 1, "", "slice"], [1161, 1, 1, "", "split"], [1162, 1, 1, "", "split_exact"], [1163, 1, 1, "", "splitn"], [1164, 1, 1, "", "starts_with"], [1165, 1, 1, "", "strip"], [1166, 1, 1, "", "strip_chars"], [1167, 1, 1, "", "strip_chars_end"], [1168, 1, 1, "", "strip_chars_start"], [1169, 1, 1, "", "strip_prefix"], [1170, 1, 1, "", "strip_suffix"], [1171, 1, 1, "", "strptime"], [1172, 1, 1, "", "to_date"], [1173, 1, 1, "", "to_datetime"], [1174, 1, 1, "", "to_decimal"], [1175, 1, 1, "", "to_lowercase"], [1176, 1, 1, "", "to_time"], [1177, 1, 1, "", "to_titlecase"], [1178, 1, 1, "", "to_uppercase"], [1179, 1, 1, "", "zfill"]], "polars.Series.struct": [[1180, 1, 1, "", "field"], [1181, 3, 1, "", "fields"], [1182, 1, 1, "", "rename_fields"], [1183, 3, 1, "", "schema"], [1184, 1, 1, "", "unnest"]], "polars.StringCache": [[69, 1, 1, "", "__init__"]], "polars.Struct": [[70, 1, 1, "", "__init__"]], "polars.Time": [[71, 1, 1, "", "__init__"]], "polars.UInt16": [[72, 1, 1, "", "__init__"]], "polars.UInt32": [[73, 1, 1, "", "__init__"]], "polars.UInt64": [[74, 1, 1, "", "__init__"]], "polars.UInt8": [[75, 1, 1, "", "__init__"]], "polars.Unknown": [[76, 1, 1, "", "__init__"]], "polars.Utf8": [[77, 1, 1, "", "__init__"]], "polars.api": [[79, 4, 1, "", "register_dataframe_namespace"], [80, 4, 1, "", "register_expr_namespace"], [81, 4, 1, "", "register_lazyframe_namespace"], [82, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[271, 1, 1, "", "__iter__"], [272, 1, 1, "", "agg"], [273, 1, 1, "", "all"], [274, 1, 1, "", "apply"], [275, 1, 1, "", "count"], [276, 1, 1, "", "first"], [277, 1, 1, "", "head"], [278, 1, 1, "", "last"], [279, 1, 1, "", "map_groups"], [280, 1, 1, "", "max"], [281, 1, 1, "", "mean"], [282, 1, 1, "", "median"], [283, 1, 1, "", "min"], [284, 1, 1, "", "n_unique"], [285, 1, 1, "", "quantile"], [286, 1, 1, "", "sum"], [287, 1, 1, "", "tail"]], "polars.exceptions": [[89, 5, 1, "", "ArrowError"], [90, 5, 1, "", "ColumnNotFoundError"], [91, 5, 1, "", "ComputeError"], [92, 5, 1, "", "DuplicateError"], [93, 5, 1, "", "InvalidOperationError"], [94, 5, 1, "", "NoDataError"], [95, 5, 1, "", "NoRowsReturnedError"], [96, 5, 1, "", "PolarsPanicError"], [97, 5, 1, "", "RowsError"], [98, 5, 1, "", "SchemaError"], [99, 5, 1, "", "SchemaFieldNotFoundError"], [100, 5, 1, "", "ShapeError"], [101, 5, 1, "", "StructFieldNotFoundError"], [102, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[112, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[834, 1, 1, "", "agg"], [835, 1, 1, "", "all"], [836, 1, 1, "", "apply"], [837, 1, 1, "", "count"], [838, 1, 1, "", "first"], [839, 1, 1, "", "head"], [840, 1, 1, "", "last"], [841, 1, 1, "", "map_groups"], [842, 1, 1, "", "max"], [843, 1, 1, "", "mean"], [844, 1, 1, "", "median"], [845, 1, 1, "", "min"], [846, 1, 1, "", "n_unique"], [847, 1, 1, "", "quantile"], [848, 1, 1, "", "sum"], [849, 1, 1, "", "tail"]], "polars.selectors": [[856, 4, 1, "", "all"], [856, 4, 1, "", "by_dtype"], [856, 4, 1, "", "by_name"], [856, 4, 1, "", "categorical"], [856, 4, 1, "", "contains"], [856, 4, 1, "", "date"], [856, 4, 1, "", "datetime"], [856, 4, 1, "", "duration"], [856, 4, 1, "", "ends_with"], [856, 4, 1, "", "expand_selector"], [856, 4, 1, "", "first"], [856, 4, 1, "", "float"], [856, 4, 1, "", "integer"], [856, 4, 1, "", "is_selector"], [856, 4, 1, "", "last"], [856, 4, 1, "", "matches"], [856, 4, 1, "", "numeric"], [856, 4, 1, "", "starts_with"], [856, 4, 1, "", "string"], [856, 4, 1, "", "temporal"], [856, 4, 1, "", "time"]], "polars.testing": [[137, 4, 1, "", "assert_frame_equal"], [138, 4, 1, "", "assert_frame_not_equal"], [139, 4, 1, "", "assert_series_equal"], [140, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[141, 0, 1, "", "column"], [142, 4, 1, "", "columns"], [143, 4, 1, "", "create_list_strategy"], [144, 4, 1, "", "dataframes"], [145, 4, 1, "", "load_profile"], [146, 4, 1, "", "series"], [147, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[141, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 169, 980], "api": [1, 79, 80, 81, 82, 753], "provid": 1, "new": 1, "function": [1, 150, 740, 752, 856], "avail": 1, "registr": 1, "exampl": [1, 856, 1223], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 737, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1223], "arrai": [2, 733, 1207], "binari": [3, 734, 747, 1209], "boolean": [4, 735, 1210], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 150], "activate_decim": 6, "load": [7, 150], "load_from_fil": 8, "restore_default": 9, "save": [10, 150], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 150], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 144, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 524, 833], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 366, 684, 924], "datetim": [48, 367, 687, 925], "decim": 49, "durat": [50, 690], "float32": 51, "float64": 52, "int16": 53, "int32": 54, "int64": 55, "int8": 56, "lazyfram": [57, 58, 59, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 853], "sink_csv": 57, "sink_ipc": 58, "sink_parquet": 59, "list": [60, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 742, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1216], "null": 61, "object": 62, "sqlcontext": [63, 64, 65, 66, 67, 68], "execut": 63, "regist": 64, "register_glob": 65, "register_mani": 66, "tabl": 67, "unregist": 68, "stringcach": [69, 752], "struct": [70, 638, 639, 723, 749, 1180, 1181, 1182, 1183, 1184, 1220], "time": [71, 395, 727, 957], "uint16": 72, "uint32": 73, "uint64": 74, "uint8": 75, "unknown": 76, "utf8": 77, "align_fram": 78, "register_dataframe_namespac": 79, "register_expr_namespac": 80, "register_lazyframe_namespac": 81, "register_series_namespac": 82, "build_info": 83, "collect_al": 84, "collect_all_async": 85, "concat": [86, 464, 592, 1028, 1134], "disable_string_cach": 87, "enable_string_cach": 88, "except": [89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 297], "arrowerror": 89, "columnnotfounderror": 90, "computeerror": 91, "duplicateerror": 92, "invalidoperationerror": 93, "nodataerror": 94, "norowsreturnederror": 95, "polarspanicerror": 96, "rowserror": 97, "schemaerror": 98, "schemafieldnotfounderror": 99, "shapeerror": 100, "structfieldnotfounderror": 101, "toomanyrowsreturnederror": 102, "from_arrow": 103, "from_datafram": 104, "from_dict": [105, 106], "from_numpi": 107, "from_panda": 108, "from_record": 109, "from_repr": 110, "get_index_typ": 111, "io": 112, "csv": [112, 754], "batched_read": 112, "batchedcsvread": [112, 754], "next_batch": 112, "read_avro": 113, "read_csv": 114, "read_csv_batch": 115, "read_databas": 116, "read_database_uri": 117, "read_delta": 118, "read_excel": 119, "read_ipc": 120, "read_ipc_schema": 121, "read_ipc_stream": 122, "read_json": [123, 805], "read_ndjson": 124, "read_od": 125, "read_parquet": 126, "read_parquet_schema": 127, "scan_csv": 128, "scan_delta": 129, "scan_iceberg": 130, "scan_ipc": 131, "scan_ndjson": 132, "scan_parquet": 133, "scan_pyarrow_dataset": 134, "set_random_se": 135, "show_vers": 136, "test": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 1223], "assert_frame_equ": 137, "assert_frame_not_equ": 138, "assert_series_equ": 139, "assert_series_not_equ": 140, "parametr": [141, 142, 143, 144, 145, 146, 147, 1223], "column": [141, 142, 160, 738, 765], "create_list_strategi": 143, "load_profil": 145, "seri": [146, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1215], "set_profil": 147, "threadpool_s": 148, "using_string_cach": 149, "option": 150, "current": 150, "us": 150, "context": 150, "manag": 150, "decor": 150, "aggreg": [151, 298, 755, 857], "__dataframe__": 152, "appli": [153, 274, 307, 662, 836, 863], "approx_n_uniqu": [154, 308, 663, 756], "approx_uniqu": [155, 757], "bottom_k": [156, 331, 758, 885], "cast": [157, 333, 760, 886], "clear": [158, 761, 896], "clone": [159, 762, 900], "corr": [161, 673], "describ": [162, 914], "drop": [163, 767], "drop_in_plac": 164, "drop_nul": [165, 361, 470, 768, 918, 1034], "dtype": [166, 769, 972], "estimated_s": [167, 974], "explod": [168, 418, 472, 599, 771, 979, 1036, 1141], "fill_nan": [170, 420, 773, 982], "fill_nul": [171, 421, 774, 983], "filter": [172, 422, 775, 984], "find_idx_by_nam": 173, "flag": [174, 985], "fold": [175, 694], "frame_equ": 176, "gather_everi": [177, 430, 778, 988], "get_column": [178, 180], "get_column_index": 179, "glimps": 181, "group_bi": [182, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 779, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849], "group_by_dynam": [183, 780], "group_by_rol": [184, 781], "groupbi": [185, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 292, 782, 852], "groupby_dynam": [186, 783], "groupby_rol": [187, 784], "hash_row": 188, "head": [189, 277, 435, 476, 698, 785, 839, 992, 1040], "height": 190, "hstack": 191, "insert_at_idx": 192, "insert_column": 193, "interpol": [194, 438, 787, 996], "is_dupl": [195, 440, 999], "is_empti": [196, 1000], "is_uniqu": [197, 453, 1017], "item": [198, 1019], "iter_row": 199, "iter_slic": 200, "join": [201, 478, 788, 1042], "join_asof": [202, 789], "lazi": [203, 791], "limit": [204, 459, 792, 1022], "map_row": 205, "max": [206, 280, 320, 482, 512, 707, 795, 842, 875, 934, 1046, 1072], "max_horizont": [207, 708], "mean": [208, 281, 483, 513, 709, 796, 843, 935, 1047, 1073], "mean_horizont": 209, "median": [210, 282, 514, 710, 797, 844, 936, 1074], "melt": [211, 798], "merge_sort": [212, 799], "min": [213, 283, 321, 484, 525, 711, 800, 845, 876, 941, 1048, 1075], "min_horizont": [214, 712], "n_chunk": [215, 1077], "n_uniqu": [216, 284, 529, 713, 846, 1078], "null_count": [217, 541, 801, 1084], "partition_bi": 218, "pipe": [219, 547, 802], "pivot": 220, "product": [221, 550, 1088], "quantil": [222, 285, 552, 715, 804, 847, 1090], "rechunk": [223, 555, 1092], "renam": [224, 806, 1094], "replac": [225, 614, 1156], "replace_at_idx": 226, "replace_column": 227, "revers": [228, 485, 559, 807, 1049, 1096], "roll": [229, 562, 808], "row": [230, 231], "rows_by_kei": 232, "sampl": [233, 486, 576, 1050, 1112], "schema": [234, 809, 1183], "select": [235, 295, 720, 745, 810, 855, 1218], "select_seq": [236, 811], "set_sort": [237, 578, 813, 1118], "shape": [238, 1119], "shift": [239, 491, 579, 814, 1055, 1120], "shift_and_fil": [240, 580, 815, 1121], "shrink_to_fit": [241, 1123], "slice": [242, 492, 587, 618, 817, 1056, 1129, 1160], "sort": [243, 493, 588, 818, 1057, 1130], "std": [244, 591, 722, 819, 1132], "sum": [245, 286, 322, 494, 642, 724, 820, 848, 877, 1058, 1185], "sum_horizont": [246, 725], "tail": [247, 287, 496, 643, 726, 821, 849, 1060, 1186], "take_everi": [248, 645, 822, 1188], "to_arrow": [249, 1191], "to_dict": [250, 251], "to_dummi": [252, 1192], "to_init_repr": [253, 1194], "to_numpi": [254, 1196], "to_panda": [255, 1197], "to_seri": 256, "to_struct": [257, 499, 1063], "top_k": [258, 649, 823, 1199], "transpos": 259, "uniqu": [260, 324, 501, 651, 824, 879, 1065, 1200], "unnest": [261, 825, 1184], "unstack": 262, "updat": [263, 826], "upsampl": 264, "var": [265, 655, 730, 827, 1204], "vstack": 266, "width": [267, 828], "with_column": [268, 829], "with_columns_seq": [269, 830], "with_row_count": [270, 832], "__iter__": 271, "agg": [272, 834], "all": [273, 303, 460, 658, 835, 860, 1024], "count": [275, 344, 674, 837], "first": [276, 423, 473, 693, 776, 838, 1037], "last": [278, 456, 479, 702, 790, 840, 1043], "map_group": [279, 706, 841], "attribut": [288, 850, 1208], "comput": [289, 739, 1212], "descript": [290, 851, 1213], "export": [291, 1214], "miscellan": [294, 744, 752, 854, 1217], "manipul": [295, 745, 855, 1218], "data": 296, "type": 296, "numer": [296, 747], "tempor": [296, 750, 1221], "nest": 296, "other": 296, "expr": [299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657], "ab": [299, 858], "add": 300, "agg_group": 301, "alia": [302, 859], "and_": 304, "ani": [305, 461, 660, 861, 1025], "append": [306, 862], "arcco": [309, 864], "arccosh": [310, 865], "arcsin": [311, 866], "arcsinh": [312, 867], "arctan": [313, 868], "arctanh": [314, 869], "arg_max": [315, 462, 870, 1026], "arg_min": [316, 463, 871, 1027], "arg_sort": [317, 872], "arg_tru": [318, 873], "arg_uniqu": [319, 874], "arr": [320, 321, 322, 323, 324, 875, 876, 877, 878, 879], "to_list": [323, 878, 1195], "backward_fil": 325, "bin": [326, 327, 328, 329, 330, 880, 881, 882, 883, 884], "contain": [326, 465, 593, 880, 1029, 1135], "decod": [327, 596, 881, 1138], "encod": [328, 597, 882, 1139], "ends_with": [329, 598, 883, 1140], "starts_with": [330, 622, 884, 1164], "cach": [332, 759], "cat": [334, 335, 887, 888, 889, 890, 891, 892], "get_categori": [334, 888], "set_ord": [335, 890], "cbrt": [336, 893], "ceil": [337, 894], "clip": [338, 897], "clip_max": [339, 898], "clip_min": [340, 899], "co": [341, 901], "cosh": [342, 902], "cot": [343, 903], "cum_count": 345, "cum_max": [346, 904], "cum_min": [347, 905], "cum_prod": [348, 906], "cum_sum": [349, 678, 907], "cumcount": 350, "cummax": [351, 908], "cummin": [352, 909], "cumprod": [353, 910], "cumsum": [354, 682, 911], "cumulative_ev": [355, 912], "cut": [356, 913], "degre": 357, "diff": [358, 468, 915, 1032], "dot": [359, 916], "drop_nan": [360, 917], "dt": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971], "base_utc_offset": [362, 920], "cast_time_unit": [363, 921], "combin": [364, 922], "convert_time_zon": [365, 923], "dai": [368, 369, 926, 927], "dst_offset": [370, 928], "epoch": [371, 929], "hour": [372, 373, 930, 931], "is_leap_year": [374, 932], "iso_year": [375, 933], "microsecond": [376, 377, 937, 938], "millisecond": [378, 379, 939, 940], "minut": [380, 381, 942, 943], "month": [382, 944], "month_end": [383, 945], "month_start": [384, 946], "nanosecond": [385, 386, 947, 948], "offset_bi": [387, 949], "ordinal_dai": [388, 950], "quarter": [389, 951], "replace_time_zon": [390, 952], "round": [391, 574, 953, 1110], "second": [392, 393, 954, 955], "strftime": [394, 956], "timestamp": [396, 958], "to_str": [397, 959], "total_dai": [398, 960], "total_hour": [399, 961], "total_microsecond": [400, 962], "total_millisecond": [401, 963], "total_minut": [402, 964], "total_nanosecond": [403, 965], "total_second": [404, 966], "truncat": [405, 967], "week": [406, 968], "weekdai": [407, 969], "with_time_unit": [408, 970], "year": [409, 971], "entropi": [410, 973], "eq": [411, 515], "eq_miss": 412, "ewm_mean": [413, 975], "ewm_std": [414, 976], "ewm_var": [415, 977], "exclud": [416, 692], "exp": [417, 978], "extend_const": [419, 981], "flatten": 424, "floor": [425, 986], "floordiv": 426, "forward_fil": 427, "from_json": [428, 777], "gather": [429, 474, 987, 1038], "ge": 431, "get": [432, 475, 1039], "gt": 433, "hash": [434, 991], "implod": [436, 699, 994], "inspect": [437, 786], "is_between": [439, 997], "is_finit": [441, 1001], "is_first": [442, 1002], "is_first_distinct": [443, 1003], "is_in": [444, 1005], "is_infinit": [445, 1006], "is_last": [446, 1008], "is_last_distinct": [447, 1009], "is_nan": [448, 1010], "is_not": 449, "is_not_nan": [450, 1011], "is_not_nul": [451, 1012], "is_nul": [452, 1013], "keep_nam": 454, "kurtosi": [455, 1020], "le": 457, "len": [458, 480, 1021, 1044], "count_match": [466, 467, 594, 595, 1030, 1031, 1136, 1137], "differ": [469, 1033], "eval": [471, 1035], "intersect": [477, 1041], "length": [481, 607, 1045, 1149], "set_differ": [487, 1051], "set_intersect": [488, 1052], "set_symmetric_differ": [489, 1053], "set_union": [490, 1054], "symmetric_differ": [495, 1059], "take": [497, 644, 1061, 1187], "to_arrai": [498, 1062], "union": [500, 1064], "log": [502, 1066], "log10": [503, 1067], "log1p": [504, 1068], "lower_bound": [505, 1069], "lt": 506, "map": [507, 531, 704, 793], "map_alia": 508, "map_batch": [509, 705, 794], "map_dict": [510, 1070], "map_el": [511, 1071], "meta": [515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 743], "has_multiple_output": 516, "is_regex_project": 517, "ne": [518, 538], "output_nam": 519, "pop": 520, "root_nam": 521, "tree_format": 522, "undo_alias": 523, "mod": 526, "mode": [527, 1076], "mul": 528, "name": [530, 531, 532, 533, 534, 535, 738, 746, 1079], "keep": 530, "prefix": [532, 549], "suffix": [533, 641], "to_lowercas": [534, 633, 1175], "to_uppercas": [535, 636, 1178], "nan_max": [536, 1080], "nan_min": [537, 1081], "ne_miss": 539, "not_": [540, 1083], "or_": 542, "over": 543, "pct_chang": [544, 1085], "peak_max": [545, 1086], "peak_min": [546, 1087], "pow": 548, "qcut": [551, 1089], "radian": 553, "rank": [554, 1091], "reinterpret": [556, 1093], "repeat_bi": 557, "reshap": [558, 1095], "rle": [560, 1097], "rle_id": [561, 1098], "rolling_appli": [563, 1099], "rolling_map": [564, 1100], "rolling_max": [565, 1101], "rolling_mean": [566, 1102], "rolling_median": [567, 1103], "rolling_min": [568, 1104], "rolling_quantil": [569, 1105], "rolling_skew": [570, 1106], "rolling_std": [571, 1107], "rolling_sum": [572, 1108], "rolling_var": [573, 1109], "round_sig_fig": [575, 1111], "search_sort": [577, 1114], "shrink_dtyp": [581, 1122], "shuffl": [582, 1124], "sign": [583, 1125], "sin": [584, 1126], "sinh": [585, 1127], "skew": [586, 1128], "sort_bi": 589, "sqrt": [590, 1131], "str": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179], "extract": [600, 1142], "extract_al": [601, 1143], "extract_group": [602, 1144], "json_extract": [603, 1145], "json_path_match": [604, 1146], "len_byt": [605, 1147], "len_char": [606, 1148], "ljust": [608, 1150], "lstrip": [609, 1151], "n_char": [610, 1152], "pad_end": [611, 1153], "pad_start": [612, 1154], "parse_int": [613, 1155], "replace_al": [615, 1157], "rjust": [616, 1158], "rstrip": [617, 1159], "split": [619, 1161], "split_exact": [620, 1162], "splitn": [621, 1163], "strip": [623, 1165], "strip_char": [624, 1166], "strip_chars_end": [625, 1167], "strip_chars_start": [626, 1168], "strip_prefix": [627, 1169], "strip_suffix": [628, 1170], "strptime": [629, 1171], "to_dat": [630, 1172], "to_datetim": [631, 1173], "to_decim": [632, 1174], "to_tim": [634, 1176], "to_titlecas": [635, 1177], "zfill": [637, 1179], "field": [638, 1180, 1181], "rename_field": [639, 1182], "sub": 640, "tan": [646, 1189], "tanh": [647, 1190], "to_phys": [648, 1198], "truediv": 650, "unique_count": [652, 1201], "upper_bound": [653, 1202], "value_count": [654, 1203], "where": 656, "xor": 657, "all_horizont": 659, "any_horizont": 661, "arang": 664, "arctan2": 665, "arctan2d": 666, "arg_sort_bi": 667, "arg_wher": 668, "avg": 669, "coalesc": 670, "concat_list": 671, "concat_str": 672, "cov": 675, "cum_fold": 676, "cum_reduc": 677, "cum_sum_horizont": 679, "cumfold": 680, "cumreduc": 681, "cumsum_horizont": 683, "date_rang": [685, 686], "datetime_rang": [688, 689], "element": 691, "format": 695, "from_epoch": 696, "group": 697, "int_rang": [700, 701], "lit": 703, "ones": 714, "reduc": 716, "repeat": 717, "rolling_corr": 718, "rolling_cov": 719, "sql_expr": 721, "time_rang": [728, 729], "when": 731, "zero": 732, "categori": [736, 1211], "col": 737, "express": 741, "oper": [747, 856], "conjunct": 747, "comparison": 747, "string": [748, 1219], "window": 751, "convers": 752, "parallel": 752, "random": 752, "refer": 753, "input": 754, "output": 754, "feather": 754, "ipc": 754, "parquet": 754, "databas": 754, "json": 754, "avro": 754, "spreadsheet": 754, "apach": 754, "iceberg": 754, "delta": 754, "lake": 754, "dataset": 754, "collect": 763, "collect_async": 764, "deseri": 766, "explain": 770, "fetch": 772, "profil": [803, 1223], "serial": 812, "show_graph": 816, "with_context": 831, "lazygroupbi": [834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849], "read": 854, "write": 854, "logic": 854, "plan": 854, "selector": 856, "import": 856, "set": [856, 1116], "is_loc": 889, "to_loc": 891, "uses_lexical_ord": 892, "chunk_length": 895, "get_chunk": 989, "has_valid": 990, "hist": 993, "inner_dtyp": 995, "is_boolean": 998, "is_float": 1004, "is_integ": 1007, "is_numer": 1014, "is_sort": 1015, "is_tempor": 1016, "is_utf8": 1018, "new_from_index": 1082, "scatter": 1113, "series_equ": 1115, "set_at_idx": 1117, "to_fram": 1193, "view": 1205, "zip_with": 1206, "sql": 1222, "method": 1222, "assert": 1223, "primit": 1223, "strategi": 1223, "helper": 1223, "util": 1224}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.group_by_dynamic": [[183, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.get_columns": [[180, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_nan": [[170, "polars-dataframe-fill-nan"]], "polars.DataFrame.fold": [[175, "polars-dataframe-fold"]], "polars.DataFrame.max_horizontal": [[207, "polars-dataframe-max-horizontal"]], "polars.DataFrame.group_by_rolling": [[184, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.hash_rows": [[188, "polars-dataframe-hash-rows"]], "polars.DataFrame.get_column": [[178, "polars-dataframe-get-column"]], "polars.DataFrame.gather_every": [[177, "polars-dataframe-gather-every"]], "polars.DataFrame.iter_slices": [[200, "polars-dataframe-iter-slices"]], "polars.DataFrame.n_chunks": [[215, "polars-dataframe-n-chunks"]], "polars.DataFrame.interpolate": [[194, "polars-dataframe-interpolate"]], "polars.DataFrame.is_unique": [[197, "polars-dataframe-is-unique"]], "polars.DataFrame.median": [[210, "polars-dataframe-median"]], "polars.DataFrame.n_unique": [[216, "polars-dataframe-n-unique"]], "polars.DataFrame.partition_by": [[218, "polars-dataframe-partition-by"]], "polars.DataFrame.min": [[213, "polars-dataframe-min"]], "polars.DataFrame.iter_rows": [[199, "polars-dataframe-iter-rows"]], "polars.DataFrame.dtypes": [[166, "polars-dataframe-dtypes"]], "polars.DataFrame.height": [[190, "polars-dataframe-height"]], "polars.DataFrame.drop_nulls": [[165, "polars-dataframe-drop-nulls"]], "polars.DataFrame.explode": [[168, "polars-dataframe-explode"]], "polars.DataFrame.join": [[201, "polars-dataframe-join"]], "polars.DataFrame.get_column_index": [[179, "polars-dataframe-get-column-index"]], "polars.DataFrame.filter": [[172, "polars-dataframe-filter"]], "polars.DataFrame.map_rows": [[205, "polars-dataframe-map-rows"]], "polars.DataFrame.pipe": [[219, "polars-dataframe-pipe"]], "polars.DataFrame.limit": [[204, "polars-dataframe-limit"]], "polars.DataFrame.hstack": [[191, "polars-dataframe-hstack"]], "polars.DataFrame.fill_null": [[171, "polars-dataframe-fill-null"]], "polars.DataFrame.flags": [[174, "polars-dataframe-flags"]], "polars.DataFrame.groupby": [[185, "polars-dataframe-groupby"]], "polars.DataFrame.insert_at_idx": [[192, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.lazy": [[203, "polars-dataframe-lazy"]], "polars.DataFrame.merge_sorted": [[212, "polars-dataframe-merge-sorted"]], "polars.DataFrame.extend": [[169, "polars-dataframe-extend"]], "polars.DataFrame.glimpse": [[181, "polars-dataframe-glimpse"]], "polars.DataFrame.mean": [[208, "polars-dataframe-mean"]], "polars.DataFrame.join_asof": [[202, "polars-dataframe-join-asof"]], "polars.DataFrame.estimated_size": [[167, "polars-dataframe-estimated-size"]], "polars.DataFrame.mean_horizontal": [[209, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.find_idx_by_name": [[173, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.frame_equal": [[176, "polars-dataframe-frame-equal"]], "polars.DataFrame.head": [[189, "polars-dataframe-head"]], "polars.DataFrame.melt": [[211, "polars-dataframe-melt"]], "polars.DataFrame.insert_column": [[193, "polars-dataframe-insert-column"]], "polars.DataFrame.null_count": [[217, "polars-dataframe-null-count"]], "polars.DataFrame.min_horizontal": [[214, "polars-dataframe-min-horizontal"]], "polars.DataFrame.group_by": [[182, "polars-dataframe-group-by"]], "polars.DataFrame.is_duplicated": [[195, "polars-dataframe-is-duplicated"]], "polars.DataFrame.groupby_rolling": [[187, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.item": [[198, "polars-dataframe-item"]], "polars.DataFrame.is_empty": [[196, "polars-dataframe-is-empty"]], "polars.DataFrame.max": [[206, "polars-dataframe-max"]], "polars.DataFrame.groupby_dynamic": [[186, "polars-dataframe-groupby-dynamic"]], "polars.read_database": [[116, "polars-read-database"]], "polars.read_parquet_schema": [[127, "polars-read-parquet-schema"]], "polars.testing.parametric.series": [[146, "polars-testing-parametric-series"]], "polars.read_excel": [[119, "polars-read-excel"]], "polars.read_ipc": [[120, "polars-read-ipc"]], "polars.testing.assert_frame_equal": [[137, "polars-testing-assert-frame-equal"]], "polars.read_ipc_stream": [[122, "polars-read-ipc-stream"]], "polars.scan_iceberg": [[130, "polars-scan-iceberg"]], "polars.get_index_type": [[111, "polars-get-index-type"]], "polars.DataFrame.approx_unique": [[155, "polars-dataframe-approx-unique"]], "polars.from_repr": [[110, "polars-from-repr"]], "polars.DataFrame.drop_in_place": [[164, "polars-dataframe-drop-in-place"]], "polars.DataFrame.drop": [[163, "polars-dataframe-drop"]], "polars.read_csv_batched": [[115, "polars-read-csv-batched"]], "polars.read_csv": [[114, "polars-read-csv"]], "polars.show_versions": [[136, "polars-show-versions"]], "polars.testing.parametric.create_list_strategy": [[143, "polars-testing-parametric-create-list-strategy"]], "polars.testing.parametric.set_profile": [[147, "polars-testing-parametric-set-profile"]], "polars.DataFrame.describe": [[162, "polars-dataframe-describe"]], "polars.testing.parametric.dataframes": [[144, "polars-testing-parametric-dataframes"]], "polars.read_ods": [[125, "polars-read-ods"]], "polars.set_random_seed": [[135, "polars-set-random-seed"]], "polars.scan_ipc": [[131, "polars-scan-ipc"]], "polars.DataFrame.bottom_k": [[156, "polars-dataframe-bottom-k"]], "Aggregation": [[151, "aggregation"], [857, "aggregation"], [755, "aggregation"], [298, "aggregation"]], "polars.scan_parquet": [[133, "polars-scan-parquet"]], "polars.scan_delta": [[129, "polars-scan-delta"]], "polars.read_ipc_schema": [[121, "polars-read-ipc-schema"]], "polars.scan_ndjson": [[132, "polars-scan-ndjson"]], "polars.scan_csv": [[128, "polars-scan-csv"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[112, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.threadpool_size": [[148, "polars-threadpool-size"]], "polars.DataFrame.clear": [[158, "polars-dataframe-clear"]], "polars.using_string_cache": [[149, "polars-using-string-cache"]], "polars.DataFrame.cast": [[157, "polars-dataframe-cast"]], "polars.testing.parametric.column": [[141, "polars-testing-parametric-column"]], "polars.read_json": [[123, "polars-read-json"]], "polars.scan_pyarrow_dataset": [[134, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.columns": [[142, "polars-testing-parametric-columns"]], "polars.DataFrame.columns": [[160, "polars-dataframe-columns"]], "polars.read_delta": [[118, "polars-read-delta"]], "polars.DataFrame.corr": [[161, "polars-dataframe-corr"]], "polars.read_database_uri": [[117, "polars-read-database-uri"]], "polars.testing.assert_frame_not_equal": [[138, "polars-testing-assert-frame-not-equal"]], "polars.DataFrame.approx_n_unique": [[154, "polars-dataframe-approx-n-unique"]], "polars.DataFrame.__dataframe__": [[152, "polars-dataframe-dataframe"]], "polars.testing.assert_series_not_equal": [[140, "polars-testing-assert-series-not-equal"]], "polars.testing.assert_series_equal": [[139, "polars-testing-assert-series-equal"]], "polars.testing.parametric.load_profile": [[145, "polars-testing-parametric-load-profile"]], "polars.read_avro": [[113, "polars-read-avro"]], "polars.read_parquet": [[126, "polars-read-parquet"]], "polars.DataFrame.clone": [[159, "polars-dataframe-clone"]], "polars.DataFrame.apply": [[153, "polars-dataframe-apply"]], "Config": [[150, "config"]], "Config options": [[150, "config-options"]], "Config load, save, and current state": [[150, "config-load-save-and-current-state"]], "Use as a context manager": [[150, "use-as-a-context-manager"]], "Use as a function decorator": [[150, "use-as-a-function-decorator"]], "polars.read_ndjson": [[124, "polars-read-ndjson"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Date": [[47, "polars-date"]], "polars.Array": [[2, "polars-array"]], "Index": [[0, "index"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Duration": [[50, "polars-duration"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1223, "examples"], [856, "examples"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Float32": [[51, "polars-float32"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Float64": [[52, "polars-float64"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Int16": [[53, "polars-int16"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Int32": [[54, "polars-int32"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.DataType": [[46, "polars-datatype"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.from_dict": [[105, "polars-from-dict"]], "polars.from_dicts": [[106, "polars-from-dicts"]], "polars.from_arrow": [[103, "polars-from-arrow"]], "polars.exceptions.ColumnNotFoundError": [[90, "polars-exceptions-columnnotfounderror"]], "polars.Int64": [[55, "polars-int64"]], "polars.LazyFrame.sink_parquet": [[59, "polars-lazyframe-sink-parquet"]], "polars.exceptions.NoDataError": [[94, "polars-exceptions-nodataerror"]], "polars.build_info": [[83, "polars-build-info"]], "polars.collect_all": [[84, "polars-collect-all"]], "polars.SQLContext.register_many": [[66, "polars-sqlcontext-register-many"]], "polars.SQLContext.unregister": [[68, "polars-sqlcontext-unregister"]], "polars.Struct": [[70, "polars-struct"]], "polars.from_numpy": [[107, "polars-from-numpy"]], "polars.Utf8": [[77, "polars-utf8"]], "polars.api.register_expr_namespace": [[80, "polars-api-register-expr-namespace"]], "polars.exceptions.ComputeError": [[91, "polars-exceptions-computeerror"]], "polars.Unknown": [[76, "polars-unknown"]], "polars.collect_all_async": [[85, "polars-collect-all-async"]], "polars.UInt8": [[75, "polars-uint8"]], "polars.api.register_dataframe_namespace": [[79, "polars-api-register-dataframe-namespace"]], "polars.StringCache": [[69, "polars-stringcache"]], "polars.Time": [[71, "polars-time"]], "polars.exceptions.PolarsPanicError": [[96, "polars-exceptions-polarspanicerror"]], "polars.exceptions.StructFieldNotFoundError": [[101, "polars-exceptions-structfieldnotfounderror"]], "polars.from_dataframe": [[104, "polars-from-dataframe"]], "polars.Null": [[61, "polars-null"]], "polars.Object": [[62, "polars-object"]], "polars.align_frames": [[78, "polars-align-frames"]], "polars.Int8": [[56, "polars-int8"]], "polars.from_records": [[109, "polars-from-records"]], "polars.api.register_series_namespace": [[82, "polars-api-register-series-namespace"]], "polars.LazyFrame.sink_ipc": [[58, "polars-lazyframe-sink-ipc"]], "polars.SQLContext.tables": [[67, "polars-sqlcontext-tables"]], "polars.SQLContext.register_globals": [[65, "polars-sqlcontext-register-globals"]], "polars.exceptions.RowsError": [[97, "polars-exceptions-rowserror"]], "polars.SQLContext.execute": [[63, "polars-sqlcontext-execute"]], "polars.api.register_lazyframe_namespace": [[81, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.TooManyRowsReturnedError": [[102, "polars-exceptions-toomanyrowsreturnederror"]], "polars.List": [[60, "polars-list"]], "polars.UInt16": [[72, "polars-uint16"]], "polars.LazyFrame.sink_csv": [[57, "polars-lazyframe-sink-csv"]], "polars.exceptions.DuplicateError": [[92, "polars-exceptions-duplicateerror"]], "polars.disable_string_cache": [[87, "polars-disable-string-cache"]], "polars.UInt32": [[73, "polars-uint32"]], "polars.concat": [[86, "polars-concat"]], "polars.enable_string_cache": [[88, "polars-enable-string-cache"]], "polars.exceptions.ArrowError": [[89, "polars-exceptions-arrowerror"]], "polars.exceptions.InvalidOperationError": [[93, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[99, "polars-exceptions-schemafieldnotfounderror"]], "polars.SQLContext.register": [[64, "polars-sqlcontext-register"]], "polars.exceptions.NoRowsReturnedError": [[95, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.ShapeError": [[100, "polars-exceptions-shapeerror"]], "polars.exceptions.SchemaError": [[98, "polars-exceptions-schemaerror"]], "polars.UInt64": [[74, "polars-uint64"]], "polars.from_pandas": [[108, "polars-from-pandas"]], "polars.Series.str.split": [[1161, "polars-series-str-split"]], "polars.Series.str.replace": [[1156, "polars-series-str-replace"]], "polars.Series.struct.schema": [[1183, "polars-series-struct-schema"]], "polars.Series.struct.rename_fields": [[1182, "polars-series-struct-rename-fields"]], "polars.Series.var": [[1204, "polars-series-var"]], "polars.Series.struct.field": [[1180, "polars-series-struct-field"]], "polars.Series.take_every": [[1188, "polars-series-take-every"]], "polars.Series.to_dummies": [[1192, "polars-series-to-dummies"]], "polars.Series.zip_with": [[1206, "polars-series-zip-with"]], "polars.Series.str.to_uppercase": [[1178, "polars-series-str-to-uppercase"]], "polars.Series.str.strip_chars_start": [[1168, "polars-series-str-strip-chars-start"]], "polars.Series.struct.fields": [[1181, "polars-series-struct-fields"]], "polars.Series.to_init_repr": [[1194, "polars-series-to-init-repr"]], "polars.Series.to_numpy": [[1196, "polars-series-to-numpy"]], "polars.Series.value_counts": [[1203, "polars-series-value-counts"]], "polars.Series.str.to_lowercase": [[1175, "polars-series-str-to-lowercase"]], "polars.Series.unique_counts": [[1201, "polars-series-unique-counts"]], "polars.Series.str.strip": [[1165, "polars-series-str-strip"]], "polars.Series.str.strip_chars_end": [[1167, "polars-series-str-strip-chars-end"]], "polars.Series.str.to_date": [[1172, "polars-series-str-to-date"]], "polars.Series.str.to_time": [[1176, "polars-series-str-to-time"]], "polars.Series.str.parse_int": [[1155, "polars-series-str-parse-int"]], "polars.Series.struct.unnest": [[1184, "polars-series-struct-unnest"]], "polars.Series.view": [[1205, "polars-series-view"]], "polars.Series.str.splitn": [[1163, "polars-series-str-splitn"]], "polars.Series.str.starts_with": [[1164, "polars-series-str-starts-with"]], "Array": [[1207, "array"], [733, "array"]], "polars.Series.unique": [[1200, "polars-series-unique"]], "polars.Series.tail": [[1186, "polars-series-tail"]], "polars.Series.str.rstrip": [[1159, "polars-series-str-rstrip"]], "polars.Series.to_arrow": [[1191, "polars-series-to-arrow"]], "polars.Series.to_frame": [[1193, "polars-series-to-frame"]], "polars.Series.to_pandas": [[1197, "polars-series-to-pandas"]], "polars.Series.str.to_decimal": [[1174, "polars-series-str-to-decimal"]], "Binary": [[1209, "binary"], [747, "binary"], [734, "binary"]], "polars.Series.upper_bound": [[1202, "polars-series-upper-bound"]], "polars.Series.tan": [[1189, "polars-series-tan"]], "polars.Series.top_k": [[1199, "polars-series-top-k"]], "polars.Series.str.strip_prefix": [[1169, "polars-series-str-strip-prefix"]], "polars.Series.str.zfill": [[1179, "polars-series-str-zfill"]], "polars.Series.take": [[1187, "polars-series-take"]], "polars.Series.str.to_titlecase": [[1177, "polars-series-str-to-titlecase"]], "polars.Series.str.replace_all": [[1157, "polars-series-str-replace-all"]], "polars.Series.sum": [[1185, "polars-series-sum"]], "polars.Series.str.strptime": [[1171, "polars-series-str-strptime"]], "polars.Series.str.rjust": [[1158, "polars-series-str-rjust"]], "polars.Series.str.split_exact": [[1162, "polars-series-str-split-exact"]], "polars.Series.str.slice": [[1160, "polars-series-str-slice"]], "polars.Series.str.to_datetime": [[1173, "polars-series-str-to-datetime"]], "polars.Series.str.strip_chars": [[1166, "polars-series-str-strip-chars"]], "polars.Series.tanh": [[1190, "polars-series-tanh"]], "polars.Series.str.strip_suffix": [[1170, "polars-series-str-strip-suffix"]], "polars.Series.to_list": [[1195, "polars-series-to-list"]], "Attributes": [[1208, "attributes"], [850, "attributes"], [288, "attributes"]], "polars.Series.to_physical": [[1198, "polars-series-to-physical"]], "polars.Series.list.reverse": [[1049, "polars-series-list-reverse"]], "polars.Series.list.to_struct": [[1063, "polars-series-list-to-struct"]], "polars.Series.list.unique": [[1065, "polars-series-list-unique"]], "polars.Series.list.union": [[1064, "polars-series-list-union"]], "polars.Series.pct_change": [[1085, "polars-series-pct-change"]], "polars.Series.list.tail": [[1060, "polars-series-list-tail"]], "polars.Series.log1p": [[1068, "polars-series-log1p"]], "polars.Series.new_from_index": [[1082, "polars-series-new-from-index"]], "polars.Series.null_count": [[1084, "polars-series-null-count"]], "polars.Series.product": [[1088, "polars-series-product"]], "polars.Series.nan_min": [[1081, "polars-series-nan-min"]], "polars.Series.mean": [[1073, "polars-series-mean"]], "polars.Series.rolling_apply": [[1099, "polars-series-rolling-apply"]], "polars.Series.rle_id": [[1098, "polars-series-rle-id"]], "polars.Series.quantile": [[1090, "polars-series-quantile"]], "polars.Series.list.set_union": [[1054, "polars-series-list-set-union"]], "polars.Series.list.sum": [[1058, "polars-series-list-sum"]], "polars.Series.n_unique": [[1078, "polars-series-n-unique"]], "polars.Series.max": [[1072, "polars-series-max"]], "polars.Series.map_dict": [[1070, "polars-series-map-dict"]], "polars.Series.lower_bound": [[1069, "polars-series-lower-bound"]], "polars.Series.list.shift": [[1055, "polars-series-list-shift"]], "polars.Series.name": [[1079, "polars-series-name"]], "polars.Series.rechunk": [[1092, "polars-series-rechunk"]], "polars.Series.list.lengths": [[1045, "polars-series-list-lengths"]], "polars.Series.rename": [[1094, "polars-series-rename"]], "polars.Series.list.take": [[1061, "polars-series-list-take"]], "polars.Series.list.set_intersection": [[1052, "polars-series-list-set-intersection"]], "polars.Series.qcut": [[1089, "polars-series-qcut"]], "polars.Series.list.mean": [[1047, "polars-series-list-mean"]], "polars.Series.median": [[1074, "polars-series-median"]], "polars.Series.n_chunks": [[1077, "polars-series-n-chunks"]], "polars.Series.reverse": [[1096, "polars-series-reverse"]], "polars.Series.log": [[1066, "polars-series-log"]], "polars.Series.log10": [[1067, "polars-series-log10"]], "polars.Series.map_elements": [[1071, "polars-series-map-elements"]], "polars.Series.list.sample": [[1050, "polars-series-list-sample"]], "polars.Series.not_": [[1083, "polars-series-not"]], "polars.Series.peak_min": [[1087, "polars-series-peak-min"]], "polars.Series.list.symmetric_difference": [[1059, "polars-series-list-symmetric-difference"]], "polars.Series.rank": [[1091, "polars-series-rank"]], "polars.Series.nan_max": [[1080, "polars-series-nan-max"]], "polars.Series.mode": [[1076, "polars-series-mode"]], "polars.Series.list.to_array": [[1062, "polars-series-list-to-array"]], "polars.Series.peak_max": [[1086, "polars-series-peak-max"]], "polars.Series.rle": [[1097, "polars-series-rle"]], "polars.Series.list.sort": [[1057, "polars-series-list-sort"]], "polars.Series.list.set_symmetric_difference": [[1053, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.min": [[1048, "polars-series-list-min"]], "polars.Series.min": [[1075, "polars-series-min"]], "polars.Series.list.set_difference": [[1051, "polars-series-list-set-difference"]], "polars.Series.list.slice": [[1056, "polars-series-list-slice"]], "polars.Series.reshape": [[1095, "polars-series-reshape"]], "polars.Series.list.max": [[1046, "polars-series-list-max"]], "polars.Series.reinterpret": [[1093, "polars-series-reinterpret"]], "polars.Series.str.ends_with": [[1140, "polars-series-str-ends-with"]], "polars.Series.str.json_path_match": [[1146, "polars-series-str-json-path-match"]], "polars.Series.str.lstrip": [[1151, "polars-series-str-lstrip"]], "polars.Series.str": [[1133, "polars-series-str"]], "polars.Series.shuffle": [[1124, "polars-series-shuffle"]], "polars.Series.str.count_matches": [[1137, "polars-series-str-count-matches"]], "polars.Series.str.len_chars": [[1148, "polars-series-str-len-chars"]], "polars.Series.rolling_sum": [[1108, "polars-series-rolling-sum"]], "polars.Series.str.extract_all": [[1143, "polars-series-str-extract-all"]], "polars.Series.str.json_extract": [[1145, "polars-series-str-json-extract"]], "polars.Series.str.len_bytes": [[1147, "polars-series-str-len-bytes"]], "polars.Series.rolling_min": [[1104, "polars-series-rolling-min"]], "polars.Series.round": [[1110, "polars-series-round"]], "polars.Series.search_sorted": [[1114, "polars-series-search-sorted"]], "polars.Series.set": [[1116, "polars-series-set"]], "polars.Series.set_at_idx": [[1117, "polars-series-set-at-idx"]], "polars.Series.str.contains": [[1135, "polars-series-str-contains"]], "polars.Series.slice": [[1129, "polars-series-slice"]], "polars.Series.str.encode": [[1139, "polars-series-str-encode"]], "polars.Series.sqrt": [[1131, "polars-series-sqrt"]], "polars.Series.str.n_chars": [[1152, "polars-series-str-n-chars"]], "polars.Series.str.count_match": [[1136, "polars-series-str-count-match"]], "polars.Series.shift": [[1120, "polars-series-shift"]], "polars.Series.rolling_std": [[1107, "polars-series-rolling-std"]], "polars.Series.str.pad_end": [[1153, "polars-series-str-pad-end"]], "polars.Series.series_equal": [[1115, "polars-series-series-equal"]], "polars.Series.str.explode": [[1141, "polars-series-str-explode"]], "polars.Series.sin": [[1126, "polars-series-sin"]], "polars.Series.set_sorted": [[1118, "polars-series-set-sorted"]], "polars.Series.str.extract": [[1142, "polars-series-str-extract"]], "polars.Series.str.ljust": [[1150, "polars-series-str-ljust"]], "polars.Series.shrink_dtype": [[1122, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1123, "polars-series-shrink-to-fit"]], "polars.Series.skew": [[1128, "polars-series-skew"]], "polars.Series.rolling_map": [[1100, "polars-series-rolling-map"]], "polars.Series.scatter": [[1113, "polars-series-scatter"]], "polars.Series.str.concat": [[1134, "polars-series-str-concat"]], "polars.Series.rolling_mean": [[1102, "polars-series-rolling-mean"]], "polars.Series.str.decode": [[1138, "polars-series-str-decode"]], "polars.Series.rolling_median": [[1103, "polars-series-rolling-median"]], "polars.Series.sinh": [[1127, "polars-series-sinh"]], "polars.Series.rolling_max": [[1101, "polars-series-rolling-max"]], "polars.Series.str.lengths": [[1149, "polars-series-str-lengths"]], "polars.Series.shift_and_fill": [[1121, "polars-series-shift-and-fill"]], "polars.Series.sample": [[1112, "polars-series-sample"]], "polars.Series.shape": [[1119, "polars-series-shape"]], "polars.Series.std": [[1132, "polars-series-std"]], "polars.Series.str.extract_groups": [[1144, "polars-series-str-extract-groups"]], "polars.Series.str.pad_start": [[1154, "polars-series-str-pad-start"]], "polars.Series.rolling_skew": [[1106, "polars-series-rolling-skew"]], "polars.Series.round_sig_figs": [[1111, "polars-series-round-sig-figs"]], "polars.Series.sign": [[1125, "polars-series-sign"]], "polars.Series.rolling_quantile": [[1105, "polars-series-rolling-quantile"]], "polars.Series.sort": [[1130, "polars-series-sort"]], "polars.Series.rolling_var": [[1109, "polars-series-rolling-var"]], "polars.Series.is_not_null": [[1012, "polars-series-is-not-null"]], "polars.Series.is_float": [[1004, "polars-series-is-float"]], "polars.Series.list.explode": [[1036, "polars-series-list-explode"]], "polars.Series.hash": [[991, "polars-series-hash"]], "polars.Series.implode": [[994, "polars-series-implode"]], "polars.Series.list.head": [[1040, "polars-series-list-head"]], "polars.Series.kurtosis": [[1020, "polars-series-kurtosis"]], "polars.Series.is_sorted": [[1015, "polars-series-is-sorted"]], "polars.Series.is_temporal": [[1016, "polars-series-is-temporal"]], "polars.Series.list.count_match": [[1030, "polars-series-list-count-match"]], "polars.Series.is_in": [[1005, "polars-series-is-in"]], "polars.Series.is_nan": [[1010, "polars-series-is-nan"]], "polars.Series.list.count_matches": [[1031, "polars-series-list-count-matches"]], "polars.Series.is_last": [[1008, "polars-series-is-last"]], "polars.Series.is_numeric": [[1014, "polars-series-is-numeric"]], "polars.Series.is_finite": [[1001, "polars-series-is-finite"]], "polars.Series.is_unique": [[1017, "polars-series-is-unique"]], "polars.Series.list.get": [[1039, "polars-series-list-get"]], "polars.Series.list.gather": [[1038, "polars-series-list-gather"]], "polars.Series.is_not_nan": [[1011, "polars-series-is-not-nan"]], "polars.Series.is_utf8": [[1018, "polars-series-is-utf8"]], "polars.Series.limit": [[1022, "polars-series-limit"]], "polars.Series.interpolate": [[996, "polars-series-interpolate"]], "polars.Series.is_boolean": [[998, "polars-series-is-boolean"]], "polars.Series.list.arg_max": [[1026, "polars-series-list-arg-max"]], "polars.Series.is_first_distinct": [[1003, "polars-series-is-first-distinct"]], "polars.Series.item": [[1019, "polars-series-item"]], "polars.Series.list.join": [[1042, "polars-series-list-join"]], "polars.Series.list.last": [[1043, "polars-series-list-last"]], "polars.Series.is_infinite": [[1006, "polars-series-is-infinite"]], "polars.Series.list.first": [[1037, "polars-series-list-first"]], "polars.Series.list.any": [[1025, "polars-series-list-any"]], "polars.Series.hist": [[993, "polars-series-hist"]], "polars.Series.is_empty": [[1000, "polars-series-is-empty"]], "polars.Series.len": [[1021, "polars-series-len"]], "polars.Series.list.difference": [[1033, "polars-series-list-difference"]], "polars.Series.is_between": [[997, "polars-series-is-between"]], "polars.Series.list.all": [[1024, "polars-series-list-all"]], "polars.Series.list.arg_min": [[1027, "polars-series-list-arg-min"]], "polars.Series.list.drop_nulls": [[1034, "polars-series-list-drop-nulls"]], "polars.Series.is_duplicated": [[999, "polars-series-is-duplicated"]], "polars.Series.inner_dtype": [[995, "polars-series-inner-dtype"]], "polars.Series.head": [[992, "polars-series-head"]], "polars.Series.has_validity": [[990, "polars-series-has-validity"]], "polars.Series.is_first": [[1002, "polars-series-is-first"]], "polars.Series.list.diff": [[1032, "polars-series-list-diff"]], "polars.Series.list.intersection": [[1041, "polars-series-list-intersection"]], "polars.Series.list.len": [[1044, "polars-series-list-len"]], "polars.Series.is_null": [[1013, "polars-series-is-null"]], "polars.Series.list.contains": [[1029, "polars-series-list-contains"]], "polars.Series.is_integer": [[1007, "polars-series-is-integer"]], "polars.Series.is_last_distinct": [[1009, "polars-series-is-last-distinct"]], "polars.Series.list.concat": [[1028, "polars-series-list-concat"]], "polars.Series.list.eval": [[1035, "polars-series-list-eval"]], "polars.Series.list": [[1023, "polars-series-list"]], "polars.Series.dt.total_nanoseconds": [[965, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.to_string": [[959, "polars-series-dt-to-string"]], "polars.Series.dt.month": [[944, "polars-series-dt-month"]], "polars.Series.dt.timestamp": [[958, "polars-series-dt-timestamp"]], "polars.Series.dtype": [[972, "polars-series-dtype"]], "polars.Series.dt.month_start": [[946, "polars-series-dt-month-start"]], "polars.Series.dt.min": [[941, "polars-series-dt-min"]], "polars.Series.dt.ordinal_day": [[950, "polars-series-dt-ordinal-day"]], "polars.Series.fill_nan": [[982, "polars-series-fill-nan"]], "polars.Series.dt.year": [[971, "polars-series-dt-year"]], "polars.Series.dt.total_microseconds": [[962, "polars-series-dt-total-microseconds"]], "polars.Series.dt.nanoseconds": [[948, "polars-series-dt-nanoseconds"]], "polars.Series.dt.microsecond": [[937, "polars-series-dt-microsecond"]], "polars.Series.dt.strftime": [[956, "polars-series-dt-strftime"]], "polars.Series.gather_every": [[988, "polars-series-gather-every"]], "polars.Series.dt.weekday": [[969, "polars-series-dt-weekday"]], "polars.Series.dt.millisecond": [[939, "polars-series-dt-millisecond"]], "polars.Series.flags": [[985, "polars-series-flags"]], "polars.Series.dt.week": [[968, "polars-series-dt-week"]], "polars.Series.dt.replace_time_zone": [[952, "polars-series-dt-replace-time-zone"]], "polars.Series.estimated_size": [[974, "polars-series-estimated-size"]], "polars.Series.dt.round": [[953, "polars-series-dt-round"]], "polars.Series.extend_constant": [[981, "polars-series-extend-constant"]], "polars.Series.dt.total_minutes": [[964, "polars-series-dt-total-minutes"]], "polars.Series.dt.month_end": [[945, "polars-series-dt-month-end"]], "polars.Series.dt.total_milliseconds": [[963, "polars-series-dt-total-milliseconds"]], "polars.Series.gather": [[987, "polars-series-gather"]], "polars.Series.get_chunks": [[989, "polars-series-get-chunks"]], "polars.Series.dt.second": [[954, "polars-series-dt-second"]], "polars.Series.dt.nanosecond": [[947, "polars-series-dt-nanosecond"]], "polars.Series.dt.with_time_unit": [[970, "polars-series-dt-with-time-unit"]], "polars.Series.exp": [[978, "polars-series-exp"]], "polars.Series.extend": [[980, "polars-series-extend"]], "polars.Series.entropy": [[973, "polars-series-entropy"]], "polars.Series.dt.total_seconds": [[966, "polars-series-dt-total-seconds"]], "polars.Series.dt.seconds": [[955, "polars-series-dt-seconds"]], "polars.Series.ewm_var": [[977, "polars-series-ewm-var"]], "polars.Series.dt.minute": [[942, "polars-series-dt-minute"]], "polars.Series.dt.median": [[936, "polars-series-dt-median"]], "polars.Series.dt.total_days": [[960, "polars-series-dt-total-days"]], "polars.Series.dt.total_hours": [[961, "polars-series-dt-total-hours"]], "polars.Series.dt.truncate": [[967, "polars-series-dt-truncate"]], "polars.Series.dt.time": [[957, "polars-series-dt-time"]], "polars.Series.dt.milliseconds": [[940, "polars-series-dt-milliseconds"]], "polars.Series.filter": [[984, "polars-series-filter"]], "polars.Series.dt.minutes": [[943, "polars-series-dt-minutes"]], "polars.Series.dt.microseconds": [[938, "polars-series-dt-microseconds"]], "polars.Series.ewm_std": [[976, "polars-series-ewm-std"]], "polars.Series.fill_null": [[983, "polars-series-fill-null"]], "polars.Series.ewm_mean": [[975, "polars-series-ewm-mean"]], "polars.Series.dt.quarter": [[951, "polars-series-dt-quarter"]], "polars.Series.dt.offset_by": [[949, "polars-series-dt-offset-by"]], "polars.Series.dt.mean": [[935, "polars-series-dt-mean"]], "polars.Series.floor": [[986, "polars-series-floor"]], "polars.Series.explode": [[979, "polars-series-explode"]], "polars.Series.cat.get_categories": [[888, "polars-series-cat-get-categories"]], "polars.Series.cum_prod": [[906, "polars-series-cum-prod"]], "polars.Series.bottom_k": [[885, "polars-series-bottom-k"]], "polars.Series.cast": [[886, "polars-series-cast"]], "polars.Series.clip_min": [[899, "polars-series-clip-min"]], "polars.Series.dt.base_utc_offset": [[920, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.day": [[926, "polars-series-dt-day"]], "polars.Series.cat.uses_lexical_ordering": [[892, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cumprod": [[910, "polars-series-cumprod"]], "polars.Series.bin.contains": [[880, "polars-series-bin-contains"]], "polars.Series.bin.encode": [[882, "polars-series-bin-encode"]], "polars.Series.cat.to_local": [[891, "polars-series-cat-to-local"]], "polars.Series.dot": [[916, "polars-series-dot"]], "polars.Series.dt.cast_time_unit": [[921, "polars-series-dt-cast-time-unit"]], "polars.Series.cum_sum": [[907, "polars-series-cum-sum"]], "polars.Series.dt.datetime": [[925, "polars-series-dt-datetime"]], "polars.Series.clone": [[900, "polars-series-clone"]], "polars.Series.cum_max": [[904, "polars-series-cum-max"]], "polars.Series.drop_nulls": [[918, "polars-series-drop-nulls"]], "polars.Series.cummax": [[908, "polars-series-cummax"]], "polars.Series.cut": [[913, "polars-series-cut"]], "polars.Series.diff": [[915, "polars-series-diff"]], "polars.Series.bin.starts_with": [[884, "polars-series-bin-starts-with"]], "polars.Series.cos": [[901, "polars-series-cos"]], "polars.Series.dt.date": [[924, "polars-series-dt-date"]], "polars.Series.cumulative_eval": [[912, "polars-series-cumulative-eval"]], "polars.Series.dt.hour": [[930, "polars-series-dt-hour"]], "polars.Series.cbrt": [[893, "polars-series-cbrt"]], "polars.Series.cat.set_ordering": [[890, "polars-series-cat-set-ordering"]], "polars.Series.describe": [[914, "polars-series-describe"]], "polars.Series.dt": [[919, "polars-series-dt"]], "polars.Series.dt.is_leap_year": [[932, "polars-series-dt-is-leap-year"]], "polars.Series.drop_nans": [[917, "polars-series-drop-nans"]], "polars.Series.dt.combine": [[922, "polars-series-dt-combine"]], "polars.Series.cat.is_local": [[889, "polars-series-cat-is-local"]], "polars.Series.chunk_lengths": [[895, "polars-series-chunk-lengths"]], "polars.Series.clip_max": [[898, "polars-series-clip-max"]], "polars.Series.dt.convert_time_zone": [[923, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.ends_with": [[883, "polars-series-bin-ends-with"]], "polars.Series.dt.days": [[927, "polars-series-dt-days"]], "polars.Series.ceil": [[894, "polars-series-ceil"]], "polars.Series.dt.hours": [[931, "polars-series-dt-hours"]], "polars.Series.dt.dst_offset": [[928, "polars-series-dt-dst-offset"]], "polars.Series.cat": [[887, "polars-series-cat"]], "polars.Series.cosh": [[902, "polars-series-cosh"]], "polars.Series.bin.decode": [[881, "polars-series-bin-decode"]], "polars.Series.clear": [[896, "polars-series-clear"]], "polars.Series.clip": [[897, "polars-series-clip"]], "polars.Series.cummin": [[909, "polars-series-cummin"]], "polars.Series.dt.epoch": [[929, "polars-series-dt-epoch"]], "polars.Series.cot": [[903, "polars-series-cot"]], "polars.Series.dt.max": [[934, "polars-series-dt-max"]], "polars.Series.cumsum": [[911, "polars-series-cumsum"]], "polars.Series.cum_min": [[905, "polars-series-cum-min"]], "polars.Series.dt.iso_year": [[933, "polars-series-dt-iso-year"]], "polars.LazyFrame.profile": [[803, "polars-lazyframe-profile"]], "polars.LazyFrame.shift_and_fill": [[815, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.join": [[788, "polars-lazyframe-join"]], "polars.LazyFrame.max": [[795, "polars-lazyframe-max"]], "polars.LazyFrame.fill_null": [[774, "polars-lazyframe-fill-null"]], "polars.LazyFrame.read_json": [[805, "polars-lazyframe-read-json"]], "polars.LazyFrame.unique": [[824, "polars-lazyframe-unique"]], "polars.LazyFrame.fill_nan": [[773, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.head": [[785, "polars-lazyframe-head"]], "polars.LazyFrame.inspect": [[786, "polars-lazyframe-inspect"]], "polars.LazyFrame.merge_sorted": [[799, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.group_by_rolling": [[781, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.group_by_dynamic": [[780, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.sort": [[818, "polars-lazyframe-sort"]], "polars.LazyFrame.interpolate": [[787, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[789, "polars-lazyframe-join-asof"]], "polars.LazyFrame.rolling": [[808, "polars-lazyframe-rolling"]], "polars.LazyFrame.reverse": [[807, "polars-lazyframe-reverse"]], "polars.LazyFrame.set_sorted": [[813, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.min": [[800, "polars-lazyframe-min"]], "polars.LazyFrame.pipe": [[802, "polars-lazyframe-pipe"]], "polars.LazyFrame.null_count": [[801, "polars-lazyframe-null-count"]], "polars.LazyFrame.std": [[819, "polars-lazyframe-std"]], "polars.LazyFrame.lazy": [[791, "polars-lazyframe-lazy"]], "polars.LazyFrame.fetch": [[772, "polars-lazyframe-fetch"]], "polars.LazyFrame.schema": [[809, "polars-lazyframe-schema"]], "polars.LazyFrame.take_every": [[822, "polars-lazyframe-take-every"]], "polars.LazyFrame.tail": [[821, "polars-lazyframe-tail"]], "polars.LazyFrame.group_by": [[779, "polars-lazyframe-group-by"]], "polars.LazyFrame.last": [[790, "polars-lazyframe-last"]], "polars.LazyFrame.select": [[810, "polars-lazyframe-select"]], "polars.LazyFrame.map": [[793, "polars-lazyframe-map"]], "polars.LazyFrame.explain": [[770, "polars-lazyframe-explain"]], "polars.LazyFrame.median": [[797, "polars-lazyframe-median"]], "polars.LazyFrame.filter": [[775, "polars-lazyframe-filter"]], "polars.LazyFrame.quantile": [[804, "polars-lazyframe-quantile"]], "polars.LazyFrame.sum": [[820, "polars-lazyframe-sum"]], "polars.LazyFrame.serialize": [[812, "polars-lazyframe-serialize"]], "polars.LazyFrame.select_seq": [[811, "polars-lazyframe-select-seq"]], "polars.LazyFrame.shift": [[814, "polars-lazyframe-shift"]], "polars.LazyFrame.top_k": [[823, "polars-lazyframe-top-k"]], "polars.LazyFrame.groupby_dynamic": [[783, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.slice": [[817, "polars-lazyframe-slice"]], "polars.LazyFrame.map_batches": [[794, "polars-lazyframe-map-batches"]], "polars.LazyFrame.groupby_rolling": [[784, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.first": [[776, "polars-lazyframe-first"]], "polars.LazyFrame.groupby": [[782, "polars-lazyframe-groupby"]], "polars.LazyFrame.from_json": [[777, "polars-lazyframe-from-json"]], "polars.LazyFrame.limit": [[792, "polars-lazyframe-limit"]], "polars.LazyFrame.mean": [[796, "polars-lazyframe-mean"]], "polars.LazyFrame.melt": [[798, "polars-lazyframe-melt"]], "polars.LazyFrame.rename": [[806, "polars-lazyframe-rename"]], "polars.LazyFrame.show_graph": [[816, "polars-lazyframe-show-graph"]], "polars.LazyFrame.gather_every": [[778, "polars-lazyframe-gather-every"]], "polars.LazyFrame.explode": [[771, "polars-lazyframe-explode"]], "polars.cum_sum": [[678, "polars-cum-sum"]], "polars.datetime": [[687, "polars-datetime"]], "polars.duration": [[690, "polars-duration"]], "polars.count": [[674, "polars-count"]], "polars.first": [[693, "polars-first"]], "polars.arctan2": [[665, "polars-arctan2"]], "polars.head": [[698, "polars-head"]], "polars.date_range": [[685, "polars-date-range"]], "polars.concat_list": [[671, "polars-concat-list"]], "polars.concat_str": [[672, "polars-concat-str"]], "polars.cumreduce": [[681, "polars-cumreduce"]], "polars.approx_n_unique": [[663, "polars-approx-n-unique"]], "polars.datetime_ranges": [[689, "polars-datetime-ranges"]], "polars.arg_where": [[668, "polars-arg-where"]], "polars.int_ranges": [[701, "polars-int-ranges"]], "polars.min": [[711, "polars-min"]], "polars.n_unique": [[713, "polars-n-unique"]], "polars.datetime_range": [[688, "polars-datetime-range"]], "polars.median": [[710, "polars-median"]], "polars.cumsum_horizontal": [[683, "polars-cumsum-horizontal"]], "polars.cum_sum_horizontal": [[679, "polars-cum-sum-horizontal"]], "polars.exclude": [[692, "polars-exclude"]], "polars.apply": [[662, "polars-apply"]], "polars.arg_sort_by": [[667, "polars-arg-sort-by"]], "polars.element": [[691, "polars-element"]], "polars.format": [[695, "polars-format"]], "polars.map_batches": [[705, "polars-map-batches"]], "polars.map_groups": [[706, "polars-map-groups"]], "polars.cum_reduce": [[677, "polars-cum-reduce"]], "polars.date_ranges": [[686, "polars-date-ranges"]], "polars.any_horizontal": [[661, "polars-any-horizontal"]], "polars.last": [[702, "polars-last"]], "polars.groups": [[697, "polars-groups"]], "polars.corr": [[673, "polars-corr"]], "polars.lit": [[703, "polars-lit"]], "polars.mean": [[709, "polars-mean"]], "polars.date": [[684, "polars-date"]], "polars.avg": [[669, "polars-avg"]], "polars.map": [[704, "polars-map"]], "polars.min_horizontal": [[712, "polars-min-horizontal"]], "polars.from_epoch": [[696, "polars-from-epoch"]], "polars.implode": [[699, "polars-implode"]], "polars.cumfold": [[680, "polars-cumfold"]], "polars.max": [[707, "polars-max"]], "polars.ones": [[714, "polars-ones"]], "polars.arctan2d": [[666, "polars-arctan2d"]], "polars.max_horizontal": [[708, "polars-max-horizontal"]], "polars.arange": [[664, "polars-arange"]], "polars.int_range": [[700, "polars-int-range"]], "polars.coalesce": [[670, "polars-coalesce"]], "polars.fold": [[694, "polars-fold"]], "polars.cum_fold": [[676, "polars-cum-fold"]], "polars.cumsum": [[682, "polars-cumsum"]], "polars.cov": [[675, "polars-cov"]], "polars.any": [[660, "polars-any"]], "Export": [[1214, "export"], [291, "export"]], "Manipulation/selection": [[1218, "manipulation-selection"], [855, "manipulation-selection"], [745, "manipulation-selection"], [295, "manipulation-selection"]], "String": [[1219, "string"], [748, "string"]], "Series": [[1215, "series"]], "Miscellaneous": [[1217, "miscellaneous"], [854, "miscellaneous"], [744, "miscellaneous"], [752, "miscellaneous"], [294, "miscellaneous"]], "Boolean": [[1210, "boolean"], [735, "boolean"]], "Struct": [[1220, "struct"], [749, "struct"]], "Categories": [[1211, "categories"], [736, "categories"]], "SQL": [[1222, "sql"]], "Methods": [[1222, "methods"]], "Temporal": [[1221, "temporal"], [750, "temporal"], [296, "temporal"]], "Utils": [[1224, "utils"]], "Descriptive": [[1213, "descriptive"], [851, "descriptive"], [290, "descriptive"]], "Testing": [[1223, "testing"]], "Asserts": [[1223, "asserts"]], "Parametric testing": [[1223, "parametric-testing"]], "Polars primitives": [[1223, "polars-primitives"]], "Strategy helpers": [[1223, "strategy-helpers"]], "Profiles": [[1223, "profiles"]], "List": [[1216, "list"], [742, "list"]], "Computation": [[1212, "computation"], [739, "computation"], [289, "computation"]], "polars.Series.all": [[860, "polars-series-all"]], "polars.Series.apply": [[863, "polars-series-apply"]], "polars.Series.arr.min": [[876, "polars-series-arr-min"]], "polars.LazyFrame.write_json": [[833, "polars-lazyframe-write-json"]], "GroupBy": [[852, "groupby"], [292, "groupby"]], "LazyFrame": [[853, "lazyframe"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[842, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arctan": [[868, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[838, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.Series.arccosh": [[865, "polars-series-arccosh"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[837, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.Series.alias": [[859, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[836, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.var": [[827, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[845, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[849, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.width": [[828, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[848, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.LazyFrame.with_columns_seq": [[830, "polars-lazyframe-with-columns-seq"]], "polars.Series.arg_true": [[873, "polars-series-arg-true"]], "polars.Series.arr.sum": [[877, "polars-series-arr-sum"]], "polars.Series.arcsin": [[866, "polars-series-arcsin"]], "polars.LazyFrame.unnest": [[825, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[834, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.arg_sort": [[872, "polars-series-arg-sort"]], "Read/write logical plan": [[854, "read-write-logical-plan"]], "polars.Series.arg_max": [[870, "polars-series-arg-max"]], "polars.LazyFrame.update": [[826, "polars-lazyframe-update"]], "Selectors": [[856, "selectors"]], "Importing": [[856, "importing"]], "Set operations": [[856, "set-operations"]], "Functions": [[856, "functions"], [740, "functions"], [752, "functions"]], "polars.Series.arcsinh": [[867, "polars-series-arcsinh"]], "polars.LazyFrame.with_columns": [[829, "polars-lazyframe-with-columns"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[846, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[841, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.with_context": [[831, "polars-lazyframe-with-context"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[844, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arr.to_list": [[878, "polars-series-arr-to-list"]], "polars.Series.arccos": [[864, "polars-series-arccos"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[840, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.Series.abs": [[858, "polars-series-abs"]], "polars.LazyFrame.with_row_count": [[832, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[839, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arr.max": [[875, "polars-series-arr-max"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[847, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.Series.append": [[862, "polars-series-append"]], "polars.Series.arg_min": [[871, "polars-series-arg-min"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[835, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.Series.arg_unique": [[874, "polars-series-arg-unique"]], "polars.Series.any": [[861, "polars-series-any"]], "polars.Series.arr.unique": [[879, "polars-series-arr-unique"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[843, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arctanh": [[869, "polars-series-arctanh"]], "polars.Expr.str.to_decimal": [[632, "polars-expr-str-to-decimal"]], "polars.Expr.str.rstrip": [[617, "polars-expr-str-rstrip"]], "polars.Expr.str.split": [[619, "polars-expr-str-split"]], "polars.Expr.str.replace_all": [[615, "polars-expr-str-replace-all"]], "polars.Expr.str.pad_end": [[611, "polars-expr-str-pad-end"]], "polars.Expr.unique": [[651, "polars-expr-unique"]], "polars.Expr.str.len_chars": [[606, "polars-expr-str-len-chars"]], "polars.Expr.str.to_lowercase": [[633, "polars-expr-str-to-lowercase"]], "polars.Expr.upper_bound": [[653, "polars-expr-upper-bound"]], "polars.Expr.where": [[656, "polars-expr-where"]], "polars.Expr.sum": [[642, "polars-expr-sum"]], "polars.Expr.str.strip_suffix": [[628, "polars-expr-str-strip-suffix"]], "polars.Expr.str.to_uppercase": [[636, "polars-expr-str-to-uppercase"]], "polars.Expr.tanh": [[647, "polars-expr-tanh"]], "polars.Expr.str.strptime": [[629, "polars-expr-str-strptime"]], "polars.Expr.str.strip_chars_end": [[625, "polars-expr-str-strip-chars-end"]], "polars.Expr.take_every": [[645, "polars-expr-take-every"]], "polars.Expr.to_physical": [[648, "polars-expr-to-physical"]], "polars.Expr.suffix": [[641, "polars-expr-suffix"]], "polars.Expr.str.parse_int": [[613, "polars-expr-str-parse-int"]], "polars.all_horizontal": [[659, "polars-all-horizontal"]], "polars.Expr.str.to_datetime": [[631, "polars-expr-str-to-datetime"]], "polars.Expr.unique_counts": [[652, "polars-expr-unique-counts"]], "polars.Expr.str.to_date": [[630, "polars-expr-str-to-date"]], "polars.Expr.str.slice": [[618, "polars-expr-str-slice"]], "polars.Expr.struct.rename_fields": [[639, "polars-expr-struct-rename-fields"]], "polars.Expr.str.split_exact": [[620, "polars-expr-str-split-exact"]], "polars.Expr.str.strip": [[623, "polars-expr-str-strip"]], "polars.Expr.str.pad_start": [[612, "polars-expr-str-pad-start"]], "polars.Expr.value_counts": [[654, "polars-expr-value-counts"]], "polars.Expr.tan": [[646, "polars-expr-tan"]], "polars.Expr.str.strip_chars_start": [[626, "polars-expr-str-strip-chars-start"]], "polars.Expr.struct.field": [[638, "polars-expr-struct-field"]], "polars.Expr.str.splitn": [[621, "polars-expr-str-splitn"]], "polars.Expr.str.lstrip": [[609, "polars-expr-str-lstrip"]], "polars.all": [[658, "polars-all"]], "polars.Expr.str.starts_with": [[622, "polars-expr-str-starts-with"]], "polars.Expr.str.rjust": [[616, "polars-expr-str-rjust"]], "polars.Expr.str.strip_prefix": [[627, "polars-expr-str-strip-prefix"]], "polars.Expr.take": [[644, "polars-expr-take"]], "polars.Expr.xor": [[657, "polars-expr-xor"]], "polars.Expr.truediv": [[650, "polars-expr-truediv"]], "polars.Expr.sub": [[640, "polars-expr-sub"]], "polars.Expr.str.zfill": [[637, "polars-expr-str-zfill"]], "polars.Expr.str.lengths": [[607, "polars-expr-str-lengths"]], "polars.Expr.str.strip_chars": [[624, "polars-expr-str-strip-chars"]], "polars.Expr.var": [[655, "polars-expr-var"]], "polars.Expr.str.ljust": [[608, "polars-expr-str-ljust"]], "polars.Expr.str.n_chars": [[610, "polars-expr-str-n-chars"]], "polars.Expr.str.to_time": [[634, "polars-expr-str-to-time"]], "polars.Expr.str.to_titlecase": [[635, "polars-expr-str-to-titlecase"]], "polars.Expr.top_k": [[649, "polars-expr-top-k"]], "polars.Expr.tail": [[643, "polars-expr-tail"]], "polars.Expr.str.replace": [[614, "polars-expr-str-replace"]], "polars.Expr.str.len_bytes": [[605, "polars-expr-str-len-bytes"]], "polars.Expr.sinh": [[585, "polars-expr-sinh"]], "polars.Expr.rank": [[554, "polars-expr-rank"]], "polars.Expr.str.extract_all": [[601, "polars-expr-str-extract-all"]], "polars.Expr.rolling_sum": [[572, "polars-expr-rolling-sum"]], "polars.Expr.shift_and_fill": [[580, "polars-expr-shift-and-fill"]], "polars.Expr.sort": [[588, "polars-expr-sort"]], "polars.Expr.quantile": [[552, "polars-expr-quantile"]], "polars.Expr.reshape": [[558, "polars-expr-reshape"]], "polars.Expr.str.decode": [[596, "polars-expr-str-decode"]], "polars.Expr.reverse": [[559, "polars-expr-reverse"]], "polars.Expr.rle_id": [[561, "polars-expr-rle-id"]], "polars.Expr.rolling_var": [[573, "polars-expr-rolling-var"]], "polars.Expr.rolling_quantile": [[569, "polars-expr-rolling-quantile"]], "polars.Expr.str.extract_groups": [[602, "polars-expr-str-extract-groups"]], "polars.Expr.round": [[574, "polars-expr-round"]], "polars.Expr.str.ends_with": [[598, "polars-expr-str-ends-with"]], "polars.Expr.rolling_apply": [[563, "polars-expr-rolling-apply"]], "polars.Expr.str.count_match": [[594, "polars-expr-str-count-match"]], "polars.Expr.sign": [[583, "polars-expr-sign"]], "polars.Expr.rolling_median": [[567, "polars-expr-rolling-median"]], "polars.Expr.std": [[591, "polars-expr-std"]], "polars.Expr.radians": [[553, "polars-expr-radians"]], "polars.Expr.rle": [[560, "polars-expr-rle"]], "polars.Expr.repeat_by": [[557, "polars-expr-repeat-by"]], "polars.Expr.round_sig_figs": [[575, "polars-expr-round-sig-figs"]], "polars.Expr.rolling": [[562, "polars-expr-rolling"]], "polars.Expr.rolling_skew": [[570, "polars-expr-rolling-skew"]], "polars.Expr.skew": [[586, "polars-expr-skew"]], "polars.Expr.search_sorted": [[577, "polars-expr-search-sorted"]], "polars.Expr.slice": [[587, "polars-expr-slice"]], "polars.Expr.str.concat": [[592, "polars-expr-str-concat"]], "polars.Expr.set_sorted": [[578, "polars-expr-set-sorted"]], "polars.Expr.sqrt": [[590, "polars-expr-sqrt"]], "polars.Expr.shift": [[579, "polars-expr-shift"]], "polars.Expr.product": [[550, "polars-expr-product"]], "polars.Expr.str.contains": [[593, "polars-expr-str-contains"]], "polars.Expr.str.encode": [[597, "polars-expr-str-encode"]], "polars.Expr.shrink_dtype": [[581, "polars-expr-shrink-dtype"]], "polars.Expr.str.count_matches": [[595, "polars-expr-str-count-matches"]], "polars.Expr.rolling_std": [[571, "polars-expr-rolling-std"]], "polars.Expr.reinterpret": [[556, "polars-expr-reinterpret"]], "polars.Expr.rolling_mean": [[566, "polars-expr-rolling-mean"]], "polars.Expr.rolling_min": [[568, "polars-expr-rolling-min"]], "polars.Expr.str.explode": [[599, "polars-expr-str-explode"]], "polars.Expr.sample": [[576, "polars-expr-sample"]], "polars.Expr.sin": [[584, "polars-expr-sin"]], "polars.Expr.shuffle": [[582, "polars-expr-shuffle"]], "polars.Expr.str.json_extract": [[603, "polars-expr-str-json-extract"]], "polars.Expr.rolling_map": [[564, "polars-expr-rolling-map"]], "polars.Expr.qcut": [[551, "polars-expr-qcut"]], "polars.Expr.str.json_path_match": [[604, "polars-expr-str-json-path-match"]], "polars.Expr.sort_by": [[589, "polars-expr-sort-by"]], "polars.Expr.str.extract": [[600, "polars-expr-str-extract"]], "polars.Expr.rolling_max": [[565, "polars-expr-rolling-max"]], "polars.Expr.rechunk": [[555, "polars-expr-rechunk"]], "polars.Expr.meta.output_name": [[519, "polars-expr-meta-output-name"]], "polars.Expr.mod": [[526, "polars-expr-mod"]], "polars.Expr.name.to_uppercase": [[535, "polars-expr-name-to-uppercase"]], "polars.Expr.name.prefix": [[532, "polars-expr-name-prefix"]], "polars.Expr.ne_missing": [[539, "polars-expr-ne-missing"]], "polars.Expr.pct_change": [[544, "polars-expr-pct-change"]], "polars.Expr.prefix": [[549, "polars-expr-prefix"]], "polars.Expr.mul": [[528, "polars-expr-mul"]], "polars.Expr.map_batches": [[509, "polars-expr-map-batches"]], "polars.Expr.list.union": [[500, "polars-expr-list-union"]], "polars.Expr.median": [[514, "polars-expr-median"]], "polars.Expr.name.map": [[531, "polars-expr-name-map"]], "polars.Expr.lower_bound": [[505, "polars-expr-lower-bound"]], "polars.Expr.list.tail": [[496, "polars-expr-list-tail"]], "polars.Expr.nan_max": [[536, "polars-expr-nan-max"]], "polars.Expr.log1p": [[504, "polars-expr-log1p"]], "polars.Expr.list.symmetric_difference": [[495, "polars-expr-list-symmetric-difference"]], "polars.Expr.null_count": [[541, "polars-expr-null-count"]], "polars.Expr.map_elements": [[511, "polars-expr-map-elements"]], "polars.Expr.lt": [[506, "polars-expr-lt"]], "polars.Expr.name.keep": [[530, "polars-expr-name-keep"]], "polars.Expr.meta.write_json": [[524, "polars-expr-meta-write-json"]], "polars.Expr.meta.ne": [[518, "polars-expr-meta-ne"]], "polars.Expr.log": [[502, "polars-expr-log"]], "polars.Expr.meta.pop": [[520, "polars-expr-meta-pop"]], "polars.Expr.name.suffix": [[533, "polars-expr-name-suffix"]], "polars.Expr.peak_max": [[545, "polars-expr-peak-max"]], "polars.Expr.name.to_lowercase": [[534, "polars-expr-name-to-lowercase"]], "polars.Expr.pow": [[548, "polars-expr-pow"]], "polars.Expr.or_": [[542, "polars-expr-or"]], "polars.Expr.meta.tree_format": [[522, "polars-expr-meta-tree-format"]], "polars.Expr.list.unique": [[501, "polars-expr-list-unique"]], "polars.Expr.max": [[512, "polars-expr-max"]], "polars.Expr.mean": [[513, "polars-expr-mean"]], "polars.Expr.meta.has_multiple_outputs": [[516, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.eq": [[515, "polars-expr-meta-eq"]], "polars.Expr.meta.root_names": [[521, "polars-expr-meta-root-names"]], "polars.Expr.map": [[507, "polars-expr-map"]], "polars.Expr.meta.undo_aliases": [[523, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.to_array": [[498, "polars-expr-list-to-array"]], "polars.Expr.peak_min": [[546, "polars-expr-peak-min"]], "polars.Expr.nan_min": [[537, "polars-expr-nan-min"]], "polars.Expr.not_": [[540, "polars-expr-not"]], "polars.Expr.map_dict": [[510, "polars-expr-map-dict"]], "polars.Expr.list.take": [[497, "polars-expr-list-take"]], "polars.Expr.pipe": [[547, "polars-expr-pipe"]], "polars.Expr.log10": [[503, "polars-expr-log10"]], "polars.Expr.map_alias": [[508, "polars-expr-map-alias"]], "polars.Expr.ne": [[538, "polars-expr-ne"]], "polars.Expr.mode": [[527, "polars-expr-mode"]], "polars.Expr.over": [[543, "polars-expr-over"]], "polars.Expr.meta.is_regex_projection": [[517, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.to_struct": [[499, "polars-expr-list-to-struct"]], "polars.Expr.min": [[525, "polars-expr-min"]], "polars.Expr.n_unique": [[529, "polars-expr-n-unique"]], "polars.Expr.len": [[458, "polars-expr-len"]], "polars.Expr.list.intersection": [[477, "polars-expr-list-intersection"]], "polars.Expr.is_not_null": [[451, "polars-expr-is-not-null"]], "polars.Expr.list.eval": [[471, "polars-expr-list-eval"]], "polars.Expr.list.gather": [[474, "polars-expr-list-gather"]], "polars.Expr.list.drop_nulls": [[470, "polars-expr-list-drop-nulls"]], "polars.Expr.list.min": [[484, "polars-expr-list-min"]], "polars.Expr.list.sum": [[494, "polars-expr-list-sum"]], "polars.Expr.is_infinite": [[445, "polars-expr-is-infinite"]], "polars.Expr.is_first": [[442, "polars-expr-is-first"]], "polars.Expr.list.sample": [[486, "polars-expr-list-sample"]], "polars.Expr.keep_name": [[454, "polars-expr-keep-name"]], "polars.Expr.list.difference": [[469, "polars-expr-list-difference"]], "polars.Expr.list.last": [[479, "polars-expr-list-last"]], "polars.Expr.list.diff": [[468, "polars-expr-list-diff"]], "polars.Expr.le": [[457, "polars-expr-le"]], "polars.Expr.list.all": [[460, "polars-expr-list-all"]], "polars.Expr.list.set_difference": [[487, "polars-expr-list-set-difference"]], "polars.Expr.is_last_distinct": [[447, "polars-expr-is-last-distinct"]], "polars.Expr.list.shift": [[491, "polars-expr-list-shift"]], "polars.Expr.list.explode": [[472, "polars-expr-list-explode"]], "polars.Expr.list.count_matches": [[467, "polars-expr-list-count-matches"]], "polars.Expr.is_not": [[449, "polars-expr-is-not"]], "polars.Expr.list.concat": [[464, "polars-expr-list-concat"]], "polars.Expr.list.get": [[475, "polars-expr-list-get"]], "polars.Expr.is_not_nan": [[450, "polars-expr-is-not-nan"]], "polars.Expr.list.set_symmetric_difference": [[489, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.is_in": [[444, "polars-expr-is-in"]], "polars.Expr.is_null": [[452, "polars-expr-is-null"]], "polars.Expr.list.join": [[478, "polars-expr-list-join"]], "polars.Expr.list.slice": [[492, "polars-expr-list-slice"]], "polars.Expr.list.mean": [[483, "polars-expr-list-mean"]], "polars.Expr.is_finite": [[441, "polars-expr-is-finite"]], "polars.Expr.list.arg_max": [[462, "polars-expr-list-arg-max"]], "polars.Expr.is_first_distinct": [[443, "polars-expr-is-first-distinct"]], "polars.Expr.list.max": [[482, "polars-expr-list-max"]], "polars.Expr.list.reverse": [[485, "polars-expr-list-reverse"]], "polars.Expr.list.set_intersection": [[488, "polars-expr-list-set-intersection"]], "polars.Expr.last": [[456, "polars-expr-last"]], "polars.Expr.is_nan": [[448, "polars-expr-is-nan"]], "polars.Expr.list.first": [[473, "polars-expr-list-first"]], "polars.Expr.list.set_union": [[490, "polars-expr-list-set-union"]], "polars.Expr.list.sort": [[493, "polars-expr-list-sort"]], "polars.Expr.list.contains": [[465, "polars-expr-list-contains"]], "polars.Expr.list.count_match": [[466, "polars-expr-list-count-match"]], "polars.Expr.is_duplicated": [[440, "polars-expr-is-duplicated"]], "polars.Expr.kurtosis": [[455, "polars-expr-kurtosis"]], "polars.Expr.list.arg_min": [[463, "polars-expr-list-arg-min"]], "polars.Expr.list.head": [[476, "polars-expr-list-head"]], "polars.Expr.list.lengths": [[481, "polars-expr-list-lengths"]], "polars.Expr.limit": [[459, "polars-expr-limit"]], "polars.Expr.list.any": [[461, "polars-expr-list-any"]], "polars.Expr.is_last": [[446, "polars-expr-is-last"]], "polars.Expr.list.len": [[480, "polars-expr-list-len"]], "polars.Expr.is_unique": [[453, "polars-expr-is-unique"]], "polars.Expr.get": [[432, "polars-expr-get"]], "polars.Expr.entropy": [[410, "polars-expr-entropy"]], "polars.Expr.dt.time": [[395, "polars-expr-dt-time"]], "polars.Expr.inspect": [[437, "polars-expr-inspect"]], "polars.Expr.fill_null": [[421, "polars-expr-fill-null"]], "polars.Expr.dt.total_nanoseconds": [[403, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.round": [[391, "polars-expr-dt-round"]], "polars.Expr.gather": [[429, "polars-expr-gather"]], "polars.Expr.dt.total_seconds": [[404, "polars-expr-dt-total-seconds"]], "polars.Expr.hash": [[434, "polars-expr-hash"]], "polars.Expr.gt": [[433, "polars-expr-gt"]], "polars.Expr.dt.truncate": [[405, "polars-expr-dt-truncate"]], "polars.Expr.dt.strftime": [[394, "polars-expr-dt-strftime"]], "polars.Expr.exp": [[417, "polars-expr-exp"]], "polars.Expr.exclude": [[416, "polars-expr-exclude"]], "polars.Expr.is_between": [[439, "polars-expr-is-between"]], "polars.Expr.dt.timestamp": [[396, "polars-expr-dt-timestamp"]], "polars.Expr.dt.with_time_unit": [[408, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.nanoseconds": [[386, "polars-expr-dt-nanoseconds"]], "polars.Expr.ewm_std": [[414, "polars-expr-ewm-std"]], "polars.Expr.dt.total_milliseconds": [[401, "polars-expr-dt-total-milliseconds"]], "polars.Expr.extend_constant": [[419, "polars-expr-extend-constant"]], "polars.Expr.dt.total_minutes": [[402, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.quarter": [[389, "polars-expr-dt-quarter"]], "polars.Expr.explode": [[418, "polars-expr-explode"]], "polars.Expr.head": [[435, "polars-expr-head"]], "polars.Expr.first": [[423, "polars-expr-first"]], "polars.Expr.floor": [[425, "polars-expr-floor"]], "polars.Expr.dt.to_string": [[397, "polars-expr-dt-to-string"]], "polars.Expr.dt.second": [[392, "polars-expr-dt-second"]], "polars.Expr.fill_nan": [[420, "polars-expr-fill-nan"]], "polars.Expr.ewm_mean": [[413, "polars-expr-ewm-mean"]], "polars.Expr.dt.replace_time_zone": [[390, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.ordinal_day": [[388, "polars-expr-dt-ordinal-day"]], "polars.Expr.floordiv": [[426, "polars-expr-floordiv"]], "polars.Expr.eq": [[411, "polars-expr-eq"]], "polars.Expr.dt.total_days": [[398, "polars-expr-dt-total-days"]], "polars.Expr.dt.weekday": [[407, "polars-expr-dt-weekday"]], "polars.Expr.gather_every": [[430, "polars-expr-gather-every"]], "polars.Expr.interpolate": [[438, "polars-expr-interpolate"]], "polars.Expr.dt.total_hours": [[399, "polars-expr-dt-total-hours"]], "polars.Expr.from_json": [[428, "polars-expr-from-json"]], "polars.Expr.dt.offset_by": [[387, "polars-expr-dt-offset-by"]], "polars.Expr.ewm_var": [[415, "polars-expr-ewm-var"]], "polars.Expr.dt.week": [[406, "polars-expr-dt-week"]], "polars.Expr.implode": [[436, "polars-expr-implode"]], "polars.Expr.filter": [[422, "polars-expr-filter"]], "polars.Expr.dt.seconds": [[393, "polars-expr-dt-seconds"]], "polars.Expr.dt.nanosecond": [[385, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.year": [[409, "polars-expr-dt-year"]], "polars.Expr.dt.total_microseconds": [[400, "polars-expr-dt-total-microseconds"]], "polars.Expr.forward_fill": [[427, "polars-expr-forward-fill"]], "polars.Expr.flatten": [[424, "polars-expr-flatten"]], "polars.Expr.eq_missing": [[412, "polars-expr-eq-missing"]], "polars.Expr.ge": [[431, "polars-expr-ge"]], "polars.Expr.cache": [[332, "polars-expr-cache"]], "polars.Expr.cumcount": [[350, "polars-expr-cumcount"]], "polars.Expr.degrees": [[357, "polars-expr-degrees"]], "polars.Expr.cum_count": [[345, "polars-expr-cum-count"]], "polars.Expr.dt.is_leap_year": [[374, "polars-expr-dt-is-leap-year"]], "polars.Expr.clip_max": [[339, "polars-expr-clip-max"]], "polars.Expr.count": [[344, "polars-expr-count"]], "polars.Expr.dt.convert_time_zone": [[365, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.millisecond": [[378, "polars-expr-dt-millisecond"]], "polars.Expr.cast": [[333, "polars-expr-cast"]], "polars.Expr.dot": [[359, "polars-expr-dot"]], "polars.Expr.cum_max": [[346, "polars-expr-cum-max"]], "polars.Expr.cumsum": [[354, "polars-expr-cumsum"]], "polars.Expr.cumprod": [[353, "polars-expr-cumprod"]], "polars.Expr.dt.cast_time_unit": [[363, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.datetime": [[367, "polars-expr-dt-datetime"]], "polars.Expr.cummax": [[351, "polars-expr-cummax"]], "polars.Expr.dt.epoch": [[371, "polars-expr-dt-epoch"]], "polars.Expr.cummin": [[352, "polars-expr-cummin"]], "polars.Expr.cumulative_eval": [[355, "polars-expr-cumulative-eval"]], "polars.Expr.cum_sum": [[349, "polars-expr-cum-sum"]], "polars.Expr.dt.microseconds": [[377, "polars-expr-dt-microseconds"]], "polars.Expr.dt.hour": [[372, "polars-expr-dt-hour"]], "polars.Expr.drop_nulls": [[361, "polars-expr-drop-nulls"]], "polars.Expr.dt.minute": [[380, "polars-expr-dt-minute"]], "polars.Expr.drop_nans": [[360, "polars-expr-drop-nans"]], "polars.Expr.dt.day": [[368, "polars-expr-dt-day"]], "polars.Expr.clip": [[338, "polars-expr-clip"]], "polars.Expr.bottom_k": [[331, "polars-expr-bottom-k"]], "polars.Expr.dt.iso_year": [[375, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microsecond": [[376, "polars-expr-dt-microsecond"]], "polars.Expr.cut": [[356, "polars-expr-cut"]], "polars.Expr.dt.dst_offset": [[370, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.date": [[366, "polars-expr-dt-date"]], "polars.Expr.cbrt": [[336, "polars-expr-cbrt"]], "polars.Expr.cat.get_categories": [[334, "polars-expr-cat-get-categories"]], "polars.Expr.dt.month": [[382, "polars-expr-dt-month"]], "polars.Expr.cat.set_ordering": [[335, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.milliseconds": [[379, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.days": [[369, "polars-expr-dt-days"]], "polars.Expr.cum_min": [[347, "polars-expr-cum-min"]], "polars.Expr.ceil": [[337, "polars-expr-ceil"]], "polars.Expr.diff": [[358, "polars-expr-diff"]], "polars.Expr.dt.base_utc_offset": [[362, "polars-expr-dt-base-utc-offset"]], "polars.Expr.bin.starts_with": [[330, "polars-expr-bin-starts-with"]], "polars.Expr.dt.month_start": [[384, "polars-expr-dt-month-start"]], "polars.Expr.dt.hours": [[373, "polars-expr-dt-hours"]], "polars.Expr.cum_prod": [[348, "polars-expr-cum-prod"]], "polars.Expr.dt.minutes": [[381, "polars-expr-dt-minutes"]], "polars.Expr.dt.month_end": [[383, "polars-expr-dt-month-end"]], "polars.Expr.cosh": [[342, "polars-expr-cosh"]], "polars.Expr.clip_min": [[340, "polars-expr-clip-min"]], "polars.Expr.cot": [[343, "polars-expr-cot"]], "polars.Expr.cos": [[341, "polars-expr-cos"]], "polars.Expr.dt.combine": [[364, "polars-expr-dt-combine"]], "polars.DataFrame.std": [[244, "polars-dataframe-std"]], "polars.DataFrame.unique": [[260, "polars-dataframe-unique"]], "polars.DataFrame.rechunk": [[223, "polars-dataframe-rechunk"]], "polars.DataFrame.slice": [[242, "polars-dataframe-slice"]], "polars.DataFrame.with_row_count": [[270, "polars-dataframe-with-row-count"]], "polars.DataFrame.select": [[235, "polars-dataframe-select"]], "polars.DataFrame.shift_and_fill": [[240, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.sample": [[233, "polars-dataframe-sample"]], "polars.DataFrame.select_seq": [[236, "polars-dataframe-select-seq"]], "polars.DataFrame.shrink_to_fit": [[241, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.pivot": [[220, "polars-dataframe-pivot"]], "polars.DataFrame.to_dict": [[250, "polars-dataframe-to-dict"]], "polars.DataFrame.sum_horizontal": [[246, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_dummies": [[252, "polars-dataframe-to-dummies"]], "polars.DataFrame.quantile": [[222, "polars-dataframe-quantile"]], "polars.dataframe.group_by.GroupBy.__iter__": [[271, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.replace_at_idx": [[226, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.upsample": [[264, "polars-dataframe-upsample"]], "polars.dataframe.group_by.GroupBy.agg": [[272, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.rows_by_key": [[232, "polars-dataframe-rows-by-key"]], "polars.DataFrame.tail": [[247, "polars-dataframe-tail"]], "polars.dataframe.group_by.GroupBy.apply": [[274, "polars-dataframe-group-by-groupby-apply"]], "polars.DataFrame.width": [[267, "polars-dataframe-width"]], "polars.DataFrame.to_init_repr": [[253, "polars-dataframe-to-init-repr"]], "polars.DataFrame.with_columns_seq": [[269, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.rename": [[224, "polars-dataframe-rename"]], "polars.DataFrame.update": [[263, "polars-dataframe-update"]], "polars.DataFrame.set_sorted": [[237, "polars-dataframe-set-sorted"]], "polars.DataFrame.with_columns": [[268, "polars-dataframe-with-columns"]], "polars.DataFrame.schema": [[234, "polars-dataframe-schema"]], "polars.DataFrame.product": [[221, "polars-dataframe-product"]], "polars.DataFrame.to_dicts": [[251, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_series": [[256, "polars-dataframe-to-series"]], "polars.DataFrame.to_arrow": [[249, "polars-dataframe-to-arrow"]], "polars.DataFrame.rows": [[231, "polars-dataframe-rows"]], "polars.DataFrame.transpose": [[259, "polars-dataframe-transpose"]], "polars.DataFrame.take_every": [[248, "polars-dataframe-take-every"]], "polars.DataFrame.unstack": [[262, "polars-dataframe-unstack"]], "polars.DataFrame.shape": [[238, "polars-dataframe-shape"]], "polars.DataFrame.reverse": [[228, "polars-dataframe-reverse"]], "polars.dataframe.group_by.GroupBy.all": [[273, "polars-dataframe-group-by-groupby-all"]], "polars.DataFrame.var": [[265, "polars-dataframe-var"]], "polars.DataFrame.to_struct": [[257, "polars-dataframe-to-struct"]], "polars.DataFrame.vstack": [[266, "polars-dataframe-vstack"]], "polars.DataFrame.to_numpy": [[254, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_pandas": [[255, "polars-dataframe-to-pandas"]], "polars.DataFrame.shift": [[239, "polars-dataframe-shift"]], "polars.DataFrame.unnest": [[261, "polars-dataframe-unnest"]], "polars.DataFrame.replace": [[225, "polars-dataframe-replace"]], "polars.DataFrame.rolling": [[229, "polars-dataframe-rolling"]], "polars.DataFrame.sort": [[243, "polars-dataframe-sort"]], "polars.DataFrame.sum": [[245, "polars-dataframe-sum"]], "polars.DataFrame.row": [[230, "polars-dataframe-row"]], "polars.DataFrame.top_k": [[258, "polars-dataframe-top-k"]], "polars.DataFrame.replace_column": [[227, "polars-dataframe-replace-column"]], "polars.rolling_cov": [[719, "polars-rolling-cov"]], "polars.LazyFrame.clear": [[761, "polars-lazyframe-clear"]], "polars.LazyFrame.approx_unique": [[757, "polars-lazyframe-approx-unique"]], "Name": [[746, "name"]], "polars.reduce": [[716, "polars-reduce"]], "polars.LazyFrame.bottom_k": [[758, "polars-lazyframe-bottom-k"]], "polars.quantile": [[715, "polars-quantile"]], "polars.LazyFrame.clone": [[762, "polars-lazyframe-clone"]], "polars.LazyFrame.dtypes": [[769, "polars-lazyframe-dtypes"]], "Meta": [[743, "meta"]], "polars.var": [[730, "polars-var"]], "polars.LazyFrame.collect": [[763, "polars-lazyframe-collect"]], "polars.tail": [[726, "polars-tail"]], "polars.LazyFrame.approx_n_unique": [[756, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.drop": [[767, "polars-lazyframe-drop"]], "polars.rolling_corr": [[718, "polars-rolling-corr"]], "Columns / names": [[738, "columns-names"]], "Operators": [[747, "operators"]], "Conjunction": [[747, "conjunction"]], "Comparison": [[747, "comparison"]], "Numeric": [[747, "numeric"], [296, "numeric"]], "polars.LazyFrame.deserialize": [[766, "polars-lazyframe-deserialize"]], "polars.when": [[731, "polars-when"]], "polars.LazyFrame.collect_async": [[764, "polars-lazyframe-collect-async"]], "polars.LazyFrame.columns": [[765, "polars-lazyframe-columns"]], "polars.time_range": [[728, "polars-time-range"]], "polars.struct": [[723, "polars-struct"]], "polars.select": [[720, "polars-select"]], "polars.sql_expr": [[721, "polars-sql-expr"]], "polars.time_ranges": [[729, "polars-time-ranges"]], "polars.sum": [[724, "polars-sum"]], "Expressions": [[741, "expressions"]], "polars.LazyFrame.cast": [[760, "polars-lazyframe-cast"]], "polars.sum_horizontal": [[725, "polars-sum-horizontal"]], "polars.col": [[737, "polars-col"]], "polars.std": [[722, "polars-std"]], "polars.zeros": [[732, "polars-zeros"]], "API reference": [[753, "api-reference"]], "Conversion": [[752, "conversion"]], "Parallelization": [[752, "parallelization"]], "Random": [[752, "random"]], "StringCache": [[752, "stringcache"]], "Input/output": [[754, "input-output"]], "CSV": [[754, "csv"]], "Feather/ IPC": [[754, "feather-ipc"]], "Parquet": [[754, "parquet"]], "Database": [[754, "database"]], "JSON": [[754, "json"]], "AVRO": [[754, "avro"]], "Spreadsheet": [[754, "spreadsheet"]], "Apache Iceberg": [[754, "apache-iceberg"]], "Delta Lake": [[754, "delta-lake"]], "Datasets": [[754, "datasets"]], "BatchedCsvReader": [[754, "batchedcsvreader"]], "polars.LazyFrame.drop_nulls": [[768, "polars-lazyframe-drop-nulls"]], "polars.time": [[727, "polars-time"]], "polars.LazyFrame.cache": [[759, "polars-lazyframe-cache"]], "Window": [[751, "window"]], "polars.repeat": [[717, "polars-repeat"]], "polars.Expr.arcsinh": [[312, "polars-expr-arcsinh"]], "polars.Expr.approx_n_unique": [[308, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.first": [[276, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.bin.ends_with": [[329, "polars-expr-bin-ends-with"]], "polars.dataframe.group_by.GroupBy.max": [[280, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.count": [[275, "polars-dataframe-group-by-groupby-count"]], "polars.Expr.arr.sum": [[322, "polars-expr-arr-sum"]], "polars.dataframe.group_by.GroupBy.n_unique": [[284, "polars-dataframe-group-by-groupby-n-unique"]], "polars.dataframe.group_by.GroupBy.min": [[283, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.add": [[300, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.median": [[282, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.arr.max": [[320, "polars-expr-arr-max"]], "polars.Expr.bin.contains": [[326, "polars-expr-bin-contains"]], "polars.Expr.arctan": [[313, "polars-expr-arctan"]], "polars.Expr.arg_min": [[316, "polars-expr-arg-min"]], "polars.Expr.alias": [[302, "polars-expr-alias"]], "polars.Expr.arr.unique": [[324, "polars-expr-arr-unique"]], "polars.dataframe.group_by.GroupBy.last": [[278, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.sum": [[286, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.all": [[303, "polars-expr-all"]], "polars.dataframe.group_by.GroupBy.quantile": [[285, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.mean": [[281, "polars-dataframe-group-by-groupby-mean"]], "DataFrame": [[293, "dataframe"]], "polars.Expr.backward_fill": [[325, "polars-expr-backward-fill"]], "polars.Expr.arg_sort": [[317, "polars-expr-arg-sort"]], "polars.Expr.any": [[305, "polars-expr-any"]], "polars.Expr.append": [[306, "polars-expr-append"]], "polars.dataframe.group_by.GroupBy.tail": [[287, "polars-dataframe-group-by-groupby-tail"]], "polars.dataframe.group_by.GroupBy.map_groups": [[279, "polars-dataframe-group-by-groupby-map-groups"]], "Exceptions": [[297, "exceptions"]], "polars.Expr.abs": [[299, "polars-expr-abs"]], "polars.Expr.agg_groups": [[301, "polars-expr-agg-groups"]], "polars.Expr.arccosh": [[310, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.head": [[277, "polars-dataframe-group-by-groupby-head"]], "polars.Expr.arr.min": [[321, "polars-expr-arr-min"]], "polars.Expr.bin.encode": [[328, "polars-expr-bin-encode"]], "polars.Expr.arccos": [[309, "polars-expr-arccos"]], "polars.Expr.and_": [[304, "polars-expr-and"]], "polars.Expr.bin.decode": [[327, "polars-expr-bin-decode"]], "polars.Expr.apply": [[307, "polars-expr-apply"]], "polars.Expr.arg_unique": [[319, "polars-expr-arg-unique"]], "polars.Expr.arr.to_list": [[323, "polars-expr-arr-to-list"]], "polars.Expr.arcsin": [[311, "polars-expr-arcsin"]], "Data types": [[296, "data-types"]], "Nested": [[296, "nested"]], "Other": [[296, "other"]], "polars.Expr.arctanh": [[314, "polars-expr-arctanh"]], "polars.Expr.arg_max": [[315, "polars-expr-arg-max"]], "polars.Expr.arg_true": [[318, "polars-expr-arg-true"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "float32 (class in polars)": [[51, "polars.Float32"]], "__init__() (polars.float32 method)": [[51, "polars.Float32.__init__"]], "float64 (class in polars)": [[52, "polars.Float64"]], "__init__() (polars.float64 method)": [[52, "polars.Float64.__init__"]], "int16 (class in polars)": [[53, "polars.Int16"]], "__init__() (polars.int16 method)": [[53, "polars.Int16.__init__"]], "int32 (class in polars)": [[54, "polars.Int32"]], "__init__() (polars.int32 method)": [[54, "polars.Int32.__init__"]], "int64 (class in polars)": [[55, "polars.Int64"]], "__init__() (polars.int64 method)": [[55, "polars.Int64.__init__"]], "int8 (class in polars)": [[56, "polars.Int8"]], "__init__() (polars.int8 method)": [[56, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[57, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[60, "polars.List"]], "__init__() (polars.list method)": [[60, "polars.List.__init__"]], "null (class in polars)": [[61, "polars.Null"]], "__init__() (polars.null method)": [[61, "polars.Null.__init__"]], "object (class in polars)": [[62, "polars.Object"]], "__init__() (polars.object method)": [[62, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[63, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[64, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[65, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[67, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[68, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[69, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[69, "polars.StringCache.__init__"]], "struct (class in polars)": [[70, "polars.Struct"]], "__init__() (polars.struct method)": [[70, "polars.Struct.__init__"]], "time (class in polars)": [[71, "polars.Time"]], "__init__() (polars.time method)": [[71, "polars.Time.__init__"]], "uint16 (class in polars)": [[72, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[72, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[73, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[73, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[74, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[74, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[75, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[75, "polars.UInt8.__init__"]], "unknown (class in polars)": [[76, "polars.Unknown"]], "__init__() (polars.unknown method)": [[76, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[77, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[77, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[78, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[79, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[80, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[81, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[82, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[83, "polars.build_info"]], "collect_all() (in module polars)": [[84, "polars.collect_all"]], "collect_all_async() (in module polars)": [[85, "polars.collect_all_async"]], "concat() (in module polars)": [[86, "polars.concat"]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache"]], "arrowerror": [[89, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[90, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[91, "polars.exceptions.ComputeError"]], "duplicateerror": [[92, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[93, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[94, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[95, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[96, "polars.exceptions.PolarsPanicError"]], "rowserror": [[97, "polars.exceptions.RowsError"]], "schemaerror": [[98, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[99, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[100, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[101, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[102, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[103, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[104, "polars.from_dataframe"]], "from_dict() (in module polars)": [[105, "polars.from_dict"]], "from_dicts() (in module polars)": [[106, "polars.from_dicts"]], "from_numpy() (in module polars)": [[107, "polars.from_numpy"]], "from_pandas() (in module polars)": [[108, "polars.from_pandas"]], "from_records() (in module polars)": [[109, "polars.from_records"]], "from_repr() (in module polars)": [[110, "polars.from_repr"]], "get_index_type() (in module polars)": [[111, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[112, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[113, "polars.read_avro"]], "read_csv() (in module polars)": [[114, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[115, "polars.read_csv_batched"]], "read_database() (in module polars)": [[116, "polars.read_database"]], "read_database_uri() (in module polars)": [[117, "polars.read_database_uri"]], "read_delta() (in module polars)": [[118, "polars.read_delta"]], "read_excel() (in module polars)": [[119, "polars.read_excel"]], "read_ipc() (in module polars)": [[120, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[121, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[122, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[123, "polars.read_json"]], "read_ndjson() (in module polars)": [[124, "polars.read_ndjson"]], "read_ods() (in module polars)": [[125, "polars.read_ods"]], "read_parquet() (in module polars)": [[126, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[127, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[128, "polars.scan_csv"]], "scan_delta() (in module polars)": [[129, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[130, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[131, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[132, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[133, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[134, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[135, "polars.set_random_seed"]], "show_versions() (in module polars)": [[136, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[137, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[139, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[141, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[141, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[142, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[148, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[149, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[152, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[153, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[154, "polars.DataFrame.approx_n_unique"]], "approx_unique() (polars.dataframe method)": [[155, "polars.DataFrame.approx_unique"]], "bottom_k() (polars.dataframe method)": [[156, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[157, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[158, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[159, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[160, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[161, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[162, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[163, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[164, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[165, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[166, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[167, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[168, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[169, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[170, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[171, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[172, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[173, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[174, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[175, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[176, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[177, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[178, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[179, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[180, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[181, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[182, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[183, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[184, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[185, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[186, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[187, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[188, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[189, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[190, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[191, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[192, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[193, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[194, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[195, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[196, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[197, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[198, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[199, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[200, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[201, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[202, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[203, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[204, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[205, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[206, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[207, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[208, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[209, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[210, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[211, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[212, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[213, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[214, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[215, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[216, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[217, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[218, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[219, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[220, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[221, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[222, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[223, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[224, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[225, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[226, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[227, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[228, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[229, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[230, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[231, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[232, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[233, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[234, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[235, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[236, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[237, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[238, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[239, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[240, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[241, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[242, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[243, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[244, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[245, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[246, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[247, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[248, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[249, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[250, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[251, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[252, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[253, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[254, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[255, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[256, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[257, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[258, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[259, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[260, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[261, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[262, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[263, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[264, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[265, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[266, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[267, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[268, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[269, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[270, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[271, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[272, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[273, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[299, "polars.Expr.abs"]], "add() (polars.expr method)": [[300, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[301, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[302, "polars.Expr.alias"]], "all() (polars.expr method)": [[303, "polars.Expr.all"]], "and_() (polars.expr method)": [[304, "polars.Expr.and_"]], "any() (polars.expr method)": [[305, "polars.Expr.any"]], "append() (polars.expr method)": [[306, "polars.Expr.append"]], "apply() (polars.expr method)": [[307, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[308, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[309, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[310, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[311, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[312, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[313, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[314, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[315, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[316, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[317, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[318, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[319, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[320, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[321, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[322, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[323, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[324, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[325, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[326, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[327, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[328, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[329, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[330, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[331, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[332, "polars.Expr.cache"]], "cast() (polars.expr method)": [[333, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[334, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[335, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[336, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[337, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[338, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[339, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[340, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[341, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[342, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[343, "polars.Expr.cot"]], "count() (polars.expr method)": [[344, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[345, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[346, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[347, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[348, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[349, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[350, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[351, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[352, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[353, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[354, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[355, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[356, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[357, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[358, "polars.Expr.diff"]], "dot() (polars.expr method)": [[359, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[360, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[361, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[362, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[363, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[364, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[365, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[366, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[367, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[368, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[369, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[370, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[371, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[372, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[373, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[374, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[375, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[376, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[377, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[378, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[379, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[380, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[381, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[382, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[383, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[384, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[385, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[386, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[387, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[388, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[389, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[390, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[391, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[392, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[393, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[394, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[395, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[396, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[397, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[398, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[399, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[400, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[401, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[402, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[405, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[406, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[407, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[408, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[409, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[410, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[411, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[412, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[413, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[414, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[415, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[416, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[417, "polars.Expr.exp"]], "explode() (polars.expr method)": [[418, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[419, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[420, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[421, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[422, "polars.Expr.filter"]], "first() (polars.expr method)": [[423, "polars.Expr.first"]], "flatten() (polars.expr method)": [[424, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[425, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[426, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[427, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[428, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[429, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[430, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[431, "polars.Expr.ge"]], "get() (polars.expr method)": [[432, "polars.Expr.get"]], "gt() (polars.expr method)": [[433, "polars.Expr.gt"]], "hash() (polars.expr method)": [[434, "polars.Expr.hash"]], "head() (polars.expr method)": [[435, "polars.Expr.head"]], "implode() (polars.expr method)": [[436, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[437, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[438, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[439, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[440, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[441, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[442, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[443, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[444, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[445, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[446, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[447, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[448, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[449, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[450, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[451, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[452, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[453, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[454, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[455, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[456, "polars.Expr.last"]], "le() (polars.expr method)": [[457, "polars.Expr.le"]], "len() (polars.expr method)": [[458, "polars.Expr.len"]], "limit() (polars.expr method)": [[459, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[460, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[461, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[462, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[463, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[464, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[465, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[466, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[467, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[468, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[469, "polars.Expr.list.difference"]], "drop_nulls() (polars.expr.list method)": [[470, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[471, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[472, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[473, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[474, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[475, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[476, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[477, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[478, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[479, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[480, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[481, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[482, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[483, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[484, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[485, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[486, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[487, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[488, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[489, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[490, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[491, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[492, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[493, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[494, "polars.Expr.list.sum"]], "symmetric_difference() (polars.expr.list method)": [[495, "polars.Expr.list.symmetric_difference"]], "tail() (polars.expr.list method)": [[496, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[497, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[498, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[499, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[500, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[501, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[502, "polars.Expr.log"]], "log10() (polars.expr method)": [[503, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[504, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[505, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[506, "polars.Expr.lt"]], "map() (polars.expr method)": [[507, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[508, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[509, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[510, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[511, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[512, "polars.Expr.max"]], "mean() (polars.expr method)": [[513, "polars.Expr.mean"]], "median() (polars.expr method)": [[514, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[515, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[516, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[517, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[518, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[519, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[520, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[521, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[522, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[523, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[524, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[525, "polars.Expr.min"]], "mod() (polars.expr method)": [[526, "polars.Expr.mod"]], "mode() (polars.expr method)": [[527, "polars.Expr.mode"]], "mul() (polars.expr method)": [[528, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[529, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[530, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[531, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[532, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[533, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[534, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[535, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[536, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[537, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[538, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[539, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[540, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[541, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[542, "polars.Expr.or_"]], "over() (polars.expr method)": [[543, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[544, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[545, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[546, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[547, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[548, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[549, "polars.Expr.prefix"]], "product() (polars.expr method)": [[550, "polars.Expr.product"]], "qcut() (polars.expr method)": [[551, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[552, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[553, "polars.Expr.radians"]], "rank() (polars.expr method)": [[554, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[555, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[556, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[557, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[558, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[559, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[560, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[561, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[562, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[563, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[564, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[565, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[566, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[567, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[568, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[569, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[570, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[571, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[572, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[573, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[574, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[575, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[576, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[577, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[578, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[579, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[580, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[581, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[582, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[583, "polars.Expr.sign"]], "sin() (polars.expr method)": [[584, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[585, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[586, "polars.Expr.skew"]], "slice() (polars.expr method)": [[587, "polars.Expr.slice"]], "sort() (polars.expr method)": [[588, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[589, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[590, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[591, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[592, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[593, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[594, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[595, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[596, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[597, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[598, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[599, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[600, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[601, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[602, "polars.Expr.str.extract_groups"]], "json_extract() (polars.expr.str method)": [[603, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[604, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[605, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[606, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[607, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[608, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[609, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[610, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[611, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[612, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[613, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[614, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[615, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[616, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[617, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[618, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[619, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[620, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[621, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[622, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[623, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[624, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[625, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[626, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[627, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[628, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[629, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[630, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[631, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[632, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[633, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[634, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[635, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[636, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[637, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[638, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[639, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[640, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[641, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[642, "polars.Expr.sum"]], "tail() (polars.expr method)": [[643, "polars.Expr.tail"]], "take() (polars.expr method)": [[644, "polars.Expr.take"]], "take_every() (polars.expr method)": [[645, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[646, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[647, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[648, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[649, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[650, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[651, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[652, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[653, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[654, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[655, "polars.Expr.var"]], "where() (polars.expr method)": [[656, "polars.Expr.where"]], "xor() (polars.expr method)": [[657, "polars.Expr.xor"]], "all() (in module polars)": [[658, "polars.all"]], "all_horizontal() (in module polars)": [[659, "polars.all_horizontal"]], "any() (in module polars)": [[660, "polars.any"]], "any_horizontal() (in module polars)": [[661, "polars.any_horizontal"]], "apply() (in module polars)": [[662, "polars.apply"]], "approx_n_unique() (in module polars)": [[663, "polars.approx_n_unique"]], "arange() (in module polars)": [[664, "polars.arange"]], "arctan2() (in module polars)": [[665, "polars.arctan2"]], "arctan2d() (in module polars)": [[666, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[667, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[668, "polars.arg_where"]], "avg() (in module polars)": [[669, "polars.avg"]], "coalesce() (in module polars)": [[670, "polars.coalesce"]], "concat_list() (in module polars)": [[671, "polars.concat_list"]], "concat_str() (in module polars)": [[672, "polars.concat_str"]], "corr() (in module polars)": [[673, "polars.corr"]], "count() (in module polars)": [[674, "polars.count"]], "cov() (in module polars)": [[675, "polars.cov"]], "cum_fold() (in module polars)": [[676, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[677, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[678, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[679, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[680, "polars.cumfold"]], "cumreduce() (in module polars)": [[681, "polars.cumreduce"]], "cumsum() (in module polars)": [[682, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[683, "polars.cumsum_horizontal"]], "date() (in module polars)": [[684, "polars.date"]], "date_range() (in module polars)": [[685, "polars.date_range"]], "date_ranges() (in module polars)": [[686, "polars.date_ranges"]], "datetime() (in module polars)": [[687, "polars.datetime"]], "datetime_range() (in module polars)": [[688, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[689, "polars.datetime_ranges"]], "duration() (in module polars)": [[690, "polars.duration"]], "element() (in module polars)": [[691, "polars.element"]], "exclude() (in module polars)": [[692, "polars.exclude"]], "first() (in module polars)": [[693, "polars.first"]], "fold() (in module polars)": [[694, "polars.fold"]], "format() (in module polars)": [[695, "polars.format"]], "from_epoch() (in module polars)": [[696, "polars.from_epoch"]], "groups() (in module polars)": [[697, "polars.groups"]], "head() (in module polars)": [[698, "polars.head"]], "implode() (in module polars)": [[699, "polars.implode"]], "int_range() (in module polars)": [[700, "polars.int_range"]], "int_ranges() (in module polars)": [[701, "polars.int_ranges"]], "last() (in module polars)": [[702, "polars.last"]], "lit() (in module polars)": [[703, "polars.lit"]], "map() (in module polars)": [[704, "polars.map"]], "map_batches() (in module polars)": [[705, "polars.map_batches"]], "map_groups() (in module polars)": [[706, "polars.map_groups"]], "max() (in module polars)": [[707, "polars.max"]], "max_horizontal() (in module polars)": [[708, "polars.max_horizontal"]], "mean() (in module polars)": [[709, "polars.mean"]], "median() (in module polars)": [[710, "polars.median"]], "min() (in module polars)": [[711, "polars.min"]], "min_horizontal() (in module polars)": [[712, "polars.min_horizontal"]], "n_unique() (in module polars)": [[713, "polars.n_unique"]], "ones() (in module polars)": [[714, "polars.ones"]], "quantile() (in module polars)": [[715, "polars.quantile"]], "reduce() (in module polars)": [[716, "polars.reduce"]], "repeat() (in module polars)": [[717, "polars.repeat"]], "rolling_corr() (in module polars)": [[718, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[719, "polars.rolling_cov"]], "select() (in module polars)": [[720, "polars.select"]], "sql_expr() (in module polars)": [[721, "polars.sql_expr"]], "std() (in module polars)": [[722, "polars.std"]], "struct() (in module polars)": [[723, "polars.struct"]], "sum() (in module polars)": [[724, "polars.sum"]], "sum_horizontal() (in module polars)": [[725, "polars.sum_horizontal"]], "tail() (in module polars)": [[726, "polars.tail"]], "time() (in module polars)": [[727, "polars.time"]], "time_range() (in module polars)": [[728, "polars.time_range"]], "time_ranges() (in module polars)": [[729, "polars.time_ranges"]], "var() (in module polars)": [[730, "polars.var"]], "when() (in module polars)": [[731, "polars.when"]], "zeros() (in module polars)": [[732, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[756, "polars.LazyFrame.approx_n_unique"]], "approx_unique() (polars.lazyframe method)": [[757, "polars.LazyFrame.approx_unique"]], "bottom_k() (polars.lazyframe method)": [[758, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[759, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[760, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[761, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[762, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[763, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[764, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[765, "polars.LazyFrame.columns"]], "deserialize() (polars.lazyframe class method)": [[766, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[767, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[768, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[769, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[770, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[771, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[772, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[773, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[774, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[775, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[776, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[777, "polars.LazyFrame.from_json"]], "gather_every() (polars.lazyframe method)": [[778, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[779, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[780, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[781, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[782, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[783, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[784, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[785, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[786, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[787, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[788, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[789, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[790, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[791, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[792, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[793, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[794, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[795, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[796, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[797, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[798, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[799, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[800, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[801, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[802, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[803, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[804, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[805, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[806, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[807, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[808, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[809, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[810, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[811, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[812, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[813, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[814, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[815, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[816, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[817, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[818, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[819, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[820, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[821, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[822, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[823, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[824, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[825, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[826, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[827, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[828, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[829, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[830, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[831, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[832, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[833, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[834, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[835, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[836, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[837, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[838, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[856, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[856, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[856, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[856, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[856, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[856, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[856, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[856, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[856, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[856, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[856, "polars.selectors.first"]], "float() (in module polars.selectors)": [[856, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[856, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[856, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[856, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[856, "polars.selectors.matches"]], "module": [[856, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[856, "polars.selectors.numeric"]], "polars.selectors": [[856, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[856, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[856, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[856, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[856, "polars.selectors.time"]], "abs() (polars.series method)": [[858, "polars.Series.abs"]], "alias() (polars.series method)": [[859, "polars.Series.alias"]], "all() (polars.series method)": [[860, "polars.Series.all"]], "any() (polars.series method)": [[861, "polars.Series.any"]], "append() (polars.series method)": [[862, "polars.Series.append"]], "apply() (polars.series method)": [[863, "polars.Series.apply"]], "arccos() (polars.series method)": [[864, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[865, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[866, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[867, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[868, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[869, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[870, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[871, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[872, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[873, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[874, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[875, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[876, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[877, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[878, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[879, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[880, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[881, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[882, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[883, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[884, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[885, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[886, "polars.Series.cast"]], "cat (polars.series attribute)": [[887, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[888, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[889, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[890, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[891, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[892, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[893, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[894, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[895, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[896, "polars.Series.clear"]], "clip() (polars.series method)": [[897, "polars.Series.clip"]], "clip_max() (polars.series method)": [[898, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[899, "polars.Series.clip_min"]], "clone() (polars.series method)": [[900, "polars.Series.clone"]], "cos() (polars.series method)": [[901, "polars.Series.cos"]], "cosh() (polars.series method)": [[902, "polars.Series.cosh"]], "cot() (polars.series method)": [[903, "polars.Series.cot"]], "cum_max() (polars.series method)": [[904, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[905, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[906, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[907, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[908, "polars.Series.cummax"]], "cummin() (polars.series method)": [[909, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[910, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[911, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[912, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[913, "polars.Series.cut"]], "describe() (polars.series method)": [[914, "polars.Series.describe"]], "diff() (polars.series method)": [[915, "polars.Series.diff"]], "dot() (polars.series method)": [[916, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[917, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[918, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[919, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[920, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[921, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[922, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[923, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[924, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[925, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[926, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[927, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[928, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[929, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[930, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[931, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[932, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[933, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[934, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[935, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[936, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[937, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[938, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[939, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[940, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[941, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[942, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[943, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[944, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[945, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[946, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[947, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[948, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[949, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[950, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[951, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[952, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[953, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[954, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[955, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[956, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[957, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[958, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[959, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[960, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[961, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[962, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[963, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[964, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[965, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[966, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[967, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[968, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[969, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[970, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[971, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[972, "polars.Series.dtype"]], "entropy() (polars.series method)": [[973, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[974, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[975, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[976, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[977, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[978, "polars.Series.exp"]], "explode() (polars.series method)": [[979, "polars.Series.explode"]], "extend() (polars.series method)": [[980, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[981, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[982, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[983, "polars.Series.fill_null"]], "filter() (polars.series method)": [[984, "polars.Series.filter"]], "flags (polars.series attribute)": [[985, "polars.Series.flags"]], "floor() (polars.series method)": [[986, "polars.Series.floor"]], "gather() (polars.series method)": [[987, "polars.Series.gather"]], "gather_every() (polars.series method)": [[988, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[989, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[990, "polars.Series.has_validity"]], "hash() (polars.series method)": [[991, "polars.Series.hash"]], "head() (polars.series method)": [[992, "polars.Series.head"]], "hist() (polars.series method)": [[993, "polars.Series.hist"]], "implode() (polars.series method)": [[994, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[995, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[996, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[997, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[998, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[999, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1000, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1001, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1002, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1003, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1004, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1005, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1006, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1007, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1008, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1009, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1010, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1011, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1012, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1013, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1014, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1015, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1016, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1017, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1018, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1019, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1020, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1021, "polars.Series.len"]], "limit() (polars.series method)": [[1022, "polars.Series.limit"]], "list (polars.series attribute)": [[1023, "polars.Series.list"]], "all() (polars.series.list method)": [[1024, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1025, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1026, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1027, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1028, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1029, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1030, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1031, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1032, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[1033, "polars.Series.list.difference"]], "drop_nulls() (polars.series.list method)": [[1034, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1035, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1036, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1037, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1038, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1039, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1040, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[1041, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[1042, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1043, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1044, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1045, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1046, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1047, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1048, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1049, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1050, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1051, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1052, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1053, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1054, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1055, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1056, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1057, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1058, "polars.Series.list.sum"]], "symmetric_difference() (polars.series.list method)": [[1059, "polars.Series.list.symmetric_difference"]], "tail() (polars.series.list method)": [[1060, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1061, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1062, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1063, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[1064, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[1065, "polars.Series.list.unique"]], "log() (polars.series method)": [[1066, "polars.Series.log"]], "log10() (polars.series method)": [[1067, "polars.Series.log10"]], "log1p() (polars.series method)": [[1068, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1069, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1070, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1071, "polars.Series.map_elements"]], "max() (polars.series method)": [[1072, "polars.Series.max"]], "mean() (polars.series method)": [[1073, "polars.Series.mean"]], "median() (polars.series method)": [[1074, "polars.Series.median"]], "min() (polars.series method)": [[1075, "polars.Series.min"]], "mode() (polars.series method)": [[1076, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1077, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1078, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1079, "polars.Series.name"]], "nan_max() (polars.series method)": [[1080, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1081, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1082, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1083, "polars.Series.not_"]], "null_count() (polars.series method)": [[1084, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1085, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1086, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1087, "polars.Series.peak_min"]], "product() (polars.series method)": [[1088, "polars.Series.product"]], "qcut() (polars.series method)": [[1089, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1090, "polars.Series.quantile"]], "rank() (polars.series method)": [[1091, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1092, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1093, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1094, "polars.Series.rename"]], "reshape() (polars.series method)": [[1095, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1096, "polars.Series.reverse"]], "rle() (polars.series method)": [[1097, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1098, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1099, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1100, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1101, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1102, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1103, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1104, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1105, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1106, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1107, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1108, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1109, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1110, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1111, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1112, "polars.Series.sample"]], "scatter() (polars.series method)": [[1113, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1114, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1115, "polars.Series.series_equal"]], "set() (polars.series method)": [[1116, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1117, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1118, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1119, "polars.Series.shape"]], "shift() (polars.series method)": [[1120, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1121, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1122, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1123, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1124, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1125, "polars.Series.sign"]], "sin() (polars.series method)": [[1126, "polars.Series.sin"]], "sinh() (polars.series method)": [[1127, "polars.Series.sinh"]], "skew() (polars.series method)": [[1128, "polars.Series.skew"]], "slice() (polars.series method)": [[1129, "polars.Series.slice"]], "sort() (polars.series method)": [[1130, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1131, "polars.Series.sqrt"]], "std() (polars.series method)": [[1132, "polars.Series.std"]], "str (polars.series attribute)": [[1133, "polars.Series.str"]], "concat() (polars.series.str method)": [[1134, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1135, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[1136, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1137, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1138, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1139, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1140, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1141, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1142, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1143, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1144, "polars.Series.str.extract_groups"]], "json_extract() (polars.series.str method)": [[1145, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1146, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1147, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1148, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1149, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1150, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1151, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1152, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1153, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1154, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1155, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1156, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1157, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[1158, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1159, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1160, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1161, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1162, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1163, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1164, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1165, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1166, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1167, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1168, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1169, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1170, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1171, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1172, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1173, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1174, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1175, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1176, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1177, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1178, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1179, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1180, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1181, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1182, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1183, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1184, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1185, "polars.Series.sum"]], "tail() (polars.series method)": [[1186, "polars.Series.tail"]], "take() (polars.series method)": [[1187, "polars.Series.take"]], "take_every() (polars.series method)": [[1188, "polars.Series.take_every"]], "tan() (polars.series method)": [[1189, "polars.Series.tan"]], "tanh() (polars.series method)": [[1190, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1191, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1192, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1193, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1194, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1195, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1196, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1197, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1198, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1199, "polars.Series.top_k"]], "unique() (polars.series method)": [[1200, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1201, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1202, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1203, "polars.Series.value_counts"]], "var() (polars.series method)": [[1204, "polars.Series.var"]], "view() (polars.series method)": [[1205, "polars.Series.view"]], "zip_with() (polars.series method)": [[1206, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1222, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1222, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1222, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1222, "polars.SQLContext.__init__"]]}})